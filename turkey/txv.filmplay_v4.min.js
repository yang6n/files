/**
 * @fileOverview 公共组件-通用自定义事件管理器
 */

/**
 * 通用自定义事件管理器
 * 
 * @type Object
 */
Live.actionManager = (function() {
	var readyCallbacks = {}, undefined,
		readyDeferreds = {};
	return {
		/**
		 * 添加事件回调
		 * 
		 * @param {String}
		 *          act 事件名称
		 * @param {Function}
		 *          fn 回调方法
		 */
		on : function(act, fn) {
			if (typeof act == "string" && act.length > 0 && typeof fn == "function") {
				if (!readyCallbacks[act] || typeof readyCallbacks[act].add != "function") {
					readyCallbacks[act] = new $j.Callbacks("unique");
				}
				if(!readyCallbacks[act].has(fn)){
					readyCallbacks[act].add(fn);	
				}
			}
		},

		/**
		 * 添加一个deferred类的回调事件，此事件最多执行一次
		 * 
		 * @param {String}
		 *          act 事件名称
		 * @param {Function}
		 *          fn 回调方法
		 */
		one : function(act, fn) {
			if (typeof act == "string" && act.length > 0 && typeof fn == "function") {
				if (!readyDeferreds[act] || typeof readyDeferreds[act].done != "function") {
					readyDeferreds[act] = new $j.Deferred();
				}
				readyDeferreds[act].done(fn);
			}
		},

		/**
		 * 触发事件回调
		 * 
		 * @param {String}
		 *          act 事件名称
		 * @param {Array}
		 *          args 触发回调的参数数组
		 */
		trigger : function(act, args) {
			if (typeof act == "string" && act.length > 0) {
				if (readyDeferreds[act] &&  typeof readyDeferreds[act].resolveWith == "function") {
					readyDeferreds[act].resolveWith(null, args);
				}
				else {
					readyDeferreds[act] = new $j.Deferred();
					readyDeferreds[act].resolveWith(null, args);
				}
				if (readyCallbacks[act] && typeof readyCallbacks[act].fireWith == "function") {
					readyCallbacks[act].fireWith(null, args);
				}
			}
		},

		/**
		 * 删除事件回调
		 * 
		 * @param {String}
		 *          act 事件名称
		 * @param {Function}
		 *          fn 回调方法
		 */
		off : function(act, fn) {
			if (typeof act == "string" && act.length > 0 && readyCallbacks[act] && typeof readyCallbacks[act].remove == "function") {
				if (typeof fn == "function") {
					readyCallbacks[act].remove(fn);
				}
				else {
					readyCallbacks[act] = undefined;
				}
			}
		}
	};
})();
(function($) {
    $ = $j ? $j : jQuery;
    var cidCounter = 0,
        DATA_SLIDER_CID = 'data-slider-cid',
        // 所有初始化过的 Slider 实例
        cachedInstances = {};    
        win = $(window);
    /**
     * @createTime:2013-07-25
     * @lastChange:2013-09-29
     * @author jarvanXing
     * @version 0.4
     */
     
    /**
     * @class Slider类，可切换组件，核心特征是：有一组可切换的面板（Panel），可通过触点（Trigger）来触发;
     * @param {Element} Slider元素的容器节点，支持直接传入选择器，也可以是$(dom);
     * @param {json} options 构造参数，均为可选, 支持以下参数：
     {string||Array}  triggers (Optional)用来获取触发器列表, 支持直接传入选择器，也可以是元素数组;
     {string}  activeTriggerClass (Optional) 标识当前trigger的class,默认为active
     {string||Array}  panels (Optional)用来获取面板列表, 支持直接传入选择器，也可以是元素数组;
     {string||Array}  prev (Optional)用来获取后退按钮, 支持直接传入选择器，也可以是$(dom);
     {string||Array}  next (Optional)用来获取前进按钮, 支持直接传入选择器，也可以是$(dom);
     {boolean} autoPlay (Optional) 是否自动切换，默认为false, 开启后，不需要触发触发器，可以实现自动播放;
     {boolean} autoPlayPausing (Optional) 自动轮播是否处于暂停状态。可以随时修改Slider的实体的autoPlayPausing，来决定是否暂停轮播;
     {int} interval (Optional) 自动轮播的时间间隔，默认为3000ms;
     {boolean} pauseOnHover (Optional) triggerType 为 hover 时, 鼠标悬停在 slide 上是否暂停自动播放, 默认为 true;
     {boolean} triggerType (Optional) 触发类型hover||click,默认为click
     {boolean} circular (Optional) 是否循环切换, 默认为 true, 当切换到最初/最后一个时, 是否切换到最后/最初一个。
     {int} delay (Optional) 触发延迟(ms)，默认为300
     {string} effect (Optional) 动画效果函数, 默认为none, 可取 scroll, fade, slide(手风琴效果时可用),simFade(tab文字切换时可用).
     {string||function} easing (Optional) 动画效果函数, 仅在effects为scroll时生效,默认效果是linear, 可传入效果名或者直接传入自定义效果函数.
     {boolean} polish (Optional) 滚动时是否自动补齐,默认为true自动补齐
     {int} duration (Optional) 动画执行时间（单位是ms），默认为500
     {int} length (Optional) 可切换的版数,初始化时自动设置
     {int} activeIndex (optional)初始化时，自动切换到指定面板，默认为0，也就是第一个。
     {int} step (optional)步长，表示每次切换时需要间隔多少个panels, 默认为1。
     {int} count (optional)可视区域内panel节点个数，默认为0,一般不需要设置。当step与可见区域panel个数不一致时设置,比如可见区域有5个panel(count=5)，但每次只切2个(step=2)。
     {string} lazyStr (Optional) 图片懒加载读取的属性名称, 推荐默认为data-src,我们现在是_src
     {string} ajaxStr (Optional) 切换时ajax加载所读取的属性名称, 推荐默认为data-ajax,我们现在是rel
     {string} scrollType (Optional) 当选择effect选择scroll滚动效果时,可选择是左右还是上下滚动:'x'|'y',默认为x
     {string} prevDisClass (Optional) 如果是不循环滚动且需要控制翻页按钮样式的,此处可设置后退按钮不可用状态的class
     {string} nextDisClass (Optional) 如果是不循环滚动且需要控制翻页按钮样式的,此处可设置前进按钮不可用状态的class
     {string} panelWidth (Optional) 单个panel占据的宽度(包括左右边距),默认不需要。如果左右滚动效果时自动计算滚动距离不准确,则传入panelWidth，此时会根据传入的panelWidth计算滚动距离
     {string} panelHeight (Optional) 同上,只是变成上下滚动的情况
     {boolean} preventDefault (Optional) hover模式时，点击trigger时是否阻止默认事件，默认为true
     {Array} viewSize(optional) 可见视图区域的大小,一般不需要设置。如果 css 中没有设置 panel 的高宽且初始不能得到panel宽度且没有设置panelWidth||panelHeight造成viewSize不能正常计算(会抛出error) , 则需要这里手工指定大小, 默认为 [].
     当可视图区域大小与step步长大小不一致时：需设置viewSize为可视图区域大小。
     {function} beforeSwitch (Optional) 事件,切换前自定义的函数,会把切换后当前面板传进去
     {function} afterSwitch (Optional) 事件,切换后自定义的函数,会把切换后当前面板传进去
     {function} panelEvent (Optional) 自定义给panels绑定事件，会把panels集合传进去
     * @return {Slider}
     */

    function Slider(sle, opts) {

        this.attrs = $.extend({}, {
            element: sle,
            triggers: "",
            panels: "",
            prev: "",
            next: "",
            polish: true,
            autoPlay: false,
            pauseOnHover: true,
            autoPlayPausing: false,
            interval: 5000,
            effect: 'none',
            easing: 'easeOutQuart',
            duration: 500,
            circular: true,
            scrollType: 'x',
            triggerType: 'click',
            delay: 300,
            activeIndex: 0,
            step: 1,
            skip: 0,
            length: 0,
            viewSize: [],
            beforeSwitch: null,
            afterSwitch: null,
            panelEvent: null,
            preventDefault: true,
            activeTriggerClass: 'active',
            prevDisClass: '',
            nextDisClass: '',
            count: 0,
            lazyStr: 'data-src',
            ajaxStr: 'data-ajax',
            panelWidth: null,
            panelHeight: null

        }, opts);
        this.cid = uniqueCid();
        this.init();
        return this;
    }

    $.Slider = Slider;

    $.extend(Slider.prototype, {

        _getDatasetRole: function() {
            var element = this.get('element');
            typeof element == 'string' ? element = $(element) : "";
            this.set('element', element);
            this.element=element;
            var role = {};
            var roles = ['trigger', 'panel', 'nav', 'content', 'prev', 'next'];
            $.each(roles, function(index, key) {
                var elems = $('[data-role=' + key + ']', element);
                if (elems.length) {
                    role[key] = elems;
                }
            });
            return role;
        },
        //获取panel占位大小自身宽高+边距
        _getSize: function(obj) {
            var w = parseInt(obj.outerWidth());
            w += parseInt(obj.css('marginLeft')) || 0 + parseInt(obj.css('marginRight')) || 0;
            var h = parseInt(obj.outerHeight());
            h += parseInt(obj.css('marginTop')) || 0 + parseInt(obj.css('marginBottom')) || 0;
            return [w, h];
        },

        //初始化内部各个角色节点及所需属性
        _initPanels: function(role) {

            var panels = this.get('panels', true);
            var step = this.get('step');
            // 先获取 panels 和 content
            if (panels.length > 0) {

            } else if (role.panel) {
                panels = role.panel;
            } else if (role.content) {
                panels = role.content.find('> *');
            }

            if (role.content) {
                this.content = role.content;
            }

            if (panels.length === 0) {
                return false;
                //throw new Error('panels.length is ZERO');
            }
            if (!this.content) {
                this.content = panels.parent();
            }
            this.set('panels', panels);
         
            //计算可视区域大小
            var viewSize = this.get('viewSize');
            var firstPanel = panels.last();
            //取最后一个panel没取到宽高的话还是算第一个
            var realFirstPanel = panels.first();
            //每个panel占据的宽高(包括边距),如果没有设置则自动计算
            var w = this.get('panelWidth') || this._getSize(firstPanel)[0] || this._getSize(realFirstPanel)[0];
            var h = this.get('panelHeight') || this._getSize(firstPanel)[1] || this._getSize(realFirstPanel)[1];
            w = w != 0 ? w : 260;
            this.set('panelWidth',w);
            this.set('panelHeight',h);
            //如果没有设置viewSize则自动计算
            if (!viewSize[0]) {
                viewSize[0] = w * step;
                viewSize[1] = h * step;
                this.set('viewSize', viewSize);
            }
            //当step与可见区域panel个数不一致时，需要根据传入的count来计算可见区域大小
            var count = this.get('count');
            if (count && count != step) {
                viewSize[0] = w * count;
                viewSize[1] = h * count;
                this.set('viewSize', viewSize);
            }

            if (!viewSize[0]) {
                throw new Error('Please specify viewSize manually');
            }

            var isX = this.get('scrollType') === 'x';
            var contentDiff = parseInt(isX ? viewSize[0] : viewSize[1], 10);
            var panelDiff = parseInt(isX ? w : h, 10);
            var stepDiff = panelDiff * step;
            //当没有传入count时则count = 可见区域宽高/单个panel占据宽高
            count ? "" : count = parseInt(contentDiff / panelDiff, 10);
            //length可切换的总版数
            var length = Math.ceil((panels.length - count) / step);
            //lastShow最后一版可切换的panel个数
            var lastShow = (panels.length - count) % step;
            this.set('length', length);
            this.set('contentDiff', contentDiff);
            this.set('stepDiff', stepDiff);
            this.set('lastShow', lastShow);
            this.set('panelDiff', panelDiff);
            this.set('count', count);
            this.set('prop',isX?'marginLeft':'marginTop');
            //如果content有marginLeft边距,滚动时还要考虑这个
            this.set('contentMleft', parseInt(this.content.css('marginLeft')) || 0);

            return true;

        },
        //此方法仅支持step==count的情况
        reload:function(curstep){
            var that = this,
                step = this.get('step'),
                count = this.get('count'),
                length = this.get('length'),
                activeIndex = this.get('activeIndex'),
                prop = this.get('prop'),
                panels = this.get('panels'),
                firstPanel = panels.last(),
                w = this._getSize(firstPanel)[0],
                h = this._getSize(firstPanel)[1],
                oldW = this.get('panelWidth'),
                newW = w,                
                extraw = oldW-w,      
                isX = this.get('scrollType') === 'x',
                contentMleft = this.get('contentMleft'),
                panelDiff = w,
                viewSize = this.get('viewSize');
            if(step == curstep){
                return;
            }

            //记录下变化的panel大小和间距变化
            if(extraw && !this.get('spanelWidth')){
                this.set('spanelWidth',w);
            }

            if(this.get('spanelWidth')){
                newW = this.get('spanelWidth');
            }

            //拿到resize前的panelwidth
            if(step > curstep){
                oldW = Math.max(newW,oldW);
            }else{
                oldW = Math.min(newW,oldW);
            }

            extraw = oldW - w;

            //当step发生变化时重设viewsize,step,count,stepDiff,contentDiff
            viewSize[0] = w * curstep;
            viewSize[1] = h * curstep;
            this.set('viewSize', viewSize); 
            this.set('step',curstep);
            this.set('skip',curstep);
            this.set('count',curstep);
            var curStepDiff = panelDiff * curstep;
            this.set('stepDiff', curStepDiff);
            this.set('contentDiff',curStepDiff); 
            //设置新的length
            var newLength = Math.ceil((panels.length - curstep) / curstep);                            
            this.set('length',newLength);
            //设置新的尾补数量  
            var curLastShow = (panels.length - curstep) % curstep;
            this.set('lastShow',curLastShow); 

            var props = {};
            //当前左侧不在视野范围内的panel数量
            var leftPanelsCount = Math.abs(Math.ceil(parseInt(that.content.css(prop))/oldW));
            var leftExtra = leftPanelsCount%curstep;
            if(leftExtra){
                if(leftExtra > Math.floor(curstep/2)){
                    props[prop] = parseInt(this.content.css(prop)) + extraw*leftPanelsCount - panelDiff * (curstep-leftExtra);
                }else{
                    props[prop] = parseInt(this.content.css(prop)) + extraw*leftPanelsCount + panelDiff * leftExtra;
                }
                this.content.css(props);               
            }
            //如果在最后一版,还得挪下panels,避免显示不全或者多出一个panel
            if(length==activeIndex){
                props[prop] = -contentMleft-panels.length*panelDiff+panelDiff*curstep;
                length==0?props[prop]=0:"";
                this.content.css(props);
            }            
            //页面尺寸变化后,重新设置当前索引
            var newLeftPanelsCount = Math.abs(Math.ceil(parseInt(that.content.css(prop))/panelDiff));
            var curActiveIndex = Math.ceil(newLeftPanelsCount/curstep);
            this.set('activeIndex',curActiveIndex); 
            if(newLeftPanelsCount > leftPanelsCount){
                this._loadImg({
                    toPanels:panels.slice(leftPanelsCount+step,newLeftPanelsCount+curstep)
                });
            }                    
            //可切换的版数发生变化,按钮状态也得重设
            if(!this.get('circular')){
                this._setBtnStatus();
            }  
        },
        _setBtnStatus: function(index, tag) {
            var prevDisClass = this.get('prevDisClass'),
                nextDisClass = this.get('nextDisClass'),
                activeIndex = this.get('activeIndex'),
                prev = this.get('prev'),
                next = this.get('next'),
                length = this.get('length'),
                skip = this.get('skip');
            if(typeof prev=== 'string' || typeof next=== 'string'){
                return;
            }
            if(!prevDisClass || !nextDisClass){
                return;
            }
            prev.removeClass(prevDisClass);
            next.removeClass(nextDisClass);

            if(!index && index != 0){
                index = this.get('activeIndex');
            }

            if(!index&&!tag){
                activeIndex==0?prev.addClass(prevDisClass):"";
                activeIndex==length?next.addClass(nextDisClass):"";
                return;
            }
            if ((index == 0 || index - skip <0)) {
                prev.addClass(prevDisClass);
            }
            if ((index == length || index + skip > length)) {
                next.addClass(nextDisClass);
            }

        },
        // 让 element 与 Slider 实例建立关联
        _stamp: function() {
            var cid = this.cid;
            this.element.attr(DATA_SLIDER_CID, cid);
            cachedInstances[cid] = this;
        },        
        _initTriggers: function(role) {
            var triggers = this.get('triggers', true);

            // 获取 triggers
            if (triggers.length > 0) {

            }
            // attr 里没找到时，才根据 data-role 来解析
            else if (role.trigger) {
                triggers = role.trigger;
            } else if (role.nav) {
                triggers = role.nav.find('> *');
            }
            // 没有传入 triggers，也没有通过 data-role 指定时，不做处理;
            else {
                return false;
            }
            if (role.nav) {
                this.nav = role.nav;
            }
            this.set('triggers', triggers);

            if (!this.nav && triggers.length) {
                this.nav = triggers.parent();
            }



            triggers.each(function(i, trigger) {
                $(trigger).data('value', i);
                $(trigger).attr('hideFocus', true);
            });

            return true;
        },

        _initBtns: function(role) {

            var prev = this.get('prev', true);
            var next = this.get('next', true);
            if (prev.length > 0 && next.length > 0) {

            }
            // attr 里没找到时，才根据 data-role 来解析
            else if (role.prev && role.next) {
                prev = role.prev;
                next = role.next;
            } else {
                return false;
            }

            this.set('prev', prev);
            this.set('next', next);
            prev.attr('hideFocus', true);
            next.attr('hideFocus', true);
            return true;
        },

        _bindTriggers: function() {
            var that = this,
                triggers = this.get('triggers');

            if (this.get('triggerType') === 'click') {
                triggers.click(focus);
            }
            // hover
            else {
                triggers.hover(focus, leave);
            }

            function focus(ev) {
                that._onFocusTrigger(ev.type, $(this).data('value'));
                if (that.get('preventDefault')) {
                    ev.preventDefault();
                }
            }

            function leave() {
                clearTimeout(that._switchTimer);
            }
        },

        _onFocusTrigger: function(type, index) {
            var that = this;

            // click or tab 键激活时
            if (type === 'click') {
                this.switchTo(index, type);
            }

            // hover
            else {
                this._switchTimer = setTimeout(function() {
                    that.switchTo(index, type);
                }, this.get('delay'));
            }
        },
        _switchTrigger: function(toIndex, fromIndex) {
            var triggers = this.get('triggers'),
                activeClass = this.get('activeTriggerClass');

            if (triggers.length < 1) return;

            triggers.eq(fromIndex).removeClass(activeClass);
            triggers.eq(toIndex).addClass(activeClass);

            var index = (toIndex + 1) % (this.get('length') + 1)
            this._setBtnStatus();
        },

        _bindBtns: function(role) {
            var prev = this.get('prev'),
                next = this.get('next'),
                duration = this.get('duration'),
                effect = this.get('effect'),
                that = this;

            effect === 'none' ? duration = 100 : "";
            if (!prev || !next) {
                return;
            }
            prev.bind('click', _prev);
            next.bind('click', _next);

            function _prev(ev) {
                var _this = $(this);
                _this.unbind('click', _prev);
                setTimeout(function() {
                    _this.bind('click', _prev);
                }, duration);
                that.prev(ev,true);
                return false;
            }

            function _next(ev) {
                var _this = $(this);
                _this.unbind('click', _next);
                setTimeout(function() {
                    _this.bind('click', _next);
                }, duration);
                that.next(ev,true);
                return false;
            }
        },

        _checkCallback: function(func, opts) {
            var that = this;
            if ($.isFunction(func)) {
                func(that, opts);
            }
        },

        _switchTo: function(fromIndex, toIndex, ev) {
            if(fromIndex==toIndex){return}
            var that = this;
            var panelInfo = this._getPanelInfo(toIndex, fromIndex);
            var beforeSwitch = this.get('beforeSwitch');
            this._checkCallback(beforeSwitch, panelInfo);
            this._switchTrigger(toIndex, fromIndex);
            $.when(that._switchPanel(panelInfo)).done(_callback);

            function _callback() {
                that._loadImg(panelInfo);
                var afterAllSwitch = that.get('afterAllSwitch');
                that._checkCallback(afterAllSwitch, panelInfo);
                if (!ev) {
                    return;
                }
                var afterUserSwitch = that.get('afterUserSwitch');
                that._checkCallback(afterUserSwitch, panelInfo);                
                var afterSwitch = that.get('afterSwitch');
                that._checkCallback(afterSwitch, panelInfo);
            }
        },


        _loadImg: function(panelInfo) {
            var panels = panelInfo.toPanels;
            if (panels.length > 0) {
                var img = panels.find('img'),
                    lazyStr = this.get('lazyStr');
                img.each(function(i, obj) {
                    var src = $(obj).attr(lazyStr);
                    if (!obj.src && src) {
                        obj.src = src;
                    }
                });
            }

        },

        _switchPanel: function(panelInfo) {
            var dtd = $.Deferred();
            var effect = this.get('effect');
            var panels = this.get('panels');
            var toPanels = panelInfo.toPanels;
            var that = this;
            var ajaxStr = this.get('ajaxStr');
            var triggers = this.get('triggers');
            if (triggers.length) {
                var currentTrigger = triggers.eq(panelInfo.toIndex);
                var url = currentTrigger.attr(ajaxStr);
                if (url && !toPanels.data('loaded')) {
                    toPanels.load(url, function() {
                        toPanels.data('loaded', true);
                        _callback();
                    });
                } else {
                    _callback();
                }
            } else {
                _callback();
            }


            function _callback() {
                // 默认是最简单的切换效果：直接隐藏/显示
                switch (effect) {
                    case 'none':
                        panels.hide();
                        toPanels.show();
                        break;
                    case "nothing":
                        break;
                    case 'slide':
                        panels.slideUp();
                        toPanels.slideDown();
                        break;
                    case 'simFade':
                        panels.hide();
                        toPanels.fadeIn();
                        break;
                    case 'fade':
                        that._fade(panelInfo);
                        break;
                    case 'scroll':
                        that._scroll(panelInfo);
                        break;
                }
                dtd.resolve();

            }

            return dtd;
        },
        _fade: function(panelInfo) {
            // 简单起见，目前不支持 step > 1 的情景。若需要此效果时，可修改结构来达成。
            if (this.get('step') > 1) {
                throw new Error('Effect "fade" only supports step === 1');
            }

            var fromPanel = panelInfo.fromPanels.eq(0);
            var toPanel = panelInfo.toPanels.eq(0);

            if (this.anim) {
                // 立刻停止，以开始新的
                this.anim.stop(false, true);
            }

            // 首先显示下一张
            toPanel.show().css('opacity', 1);

            if (panelInfo.toIndex != panelInfo.fromIndex) {
                var that = this;
                var duration = this.get('duration');
                var easing = this.get('easing');

                // 动画切换
                this.anim = fromPanel.animate({
                        opacity: 0
                    }, duration, easing,
                    function() {
                        that.anim = null; // free

                        // 切换 z-index
                        toPanel.css('zIndex', 2);
                        fromPanel.hide().css('zIndex', 1);
                    });
            }
            // 初始情况下没有必要动画切换
            else {
                toPanel.show().css('zIndex', 2);
            }
        },
        _skipTrigger: function(skip, type, force) {
            var skipIndex = this.get('skipIndex');
            var toIndex;
            if (!skipIndex) {
                this.set('skipIndex', skipIndex = 0);
            }

            var toTrigegrs;
            var triggers = this.get('triggers');
            var c = Math.ceil(triggers.length / skip);
            if (type == 'prev') {
                toIndex = (skipIndex - 1 + c) % c;
            }
            if (type == 'next') {
                toIndex = (skipIndex + 1) % c;
            }

            toTrigegrs = triggers.slice(toIndex * skip, (toIndex + 1) * skip);
            if(!force){
                if(toTrigegrs.filter("."+this.get("activeTriggerClass")).size()>0){
                    if (type == 'prev') {
                        toIndex = (toIndex - 1 > 0 ? toIndex - 1 : c-1) % c;
                    }
                    if (type == 'next') {
                        toIndex = (toIndex + 1) % c;
                    }
                    toTrigegrs = triggers.slice(toIndex * skip, (toIndex + 1) * skip);
                }
            }
            triggers.hide();
            toTrigegrs.show();
            this.set('skipIndex', toIndex);

        },
        _getPanelInfo: function(toIndex, fromIndex) {
            var panels = this.get('panels');
            var step = this.get('step');
            var count = this.get('count');
            var lastShow = this.get('lastShow');
            var fromPanels, toPanels;
            var length = this.get('length');
            var polish = this.get('polish');
            //lastShow = count==step?0:(toIndex == length?lastShow:0);
            lastShow = (toIndex == length ? lastShow : 0);
            polish ? "" : lastShow = 0;
            //算出切换前后的pannels;
            fromPanels = panels.slice(fromIndex * step, fromIndex * step + count - lastShow);
            toPanels = panels.slice(toIndex * step, toIndex * step + count);
            if (lastShow) {
                toPanels = panels.slice((toIndex - 1) * step + lastShow, (toIndex - 1) * step + lastShow + count);
            }
            return {
                toIndex: toIndex,
                fromIndex: fromIndex,
                toPanels: $(toPanels),
                fromPanels: $(fromPanels)
            };
        },
        _scroll: function(panelInfo) {
            var toIndex = panelInfo.toIndex;
            var fromIndex = panelInfo.fromIndex;
            if (toIndex == fromIndex) {
                return;
            }
            var contentMleft = this.get('contentMleft');
            var polish = this.get('polish');
            var content = this.content;
            // 设置定位信息，为滚动效果做铺垫
            //content.css('position', 'relative');

            // 注：content 的父级不一定是 container
            // if (content.parent().css('position') === 'static') {
            //     content.parent().css('position', 'relative');
            // }

            var isX = this.get('scrollType') === 'x';
            var prop = isX ? 'marginLeft' : 'marginTop';
            var stepDiff = this.get('stepDiff');
            var length = this.get('length');
            var count = this.get('count');
            var lastShow = this.get('lastShow');
            var panelDiff = this.get('panelDiff');
            var step = this.get('step');
            var _extra = (lastShow && toIndex == length) ? panelDiff * (step - lastShow) : 0;
            var action = this.get('action');
            //是否自动补齐
            polish ? "" : _extra = 0;
            //算出需要滚动的距离
            var diff = -stepDiff * toIndex + _extra + contentMleft;

            var props = {};
            props[prop] = diff + 'px';

            // 开始动画
            // 开始动画前，先停止掉上一动画
            if (this.anim) {
                this.anim.stop(false, true);
            }


            if (toIndex == 0 && action == 'next') {
                this.content.css(prop, -stepDiff);
            }
            if (toIndex == length && action == 'prev') {
                this.content.css(prop, diff + stepDiff);
            }
            var duration = this.get('duration');
            var easing = this.get('easing');
            var that = this;
            this.anim = this.content.animate(props, duration, easing,
                function() {
                    that.anim = null;
                });
        },
        get: function(str, flag) {
            var res = this.attrs[str];
            return res && flag ? this.get('element').find(res) : res;
        },
        set: function(key, value) {
            this.attrs[key] = value;
        },
        init: function() {
            var role = this._getDatasetRole();
            //未初始化关键数据则直接return
            if (!this._initPanels(role)) {
                return;
            }
            if (this._initBtns(role)) {
                this._bindBtns(role);
            }   
            
            //初始化时按钮状态也重设,这样就不需要调用时处理这个逻辑
            
            if(!this.get('circular')){
                this._setBtnStatus();
            }   

            if (this.get('length') < 1) {
                return;
            }
            if (this._initTriggers(role)) {
                this._bindTriggers();
            }


            var index = this.get('activeIndex');
            if (index) {
                this._switchTo(0, index);
            }else if (index === 0) {   //index 为0 时需要加载第一屏的图片
                var panelInfo = this._getPanelInfo(0, 0);
                this._loadImg(panelInfo);
            };

            var autoPlay = this.get('autoPlay');
            if (autoPlay && $.autoPlay) {
                $.autoPlay.install.call(this);
            }


               

            // 保存实例信息
            this._stamp();            

        },
        // 切换到指定 index
        switchTo: function(toIndex, ev) {
            var fromIndex = this.get('activeIndex');
            this.set('activeIndex', toIndex);
            this._switchTo(fromIndex, toIndex, ev);
        },
        // 切换到上一视图
        prev: function(ev, force) {
            var fromIndex = this.get('activeIndex'),
                length = this.get('length'),
                circular = this.get('circular'),
                prev = this.get('prev');

            // 考虑循环切换的情况
            var index = (fromIndex - 1 + length + 1) % (length + 1);
            if (!circular) {
                if (index == length) {
                    return;
                }
                this._setBtnStatus(index, 'prev');
            }
            this.set('action', 'prev');
            /*判断是否需要覆盖翻页按钮事件begin*/
            var skip = this.get('skip');
            if (ev && skip) {
                this._skipTrigger(skip, 'prev', force);
                return;
            }

            /*判断是否需要覆盖翻页按钮事件end*/
            this.switchTo(index, ev);

        },

        // 切换到下一视图
        next: function(ev, force) {
            var fromIndex = this.get('activeIndex'),
                length = this.get('length'),
                circular = this.get('circular'),
                next = this.get('next');
            // 考虑循环切换的情况
            var index = (fromIndex + 1) % (length + 1);
            if (!circular) {
                if (index == 0) {
                    return;
                }
                this._setBtnStatus(index, 'next');
            }

            this.set('action', 'next');

            /*判断是否需要覆盖翻页按钮事件begin*/
            var skip = this.get('skip');

            if (skip && (ev || (index % skip == 0))) {
                this._skipTrigger(skip, 'next', force);
            }
            if (skip && ev) {
                return;
            }

            this.switchTo(index, ev);

        },
        destroy:function(){
            //销毁自动播放
            if (this.get('autoPlay') && $.autoPlay) {
                $.autoPlay.destroy.call(this);
            }            
            // 销毁静态数组中的实例
            erase(this.cid, cachedInstances);
            this.element.remove(); 
                       
        }

    });

    // 从数组中删除对应元素

    function erase(target, array) {
        for (var i = 0; i < array.length; i++) {
            if (target === array[i]) {
                array.splice(i, 1);
                return array;
            }
        }
    }

    $.fn.extend({
        Slider: function(opts) {
            var rs = [];
            this.each(function() {
                var $this = $(this);
                var op = {};
                op.hot = $this.attr('data-exp') || '';
                op.activeIndex = parseInt($this.attr("data-activeIndex")) || 0;
                op.triggerType = $this.attr("data-triggerType") || "click";
                op.step = $this.attr('data-step');
                opts ? "" : opts = {};
                op = $.extend(op, opts);
                rs.push(new Slider($(this), op));
            });
            return rs;
        }
    });

    // 查询与 selector 匹配的第一个 DOM 节点，得到与该 DOM 节点相关联的 Slider 实例
    $.Slider.query = function(selector) {
        var element = $(selector).eq(0);
        var cid;

        element && (cid = element.attr(DATA_SLIDER_CID));
        return cachedInstances[cid];
    }

    // 自动播放插件
    $.autoPlay = {

        install: function() {
            var element = this.get('element');
            var EVENT_NS = '.' + this.cid;
            var timer;
            var interval = this.get('interval');
            var that = this;

            // start autoplay
            start();

            function start() {
                // 停止之前的
                stop();

                // 设置状态
                that.paused = false;

                // 开始现在的
                timer = setInterval(function() {
                    if (that.get('autoPlayPausing')) {
                        that.paused = true;
                    } else {
                        that.paused = false;
                    }
                    if (that.paused) return;
                    that.next();
                }, interval);
            }

            function stop() {
                if (timer) {
                    clearInterval(timer);
                    timer = null;
                }
                that.paused = true;
            }

            // public api
            this.stop = stop;
            this.start = start;

            // 滚出可视区域后，停止自动播放
            this._scrollDetect = throttle(function() {
                that[isInViewport(element) ? 'start' : 'stop']();
            });
            win.on('scroll' + EVENT_NS, this._scrollDetect);

            // 鼠标悬停时，停止自动播放
            if (this.get('pauseOnHover')) {
                element.hover(stop, start);
            }

            this._scrollDetect();

        },

        destroy: function() {
            var EVENT_NS = '.' + this.cid;

            this.stop && this.stop();

            if (this._scrollDetect) {
                this._scrollDetect.stop();
                win.off('scroll' + EVENT_NS);
            }
        }
    };

    //为实例创建cid标识

    function uniqueCid() {
        return 'slider-' + cidCounter++;
    }

    function throttle(fn, ms) {
        ms = ms || 200;
        var throttleTimer;

        function f() {
            f.stop();
            throttleTimer = setTimeout(fn, ms);
        }

        f.stop = function() {
            if (throttleTimer) {
                clearTimeout(throttleTimer);
                throttleTimer = 0;
            }
        };

        return f;
    }


    function isInViewport(element) {
        var scrollTop = win.scrollTop();
        var scrollBottom = scrollTop + win.height();
        var elementTop = element.offset().top;
        var elementBottom = elementTop + element.height();

        // 只判断垂直位置是否在可视区域，不判断水平。只有要部分区域在可视区域，就返回 true
        return elementTop < scrollBottom && elementBottom > scrollTop;
    }



    $.justScroll = function JustScroll(sle, op) {
        this.speed = op.speed || 4;
        this.prevDisClass = 'arrow_left_disable';
        this.nextDisClass = 'arrow_right_disable';
        this.element = $(sle);
        for (var key in op) {
            this[key] = op[key];
        }
        this.init();
    }
    var requestAFrame = (function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame ||
            function(callback) {
                return window.setTimeout(callback, 16);
        };

    })(),
        cancelAFrame = (function() {
            return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame ||
                function(rid) {
                    window.clearTimeout(rid);
            };
        })(),
        isSupportAFrame = function() {
            return (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame) !== undefined;
        }();

    $.extend($.justScroll.prototype, {
        init: function() {
            this.prev = this.element.find(this.prev);
            this.next = this.element.find(this.next);
            this.panels = this.element.find(this.panels);
            this.content = this.panels.first().parent();
            //this.scrollBox = this.content.parent();
            this.length = this.panels.length;
            this.status = 'stop';
            this.width = (this.panelWidth ? this.panelWidth : this.getWidth(this.panels.first())) * (this.length - this.step);
            // this.animateAttr = 'marginLeft';
            // if (this.content.css('position') == 'absolute') {
            //   this.animateAttr = 'left';
            // }
            //this.width = this.scrollBox.get(0).scrollWidth;
            this.idx = 1;
            //isSupportAFrame ? this.px = 2 : this.px = 2;
            this.px = 2;
            //this.px=2;
            //this.easing = this.easing || 'linear';
            this.bindBtns();
        },
        getWidth: function(obj) {
            var w = parseInt(obj.outerWidth());
            w += parseInt(obj.attr('marginLeft')) || 0 + parseInt(obj.attr('marginRight')) || 0;
            return w;
        },
        pageMoveOn: function() {
            var self = this;
            self.interval = requestAFrame($.proxy(self.moveOn, self));
        },
        pageMoveOut: function() {
            var self = this;
            cancelAFrame(self.interval);
        },
        moveOn: function() {
            var self = this;
            var ul = self.content.get(0);
            var l = parseInt(ul.style.left, 10) || 0;

            if (self.status === 'stop') {
                return;
            }
            if (l == 0 && self.status === 'left') {
                self.prev.addClass(self.prevDisClass);
                return;
            }
            if (-l == self.width && self.status === 'right') {
                self.next.addClass(self.nextDisClass);
                return;
            }
            //不支持requestAFrame则加入计步器
            self.idx++;
            if (self.idx % 2 !== 0 && !isSupportAFrame) {
                requestAFrame($.proxy(self.moveOn, self));
                return;
            }
            self.idx = 1;

            if (self.status === 'left' && l < 0) {
                ul.style.left = l + self.px + 'px';
            } else if (self.status === 'right' && -l < self.width) {
                ul.style.left = l - self.px + 'px';
            }

            requestAFrame($.proxy(self.moveOn, self));
        },
        bindBtns: function() {
            var self = this,
                prev = this.prev.get(0),
                next = this.next.get(0),
                ele = this.element.get(0);
            prev.onmouseover = function() {
                self.status = "left";
                $(next).removeClass('arrow_right_disable');
            };
            prev.onmouseout = function() {
                self.status = "stop";
            };
            next.onmouseover = function() {
                $(prev).removeClass('arrow_left_disable');
                self.status = "right";
            };
            next.onmouseout = function() {
                self.status = "stop";
            };
            ele.onmouseover = function() {
                clearTimeout(self.rec_out);
                self.rec_hover = setTimeout($.proxy(self.pageMoveOn, self), 1);
            };
            ele.onmouseout = function() {
                clearTimeout(self.rec_hover);
                self.rec_out = setTimeout($.proxy(self.pageMoveOut, self), 1);
            };
        }
    });



    $.easing['jswing'] = $.easing['swing'];

    $.extend(jQuery.easing, {
        def: 'easeOutQuad',
        // swing: function (x, t, b, c, d) {
        //   //alert(jQuery.easing.default);
        //   return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
        // },
        // easeInQuad: function (x, t, b, c, d) {
        //   return c*(t/=d)*t + b;
        // },
        // easeOutQuad: function (x, t, b, c, d) {
        //   return -c *(t/=d)*(t-2) + b;
        // },
        // easeInOutQuad: function (x, t, b, c, d) {
        //   if ((t/=d/2) < 1) return c/2*t*t + b;
        //   return -c/2 * ((--t)*(t-2) - 1) + b;
        // },
        // easeInCubic: function (x, t, b, c, d) {
        //   return c*(t/=d)*t*t + b;
        // },
        // easeOutCubic: function (x, t, b, c, d) {
        //   return c*((t=t/d-1)*t*t + 1) + b;
        // },
        // easeInOutCubic: function (x, t, b, c, d) {
        //   if ((t/=d/2) < 1) return c/2*t*t*t + b;
        //   return c/2*((t-=2)*t*t + 2) + b;
        // },
        // easeInQuart: function (x, t, b, c, d) {
        //   return c*(t/=d)*t*t*t + b;
        // },
        easeOutQuart: function(x, t, b, c, d) {
            return -c * ((t = t / d - 1) * t * t * t - 1) + b;
        }
        // easeInOutQuart: function (x, t, b, c, d) {
        //   if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
        //   return -c/2 * ((t-=2)*t*t*t - 2) + b;
        // }
        // easeInQuint: function (x, t, b, c, d) {
        //   return c*(t/=d)*t*t*t*t + b;
        // }
        // easeOutQuint: function (x, t, b, c, d) {
        //   return c*((t=t/d-1)*t*t*t*t + 1) + b;
        // },
        // easeInOutQuint: function (x, t, b, c, d) {
        //   if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
        //   return c/2*((t-=2)*t*t*t*t + 2) + b;
        // },
        // easeInSine: function (x, t, b, c, d) {
        //   return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
        // }
        // easeOutSine: function (x, t, b, c, d) {
        //   return c * Math.sin(t/d * (Math.PI/2)) + b;
        // },
        // easeInOutSine: function (x, t, b, c, d) {
        //   return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
        // },
        // easeInExpo: function (x, t, b, c, d) {
        //   return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
        // }
        // easeOutExpo: function (x, t, b, c, d) {
        //   return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
        // },
        // easeInOutExpo: function (x, t, b, c, d) {
        //   if (t==0) return b;
        //   if (t==d) return b+c;
        //   if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        //   return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
        // },
        // easeInCirc: function (x, t, b, c, d) {
        //   return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
        // }
        // easeOutCirc: function (x, t, b, c, d) {
        //   return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
        // },
        // easeInOutCirc: function (x, t, b, c, d) {
        //   if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
        //   return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
        // },
        // easeInElastic: function (x, t, b, c, d) {
        //   var s=1.70158;var p=0;var a=c;
        //   if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        //   if (a < Math.abs(c)) { a=c; var s=p/4; }
        //   else var s = p/(2*Math.PI) * Math.asin (c/a);
        //   return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        // },
        //
        // easeOutElastic: function (x, t, b, c, d) {
        //   var s=1.70158;var p=0;var a=c;
        //   if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        //   if (a < Math.abs(c)) { a=c; var s=p/4; }
        //   else var s = p/(2*Math.PI) * Math.asin (c/a);
        //   return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
        // },
        // easeInOutElastic: function (x, t, b, c, d) {
        //   var s=1.70158;var p=0;var a=c;
        //   if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
        //   if (a < Math.abs(c)) { a=c; var s=p/4; }
        //   else var s = p/(2*Math.PI) * Math.asin (c/a);
        //   if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        //   return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
        // },
        // easeInBack: function (x, t, b, c, d, s) {
        //   if (s == undefined) s = 1.70158;
        //   return c*(t/=d)*t*((s+1)*t - s) + b;
        // },
        // easeOutBack: function (x, t, b, c, d, s) {
        //   if (s == undefined) s = 1.70158;
        //   return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
        // },
        // easeInOutBack: function (x, t, b, c, d, s) {
        //   if (s == undefined) s = 1.70158;
        //   if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        //   return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
        // },
        // easeInBounce: function (x, t, b, c, d) {
        //   return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
        // },
        // easeOutBounce: function (x, t, b, c, d) {
        //   if ((t/=d) < (1/2.75)) {
        //     return c*(7.5625*t*t) + b;
        //   } else if (t < (2/2.75)) {
        //     return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
        //   } else if (t < (2.5/2.75)) {
        //     return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
        //   } else {
        //     return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
        //   }
        // }
        // easeInOutBounce: function (x, t, b, c, d) {
        //   if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
        //   return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
        // }
    });
})($j);
/**
 * @fileOverview 封装返回码统计
 */

/* @include "live.define.js" */
/**
 * 返回码统计上报
 * 
 * @type {Object}
 * @namespace Live.retCode_v2
 */
Live.retCode_v2 = {
	snid : 0,

	/**
	 * 返回码上报类型枚举
	 * 
	 * @type {Object}
	 */
	TYPE : {
		/**
		 * 成功
		 * 
		 * @type Number
		 * @default 1
		 */
		SUC : 1,
		/**
		 * 失败
		 * 
		 * @type Number
		 * @default 2
		 */
		ERR : 2,
		/**
		 * 3逻辑失败
		 * 
		 * @type Number
		 * @default 2
		 */
		LOGIC_ERR : 3
	},
	/**
	 * 配置项
	 * 
	 * @type
	 */
	config : {
		/**
		 * 请求CGI的url
		 * 
		 * @type String
		 * @default http://isdspeed.qq.com/cgi-bin/v.cgi
		 */
		cgi : "http://c.isdspeed.qq.com/code.cgi",
		/**
		 * 采样率，100表示1%,1000表示0.1%...
		 * 
		 * @type Number
		 * @default 1000
		 */
		sampling : 1
	},
	/**
	 * 共用的返回码
	 * 
	 * @type
	 */
	commCode : {
		error : -1
	},
	/**
	 * 上报数据
	 * 
	 * @param {Number}
	 *          rettype 返回结果类型1表示成功，2表示失败
	 * @param {Number}
	 *          delay 延迟时间
	 * @param {Number}
	 *          errcode 错误码
	 */
	report : function(domain, cgi, rettype, delay, errcode) {
		if (isNaN(rettype) || rettype < 1)
			return;
		if (typeof delay == "undefined")
			return;
		var url = this.config.cgi;
		var errcode = errcode || "0";
		url += "?domain=" + domain.toString() + "&cgi=" + cgi.toString() + "&type=" + rettype + "&rate=" + Live.retCode_v2.config.sampling + "&time=" + delay + "&code=" + errcode.toString() + "&uin=" + (Live.cookie.get("uin") || Live.cookie.get("luin"));
		var imgSend = new Image();
		imgSend.src = url;
	}
};

/**
 * @class Live.retCode_v2
 * @description 返回码监控对象
 */
Live.RetCode_v2 = function(domain, cgi) {
	/**
	 * Cgi所属域名（域名信息需要准确，用于cgi名自动归属业务）
	 * 
	 * @type String
	 */
	this.domain = domain;
	/**
	 * Cgi名称(如果域名下有同名cgi，请携带路径名区分，不需要带域名了)
	 * 
	 * @type String
	 */
	this.cgi = cgi;
	/**
	 * 计时器
	 * 
	 * @ignore
	 */
	this.timer = {
		begin : new Date().valueOf(),
		end : 0
	}
	/**
	 * 当前对象ID
	 */
	this.SNID = Live.retCode_v2.snid;
	/**
	 * 是否已经上报
	 */
	this.isReported = false;
	Live.retCode_v2.snid++;
}

Live.RetCode_v2.prototype = {
	/**
	 * 开始上报统计
	 */
	begin : function() {
		this.timer.begin = new Date().valueOf();
	},
	/**
	 * 上报结束
	 */
	end : function() {
		this.timer.end = this.timer.end || new Date().valueOf();
	},
	/**
	 * 上报
	 * 
	 * @param {Number}
	 *          rettype 上报类别，成功是1，失败是2
	 * @param {Number}
	 *          retcode 返回码
	 */
	reprot : function(rettype, retcode) {
		this.report(rettype, retcode);
	},
	report : function(rettype, retcode) {
		if (this.isReported)
			return;
		this.end();
		var delay = this.timer.end - this.timer.begin;
		Live.retCode_v2.report(this.domain, this.cgi, rettype, delay, retcode);
		this.isReported = true;
	},
	/**
	 * 上报成功
	 */
	reportSuc : function() {
		this.report(Live.retCode_v2.TYPE.SUC);
	},
	/**
	 * 上报错误
	 * 
	 * @param {Number}
	 *          errcode 错误码
	 */
	reportErr : function(errcode) {
		errcode = errcode || Live.retCode_v2.commCode.error;
		this.report(Live.retCode_v2.TYPE.ERR, errcode);
	},
	/**
	 * 上报错误
	 * 
	 * @param {Number}
	 *          errcode 错误码
	 */
	reportLogicErr : function(errcode) {
		errcode = errcode || Live.retCode_v2.commCode.error;
		this.report(Live.retCode_v2.TYPE.LOGIC_ERR, errcode);
	}
};

define("hw.paycenter",function(require,exports,module){
	var $ = window.jQuery || window.$j || window.$,
	paycenter = $({}),
	Req = require('util.report'),
	loading = false,
	jsUrl = "http://fusion.qq.com/fusion_loader?appid=1450000370&platform=website&v=20130717&maxage=864000",
	dialog,
	maxretry = 1;

	var config = {
		coverid : "",
		title:"正在为QQ帐号购买影片",
		zIndex:9999,
		type : "",
		//平台标记，1.web；2.大界面
		plat : 1,
		token : "",
		key : "",
		g_tk : "",
		uin : "",
		// 必须。 表示 Q 点购买物品的 url 参数，url_params 是调用 buy_goods 接口的返回。
		param : null,
		// 可选。表示是否使用沙箱测试环境。true：使用； false 或不指定：不使用。
		sandbox : true,
		// 可选。前台使用的上下文变量，用于回调时识别来源。
		context : this
	};

	var events = {
		// 可选。用户购买成功时的回调方法，其中 opt.context 为上述 context 参数。如果用户购买成
		// 功，则立即回调 onSuccess，当用户关闭对话框时再回调 onClose。
		onSuccess : function(opt) {
			paycenter.trigger("success",opt);
		},
		// 可选。用户取消购买时的回调方法，其中 opt.context 为上述 context 参数。如果用户购买失
		// 败或没有购买，关闭对话框时将先回调 onCancel 再回调 onClose。
		onCancel : function(opt) {
			paycenter.trigger("cancel",opt);
		},
		// 可选。对话框关闭时的回调方法，主要用于对话框关闭后进行 UI 方面的调整，onSuccess
		// 和 onCancel 则用于应用逻辑的处理，避免过度耦合。
		onClose : function() {
			paycenter.trigger("close");
		},
		onLoadJsFail : function() {
			paycenter.trigger("loadjsfail");
		},
		onPriceErr : function(code, msg) {
			paycenter.trigger("priceerr",{
				"code" : code,
				"msg" : msg
			});
		},
		onFrameLoad : function() {
			paycenter.trigger("frameload");
		},
		onShown : function() {
			paycenter.trigger("shown");
		},
		onLoad : function() {
			paycenter.trigger("load");
		}
	};

	paycenter.setConfig = function (conf) {
		conf = conf || {};
		$.extend(config, conf);
		return this;
	};

	paycenter.show = function (conf) {
		conf.title = ["正在为QQ帐号","（",txv.login.getUin(),"）购买影片"].join('');
		paycenter.setConfig(conf);
		if (!config.coverid) {
			config.onPriceErr(-199, "获取专辑id失败");
			return;
		}
		var skey = Live.cookie.get("skey");
		var _data = {
			cid : config.coverid,
			g_tk : config.g_tk || (!!skey?$.time33(skey):""),
			num : config.num || 1
		}
		if(config.type){
			_data.type = config.type;
		}
		if(config.plat == 2){
			_data.token = config.token;
			_data.key = config.key;
			_data.uin = config.uin;
			_data.plat = config.plat;
		}
        function sendData(host,retrycount){
	        host = host || "pay.video.qq.com";
	        retrycount = retrycount || 0;
	        var sendurl = ["http://",host,"/fcgi-bin/price-cloud?otype=json"].join("");
			var timestamp=new Date().getTime();
			var pay_report_url = 'http://pay.video.qq.com/fcgi-bin/payreport';
			function pay_report_dj(reportParams){
				
				var img = new Image();
				var data = '';

				$.each(reportParams, function (key, val) {
					data += (key+'='+val+'&');
				});

				data += ('rand=' + Math.random());

				img.src = pay_report_url + '?' + data;
			}
			Req.ajax({
				"url" : "http://pay.video.qq.com/fcgi-bin/price-cloud?otype=json",
				"dataType" : "jsonp",
				"data" : _data,
				"cache" : false,
				"success" : function(json){
					if (json && json.result && json.result.code == 0) {
				    	config.param = json.url_params;
					    var fusion2 = window.fusion2;
						if (fusion2 && fusion2.dialog && fusion2.dialog.buy) {
							dialog = fusion2.dialog.buy($.extend({}, config, events));
						} else if (!loading) {
							$.getScript(jsUrl).done(function () {
								dialog = window.fusion2.dialog.buy($.extend({}, config, events));
								loading = false;	
							});
						}
						pay_report_dj({plat:0,step:4,costtime: (new Date().getTime())-timestamp, cginame:'price-cloud', code_1:json.result.code, msg:json.result.msg,  uin:txv.login.getUin(),type:2,payitem:'1*'+COVER_INFO.id});

				    }
				    else if (json && json.result) {
					    events.onPriceErr(json.result.code, json.result.msg);
						pay_report_dj({plat:0,step:4,costtime: (new Date().getTime())-timestamp, cginame:'price-cloud', code_1:json.result.code, msg:json.result.msg,  uin:txv.login.getUin(),type:2,payitem:'1*'+COVER_INFO.id});
				    }
				    else {
						pay_report_dj({plat:0,step:4,costtime: (new Date().getTime())-timestamp, cginame:'price-cloud', code_1:-99, msg:"批价发货请求完成处理时发生错误",  uin:txv.login.getUin(),type:2,payitem:'1*'+COVER_INFO.id});

					    events.onPriceErr(-99, "批价发货请求完成处理时发生错误");
				    }
				},
				"error" : function(){
					if(retrycount<maxretry){
                        sendData("paybak.video.qq.com",++retrycount);
	                } else {
						events.onPriceErr(-500, "批价发货请求发生错误");
					}
					pay_report_dj({plat:0,step:4,costtime: (new Date().getTime())-timestamp, cginame:'price-cloud', code_1:-500, msg:"批价发货请求完成处理时发生错误",  uin:txv.login.getUin(),type:2,payitem:'1*'+COVER_INFO.id});

				}
			},{"key" : "result.code"});
		}
		sendData();
		return this;
	};

	module.exports = paycenter;
});

/**
 * @fileOverview 腾讯视频JS库 关灯效果
 * @lastUpdate $Date: 2010-12-30 09:39:53 +0800 (星期四, 2010-12-30) $
 * @author QQLive $LastChangedBy: vicyao $
 * @version $Rev: 6621 $
 */

/**
 * 腾讯视频JS库 关灯效果
 * 
 * @namespace Live.txv.lighting
 * @type {Object}
 */
Live.txv.lighting = {
	isOn : true,
	/**
	 * 关灯
	 */
	turnOff : function() {
		txv.log("turn off");
		$e(".mod_player_wrap>.mod_inner").addClass("index_10001");
		txv.lighting.isOn = false;
		var hasSetIe6 = false;
		var dark = $e("#dark_layer");
		if (dark.size() == 0) {
			$e("body").create("div", {
				"id" : "dark_layer",
				"class" : "dark_layer"
				  // "style" : "opacity:0.2"
			  });
			if (Live.userAgent.ie == 6 && !hasSetIe6) {
				$e("#dark_layer").height(document.documentElement.scrollHeight +"px");
				hasSetIe6 = true;
			}
			dark = $e("#dark_layer");
		}
		if(Live.userAgent.ie == 6&& !hasSetIe6){
			$e("#dark_layer").height($j("body").height() +"px").width($j("body").width() + "px");
			hasSetIe6 = true;
		}
		dark.css("display", "block").animate({
			    opacity : 1
		    }, 200, function() {
			    Live.txv.lighting.callback();
		    });
	},
	/**
	 * 开灯
	 */
	turnOn : function() {
		txv.lighting.isOn = true;
		txv.log("turn on");
		var dark = $e("#dark_layer");
		if (dark.size() == 0 || dark.css("display").indexOf("none") >= 0) {
			// txv.log("it already on");
			return;
		}
		dark.animate({
			    opacity : 0.2
		    }, 200, function() {
			    $e(".mod_player_wrap>.mod_inner").removeClass("index_10001");
			    dark.hide();
			    Live.txv.lighting.callback();
		    });
	},
	/**
	 * 关灯开灯后的回调
	 */
	callback : function() {

	}
};

function _qqplayer_lightup(op) {
	return op ? txv.lighting.turnOn() : txv.lighting.turnOff();
}

/**
 * @fileOverview 腾讯视频JS库 播放页前端JS第三次结构优化的产物 播放页基类
 * @lastUpdate $Date: 2013-07-08 15:12:46 +0800 (周一, 08 七月 2013) $
 * @author QQLive $LastChangedBy: stanleyyu $
 * @version $Rev: 31343 $
 */

/*
 * @include "../../../extend/qzfl.txv.js" 
 * @include "./../txv.define.js" 
 * @include "./../txv.common.js" 
 * @include "./../txv.login.js" 
 * @include "./txv.bgadplayer.js" 
 * @include "./../txv.history.js"
 */

// region 定义CONST常量
/**
 * 播放页基本事件定义
 * 
 * @namespace txv.ACTION
 * @type {Object}
 */
txv.ACTION = {
    /**
     * 在执行txv.common.initPage()之前
     * 
     * @type String
     */
    BEFORE_COMM_INIT: "before_comm_init",
    /**
     * DOM准备完毕
     * 
     * @type String
     */
    DOM_READY: "dom_ready",
    /**
     * 播放器显示之前
     * 
     * @type String
     */
    BEFORE_SHOW_PLAYER: "before_show_player",
    /**
     * 播放器显示完毕
     * 
     * @type String
     */
    AFTER_SHOW_PLAYER: "after_show_player",
    /**
     * 播放器正在播放时
     * 
     * @type String
     */
    PLAYIING: "playing",
    /**
     * 播放器播放的视频发生切换
     * 
     * @type String
     */
    PLAY_CHANGE: "play_change",
    /**
     * 播放完毕
     * 
     * @type String
     */
    PLAYEND: "playend",
    /**
     * 页面完毕
     * 
     * @type String
     */
    PAGE_CLOSE: "pageclose",
    /**
     * 登录成功
     * 
     * @type String
     */
    LOG_IN: "login",
    /**
     * 登录失败
     * 
     * @type String
     */
    LOG_OUT: "logout",
    /**
     * 视频链接发生点击
     * 
     * @type String
     */
    VIDEO_CLICK: "video_click",
    /**
     * 开灯
     * 
     * @type String
     */
    LIGHT_ON: "light_on",
    /**
     * 关灯
     * 
     * @type String
     */
    LINGHT_OFF: "light_off",
    /**
     * 异步拉取结束
     */
    AJAX_OVER: "ajax_over",

    /**
     * 切换播放列表可见态
     * 
     * @type String
     */
    TRIGGER_VIDEOLIST: "trigger_videolist",

    /**
     * 切换专辑信息tab
     */
    CHANGE_COVERINFO_TAB: "change_coverinfo_tab",

    /**
     * 切换专辑信息tab个数
     * 
     * @type String
     */
    CHANGE_COVERINFO_TABSIZE: "change_coverinfo_tabsize",

    /**
     * 右侧视频列表滚动
     * 
     * @type String
     */
    VIDEOLIST_SCROLL: "videolist_scroll",

    /**
     * 当前切换播放的视频为v+上传的视频时触发
     * 
     * @type String
     */
    CHANGE_VPP_VIDEO: "change_vpp_video",

    /**
     * 用户滚动页面时触发
     * 
     * @type String
     */
    DOCUMENT_SCROLL: "document_scroll"
};

txv.TPL_TYPE = {
    /**
     * 黑色模板，用于电影电视剧
     * 
     * @default 1
     * @type Number
     */
    BLACK: 1,

    /**
     * 白色模板（右边有列表），用于综艺、新闻、财经、纪录片、单视频
     * 
     * @default 2
     * @type 2
     */
    VARIETY: 2
};

txv.PAGE_TYPE = {
    /**
     * 专辑播放页
     * 
     * @default 1
     * @type Number
     */
    COVER: 1,
    /**
     * 单视频播放页
     * 
     * @default 2
     * @type Number
     */
    VIDEO: 2,
    /**
     * 播客
     * 
     * @type Number
     */
    BOKE: 3,
    /**
     * 播客专辑
     * 
     * @type Number
     */
    BOKECOVER: 4,

    /**
     * 好莱坞付费模板
     * 
     * @type Number
     */
    FILM: 5,

    /**
     * v.qq.com常规的付费电影
     * 
     * @type Number
     */
    V_MOVIE_PAY: 6,

    /**
     * 教育付费
     * 
     * @type Number
     */
    EDU_PAY: 7
};

txv.PAY_STATUS = {
    SINGLE: 4,
    VIP_AND_SINGLE: 5,
    VIP_ONLY: 6,
    PAY_ONLY: 7,
    FREE: 8
}

/**
 * 用户状态
 * 
 * @namespace txv.USER_STATUS
 * @type {Object}
 * @constant
 */
txv.USER_STATUS = {
    /**
     * 未登陆
     * 
     * @constant
     * @type Number
     * @default 0
     */
    NOT_LOGIN: 0,
    /**
     * 仅仅是登录，既不是会员，也不没单片购买，我们潜在的客户啊！
     * 
     * @constant
     * @type Number
     * @default 1
     */
    ONLY_LOGIN: 1,
    /**
     * 不是会员，但单片购买了当前的影片
     * 
     * @type Number
     * @default 2
     * @constant
     */
    SINGLE_PAY: 2,
    /**
     * 会员，没单片购买
     * 
     * @type Number
     * @default 3
     * @constant
     */
    ONLY_VIP: 3,
    /**
     * 会员，并且又单片购买了当前影片，好忠实的用户！
     * 
     * @type Number
     * @default 4
     * @constant
     */
    VIP_AND_PAY: 4
}

// endregion const var defined

txv.playdata = {
        player: null,
        curVideo: null,
        adplayer: null,
        rightSideListObj: null,
        videoATagList: null,
        fragATagList: null,
        isVip: false,
        qqvip: null, //qq会员信息，null,没有查询过身份，0：非会员，1：vip,2:svip
        isBuy: false
    }
    /**
     * 腾讯视频播放页基类
     * 
     * @class txv.BasePlayPage
     */
txv.BasePlayPage = function() {

    // region 私有变量定义
    var $me = this,
        actions = {},
        isPlayerMax = false,
        // actions事件对象集合
        defaultVid = "",
        // 默认的视频vid
        defaultVidList = "",
        // 默认是视频播放列表
        $videoLiTagList = null,
        // 视频li列表对象
        $videoListContainer = null,
        // 视频列表容器div
        popStateCnt = 0,
        // window.onpopstate事件激发的次数
        initedComment = false,
        // 是否已初始化评论，当页面传入的vid不在视频列表时不初始化
        // 是否点击了loading广告中的预定，点击了拉起登录框（登录后如果是vip）需要等待预定结果刷新页面，如果不是直接刷页面
        isNeedRefresh = true,
        // 是否为开发调试模式
        isDebug = $j.util.getUrlParam("debug") == "true",
        // 是否隐藏右侧播放列表
        isHideVlist = false,
        // 事件注册对象
        actionRegisterObj = {},
        ocxNosample = false,
        // 保存那些先执行了runActions后执行actActions的方法队列
        readyToRunActionObj = {};

    for (var p in txv.ACTION) {
        actions[txv.ACTION[p]] = [];
    }

    this.playertype = "auto";
    this.isOcxErr = false;
    /**
     * 是否是Mac下的Firefox
     */
    this.isMacFirefox = function() {
        return Live.userAgent.macs && Live.userAgent.firefox;
    }

    // endregion 私有变量定义
    this.resetScroll = function(value, doc) {
            var _doc = doc || document;
            _doc[_doc.compatMode == "CSS1Compat" && !Live.userAgent.webkit ? "documentElement" : "body"].scrollTop = value;
        }
        // region 公共属性定义
        /**
         * 播放器容器id
         * 
         * @type {String}
         * @default mod_player
         * @property
         */
    this.playerModId = "mod_player";
    /**
     * 视频列表容器id
     * 
     * @property
     * @default mod_videolist
     * @type {String}
     */
    this.videoListModId = "mod_videolist";
    /**
     * 背投广告容器id
     * 
     * @property
     * @default adPlayer
     * @type {String}
     */
    this.adPlayerModId = "adPlayer";

    /**
     * 播放器信息
     * 
     * @type {object}
     * @property
     */
    this.playerInfo = {
        width: "980px",
        height: "472px"
    }

    // endregion 公共属性定义

    // region public方法定义

    // region 视频列表相关的
    /**
     * 获取视频列表容器的$e查询结果对象
     * 
     * @public
     */
    this.getVideoListContainer = function() {
        if (!!$videoListContainer) {
            return $videoListContainer;
        }
        $videoListContainer = $e("#" + this.videoListModId);
        return $videoListContainer;
    }

    /**
     * 获取视频列表a标签的selector
     */
    this.getVideoListATagSelector = function() {
        return "li a[id]";
    };

    /**
     * 获取视频列表的$e查询结果对象
     */
    this.getVideoATagList = function() {
        if (!!txv.playdata.videoATagList) {
            return txv.playdata.videoATagList;
        }
        txv.playdata.videoATagList = this.getVideoListContainer().find(this.getVideoListATagSelector());
        return txv.playdata.videoATagList;
    };

    /**
     * 获取视频li列表
     * 
     * @public
     */
    this.getVideoLiTagList = function() {
        if (!!$videoLiTagList) {
            return $videoLiTagList;
        }
        $videoLiTagList = this.getVideoListContainer().find("li");
        return $videoLiTagList;
    }

    /**
     * 获取指定的vid在视频列表里的索引编号
     * 
     * @public
     */
    this.getVidIndex = function(vid) {
            // vid传入不正确，但是当前视频对象已经创建了，就从当前对象中获取
            if (!vid && txv.playdata.curVideo instanceof tvp.VideoInfo) {
                vid = txv.playdata.curVideo.getFullVid();
            }
            // 这样都找不到，那就直接说没有，这个真没有
            if (!vid) {
                return -1;
            }
            var $el = $e("#" + vid);
            return this.getVideoATagList().index($el);
        }
        /**
         * 获取视频列表内的视频数量
         * 
         * @public
         */
    this.getVideoATagListSize = function() {
        return this.getVideoATagList().size();
    }

    /**
     * 获取指定的vid是否是最后一个视频
     */
    this.isLastVid = function(vid) {
        return this.getVidIndex(vid) == this.getVideoATagList().size() - 1;
    }

    /**
     * 绑定视频列表点击
     */
    this.bindVideoListClick = function() {
        var $container = this.getVideoListContainer();
        if (COVER_INFO.typeid == 2) {
            $container = $("#fullplaylist");
        }
        var $self = this;
        var timer = null;
        $container.delegate("a", "click", function(evt) {
            if (!txv.playdata.player || !txv.playdata.curVideo)
                return;
            // 如果不支持无刷新切换URL，就需要浏览器刷页面了，后面的就不需要执行了
            if (!$self.isCanPushState()) {
                return;
            }
            var $el = $e(this);
            if ($el.data("season") == "1") {
                return;
            }
            Live.event.preventDefault(evt);
            var self = this;
            if (timer == null) {
                timer = setTimeout(function(evt) {
                    // 点击的是侧边栏列表的图片，需要重新找到对应的<a>
                    if (!self.getAttribute("id")) {
                        $el = $el.parents("li").find("a[id]");
                    }
                    $self.runActions(txv.ACTION.VIDEO_CLICK, $el, evt);
                    timer = null;
                }, 300);
            }
        });
    }

    /**
     * 根据视频vid获取视频信息
     * 
     * @public
     */
    this.getVideoInfoByVid = function(videoinfo, $el, finish_function) {
        if (!videoinfo instanceof tvp.VideoInfo)
            return;
        if (typeof $el == "string") {
            $el = $me.getElByVid($el);
        }

        videoinfo.setVid($el.attr("sv") || $el.attr("id") || videoinfo.getVidList() || "");
        videoinfo.setDuration($el.attr("tl") || videoinfo.getDuration() || "");
        if (videoinfo.getIdx() > 0) {
            videoinfo.setTagStart($el.attr("bt") || videoinfo.getTagStart() || 0);
            videoinfo.setTagEnd(parseInt(videoinfo.getTagStart()) + parseInt(videoinfo.getDuration()));
        } else {
            if (VIDEO_INFO.vid == videoinfo.getVid()) { // 当前视频对象的vid跟传入的一致才从VIDEO_INFO中获取基本信息
                videoinfo.setPrefix(VIDEO_INFO.piantou || $el.attr("pt") || videoinfo.getPrefix() || 0);
                videoinfo.setTail(VIDEO_INFO.pianwei || $el.attr("pw") || videoinfo.getTail() || 0);
                if (VIDEO_INFO.danmu == 1 || ($j.isFunction(videoinfo.getBullet) && videoinfo.getBullet() == 1)) {
                    videoinfo.setBullet(true);
                }
            } else {
                videoinfo.setPrefix($el.attr("pt") || videoinfo.getPrefix() || 0);
                videoinfo.setTail($el.attr("pw") || videoinfo.getTail() || 0);
            }

            var url = 'http://data.video.qq.com/fcgi-bin/data?tid=252&appid=20001059&otype=json&appkey=c8094537f5337021&idlist=' + videoinfo.getVid();
            $j.ajax({
                "url": url,
                "dataType": "jsonp"
            }).done(function(json) {
                if (json && json.errorno == 0 && json.results && json.results.length > 0 && json.results[0].fields) {
                    if (json.results[0].fields.danmu == 1 && $j.isFunction(videoinfo.setBullet)) {
                        videoinfo.setBullet(true);
                    }
                }
                finish_function && finish_function(json.results[0].fields.danmu);
            });


        }
        if (typeof videoinfo.setCDNType == "function") {
            videoinfo.setCDNType($el.attr("cdntype") || videoinfo.getCDNType() || 0);
        }
        videoinfo.setTitle($el.attr("data-title") || $el.attr("title") || $el.text() || "");
        // 设置付费标志
        if (PAY_INFO.isreal || $el.attr("ispay") == "1") {
            videoinfo.setPay(1);
        }
        if (!!COVER_INFO && !!COVER_INFO.id && this.getPlayerType() != "ocx" && !PLAYER_INFO.useDRM) {
            videoinfo.setCoverId(COVER_INFO.id);
        }
    }

    // endregion 视频列表相关的

    /**
     * 从URL中获取vid
     */
    this.getVidFromUrl = function(url) {
            url = url || window.location.toString();
            var vid = $j.util.getUrlParam("vid", url),
                r;
            if (!vid) { // 使用新规则生成的专辑单视频页面
                if (r = url.match(/\/\w{15}\/(\w+)\.html/)) {
                    vid = r[1];
                }
            }
            return encodeURIComponent(vid);
        },
        /**
         * 获取页面加载时默认传递进来的vid，这个vid不会随着播放切换的改变而改变<br/>
         * 如果要获取当前实时播放器的视频vid信息可以访问txv.playdata.curVideo;
         * 
         * @public
         */
        this.getDefaultVidList = function() {
            if (!defaultVidList) {
                var url = $me.getCurUrl();
                var vidlist = this.getVidFromUrl();
                if (!vidlist) { // 从url的vid参数中没有获取到vid，那么可能压根就根本没有传递
                    if (!!VIDEO_INFO) { // 页面有声明当前的视频信息
                        vidlist = VIDEO_INFO.sv || VIDEO_INFO.vid;
                    } else { // 压根就没有传递vid，并且页面也没声明当前视频信息，从列表获取第一个视频
                        var firstEl = this.getVideoATagList().eq(0);
                        if (firstEl.size() == 1) {
                            vidlist = firstEl.attr("sv") || firstEl.attr("id") || "";
                        }
                    }
                }
                defaultVidList = vidlist;
            }
            return defaultVidList;
        };

    /**
     * 获取默认的视频vid
     * 
     * @public
     */
    this.getDefaultVid = function() {
        if (!defaultVid) {
            var vidlist = this.getDefaultVidList();
            defaultVid = vidlist.split("|")[0];
        }
        return defaultVid;
    }

    /**
     * 是否使用HTML5播放器
     */
    this.isUseHTML5 = function() {
        if (!!tvp && tvp.common && typeof tvp.common.isUseHtml5 == "function") {
            return tvp.common.isUseHtml5();
        }
        return $j.util.useHtml5();
    };

    /**
     * 检测当前播放的专辑是不是综艺的专辑
     * 
     * @param {String}
     *          typeId 专辑类别ID return Boolean
     */
    this.isVarCover = function(typeId) {
        var iRet = $j.inArray(typeId, [10, 14, 20]);
        return iRet == -1 ? false : true;
    };

    /**
     * 显示播放器
     * 
     * @public
     */
    this.showPlayer = function(isForce) {
        if (typeof isForce == "undefined") {
            isForce = false;
        }
        // 教育付费视频HTML5提示不支持
        if ($j.util.useHtml5() && PAY_INFO.ispay && PAY_INFO.isreal && PAY_INFO.productType == 3) {
            this.showHtml5CannotPay();
            return;
        }
        if (!isForce && !!txv.playdata.player) {
            return;
        }
        txv.playdata.player = new tvp.Player();
        txv.playdata.player.setting("width", parseInt(this.playerInfo.width));
        txv.playdata.player.setting("height", parseInt(this.playerInfo.height));
        txv.playdata.player.setting("playerType", this.getPlayerType());
        if (this.getPlayerType() == "ocx") {
            $('.player_tips_wrap').css('display', 'none');
        }
        if (!this.isPlayWithHistory()) {
            txv.playdata.curVideo.setHistoryStart(0);
        }
        this.addPlayerCommonParam(txv.playdata.player);
        txv.playdata.player.setCurVideo(txv.playdata.curVideo);
        txv.playdata.player.output(this.playerModId);
    }

    /**
     * 获取当前应该用什么播放器
     */
    this.getPlayerType = function() {
        if ($j.util.useHtml5()) {
            return "html5";
        }
        return this.playertype;
    }

    /**
     * 添加一个处理行为
     * 
     * @param {String}
     *          事件名
     * @param {Function}
     *          事件回调
     * @param {Boolean}
     *          是否只执行一次
     * @public
     */
    this.addAction = function(actionName, fn, callOnce) {
        var $self = this,
            fnName = "on";
        if ($j.isFunction(fn)) {
            actionRegisterObj[name] = true;
            if (!callOnce && $j.isArray(readyToRunActionObj[actionName])) {
                $j.each(readyToRunActionObj[actionName], function(idx, args) {
                    if ($j.isArray(args)) {
                        fn.apply($self, args);
                    }
                });
                delete readyToRunActionObj[actionName];
            }
            fnName = callOnce ? "one" : "on";
            Live.actionManager[fnName](actionName, function() {
                var args = Array.prototype.slice.call(arguments, 0);
                if (isDebug) {
                    fn.apply($self, args);
                } else {
                    try {
                        fn.apply($self, args);
                    } catch (err) {
                        var msg = "RunActionError";
                        if (typeof err != "undefined" && typeof err.message != "undefined") {
                            msg += ":" + err.message;
                            txv.log("[play page error] : " + err.message);
                        }
                        if (typeof jserrorlog != "undefined") {
                            var stack = jserrorlog.getStack(err);
                            jserrorlog.report(msg, "http://qzs.qq.com/tencentvideo_v1/js/txv.basepage.js", stack);
                        }

                    }
                }
            });
        }
    }

    /**
     * 将处理行为强制添加到最前面
     */
    this.unshiftAction = function(actionName, fn) {
        if (typeof fn == "function") {
            actions[actionName].unshift(fn);
        }
    }

    /**
     * 运行处理行为
     */
    this.runActions = function(name) {
        var self = this;
        var args = Array.prototype.slice.call(arguments, 1);
        if (!actionRegisterObj[name]) {
            readyToRunActionObj[name] = $j.isArray(readyToRunActionObj[name]) ? readyToRunActionObj[name] : [];
            readyToRunActionObj[name].push(args);
        }
        if ($j.isArray(actions[name])) {
            for (var i = 0; i < actions[name].length; i++) {
                if (typeof actions[name][i] == "function") {
                    if (isDebug) {
                        actions[name][i].apply(self, args);
                    } else {
                        try {
                            actions[name][i].apply(self, args);
                        } catch (err) {
                            if (typeof err != "undefined" && typeof err.message != "undefined") {
                                txv.log("[play page error] : " + err.message);
                                Live.tj2.hot(err.message);
                            }
                            if (typeof jserrorlog != "undefined") {
                                var stack = jserrorlog.getStack(err);
                                jserrorlog.report("RunActionError", "http://qzs.qq.com/tencentvideo_v1/js/txv.play2013.min.js", stack);
                            }
                        }
                    }
                }
            }
        }
        Live.actionManager.trigger(name, args);
    };

    /**
     * 初始化视频对象
     * 
     * @public
     */
    this.initVideoInfo = function() {
        var vid = this.getDefaultVid();
        var $self = this;
        txv.playdata.curVideo = new tvp.VideoInfo();
        txv.playdata.curVideo.setVid(this.getDefaultVidList());
        if (!!VIDEO_INFO && VIDEO_INFO.vid == txv.playdata.curVideo.getFullVid()) {
            txv.playdata.curVideo.setTitle(VIDEO_INFO.title);
            if (!!VIDEO_INFO.duration) {
                txv.playdata.curVideo.setDuration(VIDEO_INFO.duration);
                txv.playdata.curVideo.setPrefix(VIDEO_INFO.piantou);
                txv.playdata.curVideo.setTail(VIDEO_INFO.pianwei);
            }
        }
        if (VIDEO_INFO.danmu == 1 || ($j.isFunction(txv.playdata.curVideo.getBullet) && txv.playdata.curVideo.getBullet() == 1)) {
            txv.playdata.curVideo.setBullet(true);
        }
        var $el = this.getElByVid(vid);
        if ($el.size() > 0) {
            this.getVideoInfoByVid(txv.playdata.curVideo, $el/*, function(danmun) {
                $self.setPlayerBulletStatus(danmun);
            }*/);
        }

        // 历史观看开始观看点
        if (typeof txv.playdata.curVideo.setHistoryStart == "function") {
            var historyStart = $j.util.getUrlParam("start");
            if (!!historyStart && !isNaN(historyStart) && historyStart > 0) {
                txv.playdata.curVideo.setHistoryStart(historyStart);
            }
        }

        // 外部回链带来的开始观看点
        if (typeof txv.playdata.curVideo.setTstart == "function") {
            var tStart = $j.util.getUrlParam("tstart");
            if (!!tStart && !isNaN(tStart) && tStart > 0) {
                txv.playdata.curVideo.setTstart(tStart);
            }
        }

        if (PAY_INFO.isreal) {
            txv.playdata.curVideo.setPay(1);
            if (PLAYER_INFO.useDRM) {
                txv.playdata.curVideo.setCoverId(COVER_INFO.id);
            }
        }
    }

    // region 播放器控制相关

    /**
     * 切换播放器的正在播放的视频
     * 
     * @public
     * @param {jQuery.fn.init}
     *          视频链接对象
     * @param {Event}
     *          事件对象
     * @param {Number}
     *          观看时间
     */
    this.changePlayerVideo = function($el, evt, time) {
        var $self = this;
        if (!$el || !$j.isFunction($el.size) || $el.size() == 0 || !txv.playdata.player || !txv.playdata.curVideo)
            return;
        // 如果不支持无刷新切换URL或者flash播放器没有ready好，就需要浏览器刷页面了，后面的就不需要执行了
        if (!this.isCanPushState()) {
            return;
        }
        if (!this.isFlashPlayerReady()) {
            Live.tj2.button("playpage.flashnoready");
            return;
        }
        time = time > 0 ? time : 0;
        this.pushStateByEl(null, $el);
        txv.playdata.curVideo.clear();
        this.getVideoInfoByVid(txv.playdata.curVideo, $el, function(danmun) {
            $self.setPlayerBulletStatus(danmun);
        });

        if (time > 0) {
            txv.playdata.curVideo.setHistoryStart(time);
        }

        //txv.playdata.player.play(txv.playdata.curVideo);

        if (this.isChangeVideoNeedReportOz()) {
            // 打开页面报oz,联播也得报
            $me.reportToOz({
                cmd: 1000,
                ctype: 1,
                vid: COVER_INFO.id,
                host: document.location.host
            });
        }
        // 停止默认的url链接跳转
        Live.event.preventDefault(evt);
    }

    /**
     * 检测flash播放器是否ready
     * 
     * @return Boolean
     */
    this.isFlashPlayerReady = function() {
        if (txv.playdata.player && $j.isFunction(txv.playdata.player.getPlayerType) && txv.playdata.player.getPlayerType() == "flash") {
            var flashobj = txv.playdata.player.getPlayer();
            if (flashobj && flashobj.loadAndPlayVideoV2 && typeof flashobj.loadAndPlayVideoV2 != "string") {
                return true;
            }
        } else { // 当前不是使用flash播放器，返回true
            return true;
        }
        return false;
    }

    /**
     * 在切换视频时是否要上报oz
     * 
     * @return Boolean
     */
    this.isChangeVideoNeedReportOz = function() {
        return true;
    }

    /**
     * 播放器是否需要显示“下一个”按钮
     */
    this.isPlayerShowNext = function() {
        return true;
    }

    /**
     * 是否显示播放器广告
     */
    this.isShowPlayerAD = function() {
        if (!!txv.playdata.isVip) {
            return "0";
        }
        return "1";
    }

    /**
     * 获取特殊的swf地址
     */
    this.getSpecialSwfUrl = function() {
            if (typeof COVER_EX_INFO != "undefined") {
                return COVER_EX_INFO.swfUrl;
            }
            return "";
        }
        /**
         * 为播放器增加统一的参数
         * 
         * @public
         */
    this.addPlayerCommonParam = function(player) {
        if (!player instanceof tvp.Player)
            return;
        var adOrderId = $j.util.getUrlParam("oid"),
            specialSwfUrl = this.getSpecialSwfUrl();
        if (COVER_INFO.sourceid == 3) { // CNTV的要用自己的播放器
            player.setting("vodFlashUrl", "http://static.video.qq.com/TPcntv.swf");
        } else if (specialSwfUrl) {
            player.setting("vodFlashUrl", specialSwfUrl);
        } else {
            player.setting("vodFlashType", "TencentPlayer"); // 还是腾讯视频专属的播放器最NB
        }
        if (PAGE_INFO.pageType != txv.PAGE_TYPE.FILM) { //付费暂时先不用自定义UI
            player.setting("isHtml5UseUI", true);
            player.setting("isHtml5UseFakeFullScreen", false);
            player.setting("HTML5CSSName", "player.css"); // 腾讯视频肯定需要自动播放
            if (parseInt(this.playerInfo.width) >= 960) {
                player.setting("iPadPromotionText", "安装腾讯视频iPad客户端 更高清更流畅 >>");
            }
        }
        player.setting("autoplay", "1"); // 腾讯视频肯定需要自动播放
        player.setting("isVodFlashShowNextBtn", this.isPlayerShowNext() ? 1 : 0);
        player.setting("appid", "10002"); //腾讯视频web专用appId


        // 外部是否有传入广告订单id
        if (adOrderId.length > 0) {
            player.setting("oid", adOrderId);
        }
        // 专辑需要告知类别id
        var typeid = COVER_INFO.typeid || VIDEO_INFO.typeid || 0;
        if (!!typeid) {
            player.setting("typeId", typeid);
        }
        if (COVER_INFO && COVER_INFO.id) {
            player.setting("coverId", COVER_INFO.id);
        }
        var wmode = $j.util.getUrlParam("wmode") || "direct";
        if (!!wmode) {
            player.setting("flashWmode", wmode);
        }

        var extVars = {};
        var ptag = Live.cookie.get("ptag");
        if (!!ptag) {
            extVars["ptag"] = ptag;
        }
        extVars["outhost"] = $me.getCurUrl();
        if (!!PAY_INFO.isreal) {
            player.setting("share", 0);
            extVars["popup"] = "0";
        }
        var refer = document.referrer;
        if (!!refer) {
            extVars["refer"] = refer;
        }

        if (this.isClientportal()) { // 如果当前是在客户端播放
            if (Live.userAgent.webkit) {
                extVars["playertype"] = 10;
            }
            // if (tvp.version.getFlashMain() > 11) {
            // player.addParam("swfurl",
            // "http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?_=" +
            // (new Date()).getTime());
            // }
        }
        var isBlueClarity = $.util.getUrlParam("clarity") == 1080;
        if (isBlueClarity) {
            extVars["fmt"] = "fhd";
        }

        // 这里不能直接用$me，因为$me是指代当前的基类，而不是真正的实例
        var $self = this;

        player.ongetnext = function(vid) {
            if ($j.util.getUrlParam('show_mask') == 1) {
                return undefined;
            }
            return $self.getNextVideo(vid);
        }

        player.onplaying = function(vid) {
            $self.runActions(txv.ACTION.PLAYIING, vid);
        }

        player.onchange = function(vid) {

            $self.runActions(txv.ACTION.PLAY_CHANGE, vid);
        }

        player.onfullscreen = function(isMax) {
            isPlayerMax = isMax;
        }

        player.onflashpopup = function() {
            $self.onFlashPlayerPopUp();
        }

        player.ongetnextenable = function(vid) {
            if ($j.util.getUrlParam('show_mask') == 1) {
                return false;
            }
            return !$self.isCurVideoIsLast(vid);
        }

        player.onended = function() {
            if ($j.util.getUrlParam('show_mask') == 1) {
                __tenplay_showPayTips();
                return;
            }
            $self.runActions(txv.ACTION.PLAYEND);
        }

        // 全部播放完毕
        player.onallended = function() {
            $self.onPlayerAllEnd();
        }

        player.setting("showError", function() {});

        // 出错
        player.onerror = function(errcode) {
            if (typeof errcode == "undefined")
                return;
            if (player.getPlayerType() == "html5") {
                if (errcode == 80) {
                    $self.showHTML5IPLimit();
                    return;
                }
                $self.showHtml5CannotPay('<h2>抱歉Yoyo，获取视频信息失败，请点击<a href="javascript: window.location.reload(false);">此处</a>重试</h2>', true);
            }
        }

        //打入测速点，播放器加载
        player.onwrite = function() {
                try {
                    if ($self.isOcxErr) {
                        stats.speed.setFlag({
                            "8": logger.elapsed('init player')
                        }).report();
                    } else {
                        var pt = $self.playertype;
                        if (typeof txv.playdata.player.getPlayerType == "function") {
                            pt = txv.playdata.player.getPlayerType() || $self.playertype;
                        }
                        pt == "ocx" && (ocxNosample = true)
                            // OCX比例太低就全部取样，flash数量太多，取样10%
                        if (ocxNosample || REPORT.sample) {
                            stats.speed.setFlag({
                                "5": logger.elapsed('init player')
                            }).report();
                        }
                    }
                } catch (err) {}
            }
            // 当播放器初始化完毕时，flash播放器在swf文件加载完毕触发，html5播放器在视频载入完毕触发
        player.oninited = function() {
            try {
                if ($self.isOcxErr) {
                    stats.speed.setFlag({
                        "9": logger.elapsed('init player')
                    }).report();
                } else {
                    // OCX比例太低就全部取样，flash数量太多，取样10%
                    if (ocxNosample || REPORT.sample) {
                        stats.speed.setFlag({
                            "6": logger.elapsed('init player')
                        }).report();
                    }
                }
            } catch (err) {}
        }

        this.attachMorePlayerEvt(player);

    };
    /**
     * 增加更多的播放器事件监听
     * 
     * @public
     * @function
     */
    this.attachMorePlayerEvt = Live.emptyFn;

    /**
     * 所有的视频都播放完毕
     */
    this.onPlayerAllEnd = function() {
        try {
            this.setNeedRefresh(false);
            var playerobj = txv.playdata.player.getPlayer();
            if (!!playerobj) {
                playerobj.setLightStatus(false);
            }
            _qqplayer_lightup(true);
        } catch (e) {

        }
    };

    /**
     * 当flash播放器点击小窗口按钮的时候
     */
    this.onFlashPlayerPopUp = function() {
        if (!txv.popwin.pop || txv.popwin.pop.closed) {
            if (!txv.popwin.flashobj) {
                txv.popwin.flashobj = txv.playdata.player.getPlayer();
                txv.popwin.flashvars = txv.playdata.player.getFlashVar().replace(/&history=[\d]+/g, '') + "&rightpanel=0";
            }
            var pt = 0;
            if (!!txv.popwin.flashobj.getPlaytime) {
                pt = parseInt(txv.popwin.flashobj.getPlaytime());
            }
            var url = "http://v.qq.com/popup/popwin.html?pt=" + pt;
            var wid = "popoWin_" + txv.playdata.curVideo.getFullVid();
            txv.popwin.pop = window.open(url, wid, "height=488,width=650,resizable=yes,toolbar=no,menubar=no,scrollbars=no,location=no,status=no");
            if (txv.popwin.pop) {
                txv.popwin.timer = setInterval(txv.popwin.checkTime, txv.popwin.checkInterval);
            }
        } else {
            txv.popwin.pop.focus();
        }
    }

    // endregion 播放器控制相关
    /**
     * 获取下一个视频对象
     * 
     * @public
     */
    this.getNextVideo = function() {
        var $nextEl = this.getNextVideoEl();
        var $self = this;
        if (!$nextEl || $nextEl.size() == 0)
            return null;
        var url = this.getPlayUrlByEl($nextEl);
        if (this.isCanPushState()) {
            this.pushStateByEl(url, $nextEl);
        } else if (!this.isMaxPlayer()) {
            document.location.href = url;
            return null;
        }

        txv.playdata.curVideo.clear();
        this.getVideoInfoByVid(txv.playdata.curVideo, $nextEl, function(danmun) {
            $self.setPlayerBulletStatus(danmun);
        });

        return txv.playdata.curVideo;
    }

    this.getNextVideoEl = function() {
        var vid = txv.playdata.curVideo.getFullVid();
        if (!vid)
            return null;
        //有精彩片段
        if ($("#" + vid).parents("div")[0].id === "cliplist") {
            var clips = $("#cliplist").find("a[id]");
            if (clips.size() < 2) return null;
            var curIdx = clips.index($("#" + vid)),
                $nextEl;
            if (curIdx == clips.size() - 1) {
                return null;
            } else {
                $nextEl = clips.eq(curIdx + 1);
            }
            return $nextEl.size() ? $nextEl : null;
        } else {
            //修改片段列表下一集处理逻辑
            var curIdx = this.getVidIndex(vid);
            var $nextEl;
            // 视频列表最后一个
            if (curIdx == this.getVideoATagListSize() - 1) {
                return null;
            } else {
                $nextEl = this.getVideoATagList().eq(curIdx + 1);
            }
            return $nextEl.size() ? $nextEl : null;
        }
    }
    this.initPushState = function() {
        var $self = this;
        window.onpopstate = function(event) {
            // 为什么要避免第0次，因为这个事件在窗口刚打开的时候也会激发一次，而这一次不需要运行该事件的
            if (!!event && popStateCnt++ > 0) {
                $self.onpopstate("", $me.getCurUrl());
            }
        };
    }

    /**
     * 当前浏览器是否支持不刷新页面就能切换URL
     */
    this.isCanPushState = function() {
        return typeof history.pushState == "function";
    };

    /**
     * 
     */
    this.pushUrl = function(name, url) {
        if (!this.isCanPushState())
            return;
        var curUrl = $me.getCurUrl();
        history.pushState({
            "title": name || document.title,
            "link": url || curUrl.replace("http://v.qq.com", "")
        }, "", url);
        // 无刷新也要报PV，不然亏大了
        this.reportPV();
    }

    /**
     * 当url切换引发的popstate
     */
    this.onpopstate = function(name, url) {
        var vid = this.getVidFromUrl(url);
        if (!vid) {
            vid = this.getDefaultVid();
        }
        var $el = this.getElByVid(vid);
        if ($el.size() == 0) {
            this.popstatecb(vid);
        }
        this.changePlayerVideo($el);
    }
    this.popstatecb = function(vid) {

        }
        /**
         * 根据传入的$el获取对应的播放url
         */
    this.getPlayUrlByEl = function($el) {
        var url = "",
            curUrl = $me.getCurUrl();

        // 是超链接，并且url是真真实实的一个链接地址，就用链接地址
        if ($el.attr("tagName") == "A") {
            url = $el.attr("href");
            if (url.indexOf("javascript:") < 0) {
                return url.replace("http://v.qq.com", "");
            }
        }
        var fold = (!!COVER_INFO.isPrev) ? "/prev" : "/cover";
        if (curUrl.indexOf("_v2/") > 0) {
            fold = fold + "_v2";
        }
        fold = fold + "/";
        var nextvid = $el.attr("id") || $el.attr("vid") || $el.attr("sv");
        if (!!PAGE_INFO.isVideoPage) {
            url = [fold, COVER_INFO.id.charAt(0), "/", COVER_INFO.id, "/", nextvid, ".html"].join("");;
        } else {
            url = [fold, COVER_INFO.id.charAt(0), "/", COVER_INFO.id, ".html?vid=", nextvid].join("");;
        }
        return url;
    }

    /**
     * 根据传入$el加入导航的pushState
     */
    this.pushStateByEl = function(url, $el) {
        if (!this.isNeedPushState()) {
            return;
        }
        url = url || this.getPlayUrlByEl($el);
        this.pushUrl($el.attr("title") || $el.text(), url);
    };

    /**
     * 是否需要pushstate，播客专辑不切换url
     */
    this.isNeedPushState = function() {
        return true;
    };
    /**
     * 当前视频是否是最后一个视频
     */
    this.isCurVideoIsLast = function(curid) {
        curid = curid || txv.playdata.curVideo.getFullVid();
        if (!curid)
            return true;

        var $nextEl = this.getNextVideoEl();
        if (!$nextEl || $nextEl.size() == 0) {
            return true;
        } else {
            return false;
        }
    };

    /**
     * 注册flash一些接口
     */
    this.registFlashMethod = function() {
        var $self = this;

        if ($j.util.useHtml5() || /android/i.test(navigator.userAgent)) {
            return;
        }

        window.__tenplayer_getcoverid = function() {
            return COVER_INFO.id;
        }

        window.__tenplayer_getUin = function() {
                return txv.login.getUin();
            }
            /**
             * 注册全局登录窗口回调方法供flash“分享”逻辑调用
             * 
             * @param {String}
             *          type
             */
        window.__flashplayer_openLogin = function(type) {
            type = type || "";
            txv.login.openLogin({
                "success": function() {
                    var flashobj = txv.playdata.player.getPlayer();
                    flashobj.loginCallback(type);
                }
            });
        }

        window.__flashplayer_islastvideo = function() {
            return $self.isCurVideoIsLast();
        };

        // 为了解决播放器不能区分非播放页外调用__flashplayer_islastvideo时默认值跟方法不存在时的返回值相同的问题
        window.__flashplayer_continueToPlay = function() {
            return !$self.isCurVideoIsLast();
        }


        /**
         * 视频播放器停止loading时调用的JS全局方法，在两个播放器之间透传json，开始播放广告
         * 
         * @param {Object}
         *          json
         */
        window.__adldstop = function(json) {
            txv.log("flash call __adldstop");
            $self.onLoadingADEnd(json);
        }

        /**
         * flash播放器调用页面播放接口进行切换视频播放
         * 
         * @param {String}
         *          vid 视频id
         * @param {Number}
         *          观看时间
         */
        window._tenplay_historyplay = function(vid, time) {
            if (typeof vid == "string" && vid.length > 0 && !isNaN(time)) {
                var $el = $j("#" + vid);
                if ($el.size() == 1) {
                    if (!$self.isCanPushState()) {
                        var url = $el.prop("href");
                        url = $self.addUrlParam({
                            start: time
                        }, url);
                        if (url.indexOf("http://") == -1) {
                            url = txv.common.getFullUrlPath(url);
                        }
                        window.location.href = url;
                    }
                    $self.changePlayerVideo($el, null, time);
                }
            }
        }

        /**
         * 处理遨游加速问题
         * @return {[type]} [description]
         */
        window.__tenplayer_fpSpeedup = function() {
            var str = (new Date()).getTime() + Math.random();
            if (typeof localStorage != "undefined" && $j.isFunction(localStorage.setItem)) {
                localStorage.setItem("mx_forbidden_v2", str);
                $self.reportToTDB({
                    url: document.URL,
                    val: 1,
                    cmd: 3538,
                    str1: navigator.userAgent,
                    str2: str
                });
            }
        }
    }

    this.registGlobalfun = function() {
        /**
         * 返回当前用户是否是会员等信息，
         *  0 未登录 
         *  1 登录的普通用户
         *  2 登录的好莱坞会员
         *  3 （被其他业务占用）
         *  4 登录的qq会员
         *  5 登录的超级会员
         *  90 登录的普通用户+登录的qq会员+登录的超级会员
         */
        window.__tenplay_getuinfo = function() {
            if (!txv.login.isLogin())
                return 0;
            var info = 1;
            if (txv.playdata.isVip) {
                return 2;
            }

            if (txv.playdata.qqvip !== null) { //查过会员信息了
                if (txv.playdata.qqvip) { //qqvip的值有1,2
                    return txv.playdata.qqvip + 3;
                } else { //什么会员都不是
                    return 1;
                }
            } else { //没查过qq会员的，返回灰度值90
                return 90;
            }
        }
    }

    this.onLoadingADEnd = function(json) {
        // this.renderBGAD(json);
    }

    // region DOM操作的放在这里

    /**
     * 根据当前id获取$e对象
     * 
     * @public
     */
    this.getElByVid = function(vid) {
        return $e("#" + vid);
    }

    /**
     * 设置描述“更多”链接点击展开收起
     * 
     * @public
     */
    this.initDescMoreLink = function() {
        var $modDesc = $e("#mod_desc");
        $e("#lk_desc").bind("click", function() {
            $modDesc.toggleClass("open")
        });
    }

    /**
     * 变更面包屑标题
     * 
     * @public
     */
    this.changeBreadTitle = function(txt) {
        var $title = $e("#h1_title");
        $title.text("" + txt);
        $title.attr("title", txt);
        // $title.css("visibility", "visible");
    }

    /**
     * 生成准备显示给浏览器标题栏的title文案
     */
    this.buildWinTitleStr = function(txt1, txt2) {
        if (!txt1)
            return "";
        return txt1 + (!!txt2 ? (" " + txt2) : "") + " - 高清在线观看 - 腾讯视频";
    };

    /**
     * 根据vid改变网页和面包屑标题
     * 
     * @public
     */
    this.changeTitleByVid = function(vid) {
            if (!vid) {
                return;
            }
            var $el = this.getElByVid(vid);
            var text = $el.attr("data-title") || $el.attr("title") || $el.text() || $e("#h1_title").text() || COVER_INFO.title || VIDEO_INFO.title || "";
            if (text) {
                if (+text) {
                    text = COVER_INFO.title + " 第" + text + "集";
                }
                //else{
                //  if(text.indexOf("预告") > -1){
                //      text = COVER_INFO.title + " 第" + text;
                //  }
                //}
                this.changeBreadTitle(text)
                document.title = this.buildWinTitleStr(text);
            } else {
                $e("#h1_title").css("visibility", "visible");
            }
        }
        /**
         * 设置当前视频选中态
         * 
         * @param {String}
         *          视频id
         */
    function setVideoElSelected(vid) {
        vid = vid || txv.playdata.curVideo.getFullVid();
        if ($j.isFunction($self.setVideoElSelected)) {
            $self.setVideoElSelected(vid);
            return;
        }
        var $modContainer = $self.getVideoListContainer();
        $modContainer.find("li.current").removeClass("current");
        $modContainer.find("#" + vid).parent().addClass("current");
    }

    /**
     * 获取当前的标题
     * 
     * @public
     */
    this.getCurTitle = function() {
        return $e("#h1_title").text();
    };

    /**
     * 当页面载入时默认展示的第一个视频标题
     */
    this.setTitleOnPageLoad = function() {
        var vid = this.getDefaultVid();
        this.changeTitleByVid(vid);
    }

    /**
     * 显示HTML5不支持付费
     */
    this.showHtml5CannotPay = function(msg, isclean) {
        if (typeof isclean == "undefined") {
            isclean = false;
        }
        var container = getElementById(this.playerModId);
        if (!container)
            return;
        msg = msg || '您暂时无法在当前的移动设备中观看付费影片<br />请您访问腾讯视频PC端进行观看';
        msg = msg.replace(/<br\/>/g, '</p><p class="txt">').replace(/<br \/>/g, '</p><p class="txt">');
        var str = '';
        str += '   <div class="pop_drm_con">';
        str += '        <p class="txt">' + msg + '</p>';
        str += '        <p class="txt_reply">如有问题请联系我们进行<a href="http://support.qq.com/write.shtml?fid=850" target="_blank" class="links">反馈</a></p>';
        str += '   </div>';

        var d = document.createElement("div");
        d.className = "mod_message pop_drm_tips";
        d.style.opacity = "1";
        d.innerHTML = str;
        var p = container.firstChild;
        while (!!p && p.nodeType != 1) {
            p = p.nextSibling;
        }
        $j(p).hide();
        if (!!p) {
            container.insertBefore(d, p);
        } else {
            container.appendChild(d);
        }
        if (!!isclean) {
            txv.playdata.player.hidePlayer();
            // 不能在onmsg处理时销毁，记个时吧
            setTimeout(function() {
                if (!!p) {
                    container.removeChild(p);
                }
            }, 1000);
            // container.innerHTML = "";
        }

        // container.appendChild(d);
        return;
    };

    /**
     * 显示HTML5播放器的IP受限
     */
    this.showHTML5IPLimit = function() {
        this.showHtml5CannotPay('<h2>抱歉，根据您当前的IP地址，该地区暂不提供播放。</h2>', true);
    }

    // endregion DOM操作的放这里

    // region 通用组件化的东西放这里 例如评分、评论、播放量等

    // region 评论相关
    /**
     * 评论每页显示数量
     */
    this.getCommentPageSize = function() {
            return 10;
        }
        /**
         * 评论专辑的付费类别
         */
    this.getCommentPayType = function() {
        return 0;
    }

    this.getCommentPagerTpl = function() {
        return null;
    }

    this.getCommentItemTpl = function() {
        return "";
    }

    // 是否不强制生成评论模块,boke专辑是否可评论是在列表信息里面的，先强制初始化
    this.isNotForceNeedComment = function() {
            return true;
        }
        /**
         * 检查当前播放的内容是否用的是专辑的id
         * 
         * @public
         */
    this.isCommentUseCoverId = function() {
            return ($j.inArray(COVER_INFO.typeid, [1, 2, 3, 10, 14, 20, 39]) > -1);
        }
        // endregion 评论相关

    // region 顶踩相关
    /**
     * 是否在页面加载时就从CGI读取顶踩数据
     */
    this.isLoadPariseDataOnInit = function() {
        return !PAGE_INFO.dataSteady;
    }

    /**
     * 是否使用顶踩
     * 
     * @public
     */
    this.isUsePraise = function() {
        return PAGE_INFO.scoreType == 2;
    }

    // endregion 顶踩相关

    // endregion 通用组件化

    // region 播放控制相关

    this.isMaxPlayer = function() {
        return isPlayerMax;
    }

    // endregion 播放控制相关

    // region 开关灯
    /**
     * 绑定关灯回调，关灯时不显示广告
     * 
     * @public
     */
    this.initLight = function() {
        if (typeof txv.lighting == "undefined")
            return;
        this.addAction(txv.ACTION.LIGHT_ON, function() {
            $e(document.body).removeClass("page_dark");
        });
        this.addAction(txv.ACTION.LINGHT_OFF, function() {
            $e(document.body).addClass("page_dark");
        });
        txv.lighting.callback = function() {
            if (txv.lighting.isOn) {
                $me.runActions(txv.ACTION.LIGHT_ON);
            } else {
                $me.runActions(txv.ACTION.LINGHT_OFF);
            }
        }
    }

    // endregion 开关灯

    // region 数据上报的放这里

    /**
     * 上报数据到CGI
     * 
     * @ignore
     * 
     */
    function reportCGI(url, param) {
        var str = "";
        for (var p in param) {
            if (param[p] == 0 || !!param[p]) {
                str += p + "=" + param[p] + "&";
            }
        }
        var strUrl = [url, str, "_=", Math.ceil(Math.random() * 1000)].join("");
        Live.report(strUrl);
    }

    /**
     * 数据上报到OZ
     * 
     * @public
     */
    this.reportToOz = function(param) {
        reportCGI(txv.path.flashReport, param);
    };

    /**
     * 上报数据的到TDB
     */
    this.reportToTDB = function(param) {
        reportCGI("http://rcgi.video.qq.com/web_report?", param);
    }

    /**
     * 艾瑞上报
     * 
     * @param {}
     *          tagStr 标签文字
     * @param {}
     *          flag 播放状态标志
     * @param {}
     *          duration 时长
     */
    this.reportToIrt = function(flag) {
        if (!!_irt && typeof(_irt.record_video_api) == "function") {
            var tagStr = txv.playdata.curVideo.getTitle() || COVER_INFO.title || VIDEO_INFO.title;
            var duration = duration || txv.playdata.curVideo.getDuration() || VIDEO_INFO.duration;
            _irt.record_video_api(txv.playdata.curVideo.getFullVid(), duration, tagStr, flag);
        }
    };

    /**
     * 开始播放时上报给艾瑞
     */
    this.reportToIrtBegin = function() {
        this.reportToIrt(0);
    };

    /**
     * 结束播放时上报给艾瑞
     */
    this.reportToIrtEnd = function() {
        this.reportToIrt(1);
    }

    this.reportPV = function() {
        var url = $me.getCurUrl();
        if (url.indexOf(VIDEO_INFO.vid) >= -1) {
            url = txv.common.getPlayUrl(COVER_INFO.id);
        }
        url = url.replace('http://film.qq.com', '').replace('http://v.qq.com', '').replace('http://www.film.qq.com', '');
        Live.tj2.pv({
            "virtualURL": url
        });
        Live.virtualpgv.pv(["cover/", COVER_INFO.typeid, ".html"].join(""));
    }

    // endregion 数据上报

    // region 初始化各种弹出层的回调

    /**
     * 初始化播放页各种弹出层的回调
     */
    this.initPopCallback = Live.emptyFn;

    // endregion

    // region 播放历史记录相关

    /**
     * 获取历史观看的播放地址
     * 
     * @param {Boolean}
     *          hasMoreVideo 是否有多个视频
     * @return {String}
     */
    this.getHistoryPlayLink = function() {
            return txv.common.getPlayUrl(COVER_INFO.id || txv.playdata.curVideo.getFullVid());
        },

        /**
         * 设置历史播放数据
         */
        this.setHistoryData = function() {
            if (!this.isNeedRecordHistoryData()) { // 当前不需要记录观看历史
                txv.history.setCurVideo({ // reset一下观看参数
                    vid: "",
                    coverid: "",
                    tit: "",
                    lnk: ""
                });
                return;
            }
            var _link = "",
                _title = this.getCurTitle(),
                $curLink = $e("#" + txv.playdata.curVideo.getFullVid());
            _link = this.getHistoryPlayLink();
            _title = _title || COVER_INFO.title || VIDEO_INFO.title;
            var param = {
                vid: txv.playdata.curVideo.getFullVid(),
                coverid: COVER_INFO.id,
                tit: _title,
                lnk: _link,
                typeid: COVER_INFO.typeid || VIDEO_INFO.typeid
            };
            if (PAY_INFO.isreal) {
                param.isPay = 1;
            }
            txv.history.setCurVideo(param);
        };

    /**
     * 当前观看的视频是否需要记录观看历史
     */
    this.isNeedRecordHistoryData = function() {
        var ret = true,
            $link, idx, title;
        if (txv.PAGE_TYPE.COVER == PAGE_INFO.pageType && COVER_INFO.typeid == 2 && !COVER_INFO.isPrev) { // 非预告片的电视专辑需要做进一步的判断
            $link = $e("#" + txv.playdata.curVideo.getFullVid());
            idx = this.getVideoATagList().index($link);
            title = $link.attr("title") || "";
            // 如果在正片列表中，并且标题中包含“预告”、或者时长不满5分钟可以认为是预告片
            if (idx != -1 && (title.indexOf("预告") != -1 || txv.playdata.curVideo.getDuration() < 300)) {
                ret = false; // 不记录观看历史
            }
        }
        return ret;
    };

    /**
     * 播放历史记录
     */
    this.playHistory = function() {

        // 如果是看点的话就不从历史位置播放
        if (txv.playdata.curVideo.getIdx() > 0 || !this.isPlayWithHistory() || !this.isNeedRecordHistoryData())
            return;

        // 先判断是否有从url中指定开始时间参数，有的话就不需要从历史观看中获取
        var playTimeArr = ["start", "tstart", "sharestart"],
            isHasTimeParam = false;
        for (var i = 0, len = playTimeArr.length; i < len; i++) {
            var val = $j.util.getUrlParam(playTimeArr[i]);
            if (!!val && !isNaN(val) && val > 0) {
                isHasTimeParam = true;
                break;
            }
        }
        if (!!isHasTimeParam) {
            return;
        }

        var vid = this.getDefaultVid();
        txv.history.getHistoryTimeByKey(vid, COVER_INFO.id, this.historyCallback);
    };

    this.isPlayWithHistory = function() {
        return true;
    }

    /**
     * 获取到播放历史的回调
     * 
     * @param {Number}
     *          time 历史记录时间点
     * @param {Object}
     *          obj 新加参数对象
     */
    this.historyCallback = function(time, obj) {
        if (!time || time == 0)
            return;

        if ($j.util.useHtml5()) {
            txv.playdata.curVideo.setHistoryStart(time);
        } else {
            var checker = setInterval(function() {
                if (!!txv.playdata.player && typeof txv.playdata.player.getPlayer == "function") {
                    var flashobj = txv.playdata.player.getPlayer();
                    if (!!flashobj && typeof flashobj.setPlaytime == 'function') {
                        clearInterval(checker);
                        if (!obj || PAGE_INFO.pageType == txv.PAGE_TYPE.VIDEO) { // 兼容旧接口，新接口只在专辑播放页中使用
                            flashobj.setPlaytime(time);
                        } else {
                            if (obj.vid == txv.playdata.curVideo.getFullVid()) { // 历史记录里上次看的就是这个视频，直接告诉播放器seek时间点。
                                if (time > VIDEO_INFO.piantou) { // 如果当前记录的时间点小于视频片头时间就不seek了，让你丫手贱
                                    flashobj.setPlaytime(time, {
                                        title: "", // 同一个视频时不要传title
                                        vid: obj.vid,
                                        tm: obj.time
                                    });
                                }
                            } else if ($j.inArray(COVER_INFO.typeid, [2, 3]) != -1 && typeof obj.vid == "string" && obj.vid.length > 0) { // 当前播放的视频跟云记录的不一致，传个-2标识一下。只有电视、动漫出现跨集提示
                                var title = txv.playpg.getCurTitle();
                                title = $j("#" + obj.vid).prop("title") || title;
                                title = $j.trim(title.replace(COVER_INFO.title, ""));
                                flashobj.setPlaytime(-2, {
                                    title: title,
                                    vid: obj.vid,
                                    tm: obj.time
                                });
                            }
                        }
                    }
                }
            }, 500);
        }
    }

    // endregion 播放历史记录相关

    this.formatView = function(num) {
        if (num < 10000) {
            return $j.util.formatNum(num);
        } else {
            return (num / 10000).toFixed(1) + " 万";
        }
    };

    // region 分享播放器到外站代码
    this.setDownloadUrl = function() {
        if (!!QQLive.version.hasQQLiveOcx()) {
            var url = "qqlive://download/videoid=" + txv.playdata.curVideo.getFullVid() + "&vformat=1&cprt=1";
            if (COVER_INFO.id) {
                url = "qqlive://download/vbarid=" + COVER_INFO.id + "&vlist=" + txv.playdata.curVideo.getFullVid() + "&vformat=1&cprt=1";
            }
            $e("#btn_downvideo").attr("href", url);
            $e("#btn_downvideo").attr("target", "_self");
        }
    }


    this.initAction = Live.emptyFn;
    /**
     * 对url添加参数
     */
    this.addUrlParam = function(obj, url) {
        url = url || $me.getCurUrl();
        var sTran = url + "?";
        if (url.indexOf("?") > -1) {
            sTran = url + "&";
        }
        for (var k in obj) {
            if (!$j.util.getUrlParam(k, sTran)) {
                sTran = sTran + k + "=" + obj[k] + "&";
            } else {
                var oReg = new RegExp('([\?&#]' + k + '=)([^&#]+)(.*?)', 'i');
                sTran = sTran.replace(oReg, "$1" + obj[k] + "$3");
            }
        }
        var len = sTran.length;
        var lastC = sTran.charAt(len - 1);
        if (lastC == "?" || lastC == "&") {
            sTran = sTran.substring(0, len - 1);
        }
        return sTran;
    }
    this.setNeedRefresh = function(needRefresh) {
        isNeedRefresh = needRefresh;
    }
    this.getNeedRefresh = function() {
        return isNeedRefresh;
    }

    this.refreshLogic = function() {
            if (isNeedRefresh) {
                var flashobj = null,
                    starttime = 0,
                    hisHref = $me.getCurUrl();
                if (!!txv.playdata.player && typeof txv.playdata.player.getPlayer == "function") {
                    flashobj = txv.playdata.player.getPlayer();
                    if (typeof flashobj.getPlaytime == "function") {
                        starttime = parseInt(flashobj.getPlaytime());
                        if (starttime > VIDEO_INFO.piantou) { // 当前观看点大于片头时间才添加start参数
                            hisHref = $me.addUrlParam({
                                start: starttime
                            });
                        }
                        window.location.href = hisHref;
                        return;
                    }
                }
                setTimeout(function() {
                    window.location.reload();
                }, 1000);
            } else {
                $self.setNeedRefresh(true);
            }
        }
        /**
         * 设置登录或者退出登录的回调
         */
    this.setLoginHook = function() {
            var $self = this;
            txv.login.addLoginCallback(function() {
                txv.vip.isVip(function(isvip) {
                    txv.playdata.isVip = !!isvip;
                    if (!!isvip) { //判断好莱坞会员
                        $self.refreshLogic();
                    } else { //非好莱坞会员判断是否qq会员
                        txv.vip.getQQvip && txv.vip.getQQvip(function(status) {
                            txv.playdata.qqvip = status;
                            status > 0 && $self.refreshLogic();
                        });
                    }
                });
            });
            //退出时，清除qq会员信息
            txv.login.addLoginCallback(function() {
                txv.playdata.qqvip = null;
            });
        }
        /**
         * 获取正片播放量
         * 
         * @override
         */
    this.getPlayNum = function() {
        var $self = this;
        var $actnum = $("#act_playnum");
        var a = {};
        a[COVER_INFO.id] = 0;
        var playnums = [a];
        $("#cliplist").find("a[id]").each(function(i) {
            if (i >= 9) {
                return;
            }
            playnums[parseInt((i + 1) / 10, 10)][this.id] = 0;
        });
        _.each(playnums, function(v) {
            $j.ajax({
                "url": txv.path.batchgetplaymount,
                "data": {
                    "id": _.keys(v).join("|"),
                    "otype": "json"
                },
                "dataType": "jsonp",
                "CSRF": false,
                "success": function(json) {
                    if (!!json && Live.object.getType(json.node) == "array") {
                        for (var i = 0; i < json.node.length; i++) {
                            if (COVER_INFO.id == json.node[i].id) {
                                $actnum.html($self.formatView(json.node[i].all));
                                $actnum.parent().show();
                            } else {
                                var tpl = '';
                                tpl += '<div class="figure_info">';
                                tpl += '    <div class="mod_playnum">';
                                tpl += '        <i class="ico_play_12"></i>';
                                tpl += '        <span class="playnum_inner">{playnum}</span>';
                                tpl += '    </div>';
                                tpl += '</div>';
                                $("#" + json.node[i].id).parents("li").append(tpl.replace("{playnum}", $self.formatView(json.node[i].all)));
                            }
                        }
                    }
                }
            });
        })

    };
    /**
     * 初始化页面
     */
    this.initPage = function() {
            fm.common.initPage({
                "tj2": {
                    "forbidden": true
                },
                playPageFlag: true,
                isScrollMenu: false
            });

        }
        // 操作栏模块初始化
    this.initOperation = function() {
            if (!Live.userAgent.windows) {
                $("#act_download").remove();
            }
            if (Live.userAgent.macs) {
                $("#mod_open_clienttoplay").remove();
                $("#act_download").remove();
            }
            this.showDownload();
            var _timer = null; // 打开计时
            var _timer2 = null; // 关闭计时
            // 收藏不需要hover态
            var $mods = $("#act_download,#act_shares,#act_qrcode");
            var $trigger = $("#act_download,#act_shares,#act_qrcode>.action_title,#act_qrcode>.mod_pop_action");
            if (PAY_INFO.status == 7) {
                $("#act_qrcode").hide();
                $mods = $("#act_download,#act_shares");
                $trigger = $("#act_download,#act_shares");
            }
            $trigger.bind("mouseover", function() {
                if (_timer2 != null) {
                    clearTimeout(_timer2);
                    _timer2 = null;
                }
                var $el = $(this);
                _timer = setTimeout(function() {
                    if (!$el.attr("id")) {
                        $el = $el.parent();
                    }
                    if ($el.hasClass("current")) {
                        return false;
                    }
                    var fid = $el.attr("id"),
                        hot = "";
                    switch (fid) {
                        case "act_shares":
                            {
                                hot = "share";
                                break;
                            }
                        case "act_download":
                            {
                                hot = "download";
                                break;
                            }
                        case "act_qrcode":
                            {
                                hot = "code";
                                break;
                            }
                    }
                    Live.tj2.hot("cover." + hot + ".hover");
                    $mods.removeClass("current");
                    $el.addClass("current");
                }, 300);
            }).bind("mouseout", function() {
                if (_timer != null) {
                    clearTimeout(_timer);
                    _timer = null;
                }
                _timer2 = setTimeout(function() {
                    $mods.removeClass("current");
                }, 300);
            });
            $mods.find(".action_title").bind("click", function() {
                clearTimeout(_timer);
                clearTimeout(_timer2);
                var $el = $e(this).parent();
                if ($el.hasClass("current")) {
                    $el.removeClass("current");
                } else {
                    $mods.removeClass("current");
                    $el.addClass("current");
                }
            });
            this.setDownloadUrl();
            //设置会员赠送券提醒
            (function() {
                QZFL.Storage.get("tick_noticecnt", function(val) {
                    val = new String(val);
                    var d = val.split(";");
                    var cnt = parseInt(d[0], 10);
                    var expired = false;
                    if (cnt == 0) {
                        return false;
                    }
                    if (d[1]) {
                        var bt = Date.parse(new Date()) - d[1];
                        //超过一周了
                        if (bt <= 604800000) {
                            return false;
                        } else {
                            expired = true;
                        }
                    }
                    var $hint = $("#act_qrcode").find(".mod_pop_alert_hint");
                    if ($("#act_qrcode").show()) {
                        $hint.show();
                    }
                    $("#act_qrcode").on("click", "[data-role='closer']", function() {
                        $hint.hide();
                        if (isNaN(cnt)) {
                            QZFL.Storage.set("tick_noticecnt", 3 + ";" + (+new Date()));
                        } else {
                            if (d[1]) {
                                //超过一周了
                                QZFL.Storage.set("tick_noticecnt", cnt - 1 + ";" + (+new Date()));
                            } else {
                                QZFL.Storage.set("tick_noticecnt", 3 + ";" + (+new Date()));
                            }
                        }
                    })
                });
            })();
        }
        /**
         * 通用的初始化
         * 
         * @public
         */
    this.commonInit = function(conf) {

        // region 设置一些默认的参数值
        var defaultData = {
            pageinfo: {
                pageType: txv.PAGE_TYPE.COVER,
                tplType: txv.TPL_TYPE.BLACK,
                sideVideoSize: 5,
                // 评分、播放量、顶踩等数据是否有静态化到页面
                dataSteady: false,
                bookText: "订阅节目更新信息",
                bookType: 1
            },
            coverinfo: {
                id: "",
                pic: "",
                title: "",
                isVideoPage: false,
                isPrev: false,
                sourceid: 0
            },
            videoinfo: {
                title: "",
                duration: "",
                vid: "",
                piantou: 0,
                pianwei: 0
            },
            playerinfo: {
                height: 0,
                width: 0
            },
            payinfo: {
                ispay: false,
                isreal: false,
                status: 8,
                price: 0.00,
                vipprice: 0.00,
                validday: 2
            }
        };

        window.PAGE_INFO = typeof PAGE_INFO == "undefined" ? {} : PAGE_INFO;
        window.COVER_INFO = typeof COVER_INFO == "undefined" ? {} : COVER_INFO;
        window.VIDEO_INFO = typeof VIDEO_INFO == "undefined" ? {} : VIDEO_INFO;
        window.PLAYER_INFO = typeof PLAYER_INFO == "undefined" ? {} : PLAYER_INFO;
        window.PAY_INFO = typeof PAY_INFO == "undefined" ? {} : PAY_INFO;

        conf = typeof conf == "undefined" ? {} : conf;
        $j.extend(defaultData.pageinfo, conf.pageinfo);
        $j.extend(defaultData.pageinfo, PAGE_INFO);
        $j.extend(PAGE_INFO, defaultData.pageinfo);

        $j.extend(defaultData.coverinfo, conf.coverinfo);
        $j.extend(defaultData.coverinfo, COVER_INFO);
        $j.extend(COVER_INFO, defaultData.coverinfo);

        $j.extend(defaultData.videoinfo, conf.videoinfo);
        $j.extend(defaultData.videoinfo, VIDEO_INFO);
        $j.extend(VIDEO_INFO, defaultData.videoinfo);

        $j.extend(defaultData.playerinfo, conf.playerinfo);
        $j.extend(defaultData.playerinfo, PLAYER_INFO);
        $j.extend(PLAYER_INFO, defaultData.playerinfo);

        $j.extend(defaultData.payinfo, conf.payinfo);
        $j.extend(defaultData.payinfo, PAY_INFO);
        $j.extend(PAY_INFO, defaultData.payinfo);

        this.setNeedQQvip((location.host.indexOf("film.qq.com") == -1));

        // endregion 设置一些默认的参数值

        this.runActions(txv.ACTION.BEFORE_COMM_INIT);
        this.initPage();

        // 定义播放器尺寸
        if (!!PLAYER_INFO.width) {
            this.playerInfo.width = PLAYER_INFO.width;
        }
        if (!!PLAYER_INFO.height) {
            this.playerInfo.height = PLAYER_INFO.height;
        }

        txv.login.addLoginCallback(function() {
            $me.runActions(txv.ACTION.LOG_IN);
        });
        txv.login.addLogoutCallback(function() {
            $me.runActions(txv.ACTION.LOG_OUT);
        });

        this.initAction();


        this.registFlashMethod();
        this.registGlobalfun();
        this.initLight();

        var $self = this;

        this.addAction(txv.ACTION.DOM_READY, $self.initPushState);

        // region comscore上报加视频分类参数--20131125
        this.addAction(txv.ACTION.DOM_READY, function() {
            var typeId = COVER_INFO.typeid || VIDEO_INFO.typeid || 105;
            try {
                Live.tj2.comscoreParam.comscorekw = typeId;
            } catch (e) {}
        });
        // endregion

        this.addAction(txv.ACTION.DOM_READY, $self.reportPV);
        this.addAction(txv.ACTION.DOM_READY, $self.setLoginHook);

        this.addAction(txv.ACTION.BEFORE_SHOW_PLAYER, $self.initPopCallback);
        this.addAction(txv.ACTION.BEFORE_SHOW_PLAYER, $self.setTitleOnPageLoad);
        this.addAction(txv.ACTION.BEFORE_SHOW_PLAYER, $self.setHistoryData);
        this.addAction(txv.ACTION.BEFORE_SHOW_PLAYER, $self.playHistory);

        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.bindVideoListClick);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.initDescMoreLink);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.reportToIrtBegin);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.setVideoElSelected, true);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.getPlayNum);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, $self.initOperation);


        // 监听播放切换，这个是由播放器切换后的回调，不是用户主动点击的，用户主动点击请监听txv.ACTION.VIDEO_CLICK
        this.addAction(txv.ACTION.PLAY_CHANGE, $self.setVideoElSelected);
        this.addAction(txv.ACTION.PLAY_CHANGE, $self.changeTitleByVid);
        this.addAction(txv.ACTION.PLAY_CHANGE, $self.setHistoryData);
        this.addAction(txv.ACTION.PLAY_CHANGE, $self.setDownloadUrl);
        this.addAction(txv.ACTION.PLAY_CHANGE, $self.reportToIrtBegin);

        this.addAction(txv.ACTION.VIDEO_CLICK, $self.reportToIrtEnd);
        // 视频列表点击
        this.addAction(txv.ACTION.VIDEO_CLICK, $self.changePlayerVideo);

        // 一个视频播放结束
        this.addAction(txv.ACTION.PLAYEND, $self.reportToIrtEnd);

    };

    /**
     * 是否在页面加载完就自动显示播放器，主要是为了判断用户是否是vip
     */
    this.isAutoShowPlayer = function() {
        return false;
    }

    /**
     * 是否总是显示播放器，一般来说是的，但是对于付费的iPad，则不是，有时候用播放器的位置显示tips提示
     */
    this.alwaysShowPlayer = function() {
        return true;
    }

    /**
     * 设置请求HLW会员信息时，是否同时需要qq会员信息
     */
    this.setNeedQQvip = function(bool) {
        var $self = this;
        if (txv.vip.setNeedQQvip) {
            txv.vip.setNeedQQvip(bool);
        }
    }
    this.checkIsBuy = function(defer) {
            if (!txv.login.isLogin()) {
                defer.reject();
                return;
            }
            var errHandler = function(data) {
                txv.tips.ShowSimpWarningTips("暂时无法获取影片购买信息！", "请尝试刷新页面。");
                var url = "http://rcgi.video.qq.com/web_report?cmd=2562&ctype=2&",
                    img = new Image();
                $.extend(data, {
                    ua: navigator.userAgent
                });
                url = url + $.param(data);
                img.src = url;
            };
            seajs.use('hw.request', function(Req) {
                Req.pay(true, {
                    "id": COVER_INFO.id
                }).done(function(json) {
                    if (json && json.result) {
                        if (json.result.code == 1003) { // 免费影片
                            defer.reject(json);
                            var obj = {
                                    cmd: 2566,
                                    str1: document.referrer,
                                    uin: txv.login.getUin(),
                                    str2: COVER_INFO.id,
                                    url: location.href
                                },
                                img = new Image();
                            img.src = "http://rcgi.video.qq.com/web_report?" + $.param(obj);
                        } else if (json.result.code == 0) {
                            json.pay ? defer.resolve(json) : defer.reject(json);
                        } else if (json.result.code == -11) { // 登录key失效，重新登录
                            //txv.login.openLogin({
                            //    success : function() {
                            //        $me.checkIsBuy(COVER_INFO.id);
                            //    }
                            //});
                            //return;
                        } else {
                            defer.reject(json);
                            errHandler({
                                str1: "cgi return error code:" + json.result.code
                            });
                        }
                    } else {
                        defer.reject();
                        errHandler({
                            str1: "invalid json"
                        });
                    }
                }).fail(function(msg) {
                    msg = msg || "cgi error";
                    defer.reject(msg);
                    errHandler({
                        str1: msg
                    });
                });
            });
        }
        /**
         * 显示了播放器，但是发现的当前有弹出层，先把播放器隐藏起来吧，否则弹出层会被播放器挡住
         */
    this.hidePlayerWhenTips = Live.emptyFn;
    /**
     * @override 检查VIP
     */
    this.checkIsVip = function() {

        var checkVipTimer = null,
            checktimes = 0,
            $self = txv.playpg;

        function onSetPayStatus() {
            clearTimeout(checkVipTimer);
            checkVipTimer = null;
            checktimes++;
            if ($j.util.getUrlParam('show_mask') == 1) {
                location.href = "http://film.qq.com/cover/" + COVER_INFO.id[0] + '/' + COVER_INFO.id + '.html';
            }
            $self.isOnlyPrevUser = false;
            $self.onSetPayStatus();
            $self.rewritePlayer();
            onSetEnd();
        }

        function onSetNotPayStatus() {
            clearTimeout(checkVipTimer);
            checkVipTimer = null;
            checktimes++;

            $self.isOnlyPrevUser = true;
            $self.onSetNotPayStatus();
            $self.rewritePlayer();
            onSetEnd();
        }

        function onSetEnd() {
            // 针对第一次，显示播放器
            if (!txv.playdata.player && !$self.isAutoShowPlayer()) {
                $self.showPlayer();
                $self.hidePlayerWhenTips();
                $self.runActions(txv.ACTION.AFTER_SHOW_PLAYER);
            }
        }

        function checkSinglePay() {
            var defer = $.Deferred().done(function() { // 支付过了
                txv.playdata.isBuy = true;
                if (checktimes == 0) {
                    onSetPayStatus();
                }
            }).fail(function() { // 没支付过
                txv.playdata.isBuy = false;
                if (checktimes == 0) {
                    onSetNotPayStatus();
                }
                if ($self.openUrlType != 0) { // 没支付过，并且之前还设定了登录后回调的打开窗口方案就需要开窗口
                    $self.flashOpenPay();
                    $self.openUrlType = 0;
                }
            });
            $me.checkIsBuy(defer);
        }

        checkVipTimer = setTimeout(onSetNotPayStatus, 1000);
        txv.vip.isVip(function(isvip) {
            txv.playdata.isVip = isvip;
            checkSinglePay();
        });
    };

    this.showPlayerFirstTime = Live.emptyFn;
    /**
     * 设置根据业务逻辑显示播放器的逻辑
     * 
     * @override
     * @public
     */
    this.showPlayerByPageLogic = function() {
        this.checkIsVip();
    }

    /**
     * 在执行CommonInit之前
     * 
     * @public
     * @function
     */
    this.beforeCommonInit = Live.emptyFn;

    /**
     * 初始化，开始运行
     */
    this.init = function(conf) {

        this.beforeCommonInit();

        // 先做基本的初始化
        this.commonInit(conf);

        // 通过url解析出默认播放的视频列表
        this.getDefaultVidList();

        // 通过url解析出默认的vid
        this.getDefaultVid();

        // 运行一个事件，当dom准备完毕后的调用
        this.runActions(txv.ACTION.DOM_READY);

        // 初始化视频信息对象
        this.initVideoInfo();

        // 播放器准备显示之前
        this.runActions(txv.ACTION.BEFORE_SHOW_PLAYER);

        if (this.isAutoShowPlayer()) {
            this.showPlayerFirstTime();
        } else {
            this.showPlayerByPageLogic();
        }

    };

    /**
     * 获取当前页面url
     */
    this.getCurUrl = function() {
        return document.URL || document.location.href;
    };

    /**
     * 判断当前是否在客户端播放
     */
    this.isClientportal = function() {
            return navigator.userAgent.indexOf("QQLive") != -1;
        }
        // endregion public方法定义

    /**
     *设置弹幕显示逻辑
     */
    this.setPlayerBulletStatus = function(danmu) {
        try {
            var $player_container = $(".player_container"),
                $mod_player_section = $player_container.find(".mod_player_section");
            txv.playdata.player.play(txv.playdata.curVideo);
            $mod_player_section.size() && txv.playdata.player.setting("height", $mod_player_section.height());
            txv.playdata.player.setting("width", "100%");
            txv.playdata.player.write("mod_player");
            txv.playdata.player.instance && (txv.playdata.player.instance.flashobj = txv.playdata.player.flashobj);
            if (danmu == 1) {
                $(".player_tips_wrap").addClass('player_tips_wrap_barrage');
            } else {
                $(".player_tips_wrap").removeClass('player_tips_wrap_barrage');
            }
        } catch (err) {}

    }
}


/**
 * @fileOverview 腾讯视频JS库 常规付费页面
 * @lastUpdate $Date: 2012-12-12 18:03:26 +0800 (周三, 2012-12-12) $
 * @author QQLive $LastChangedBy: popotang $
 * @version $Rev: 24814 $
 */

/*
 * @include "../../../extend/qzfl.txv.js" @include "../common/live.define.js" @include "./../txv.define.js" @include "./../txv.common.js" @include "./../txv.login.js" @include "./../txv.template.js" @include "./txv.basepage.js" @include "./txv.coverpage.js" @include "./txv.coverutil.js" @include "../film.define.js" @include "../film.common.js"
 */

/**
 * 常规付费页面
 * 
 * @class txv.PayPage
 * @extends txv.BasePlayPage
 */
txv.PayPage = function() {
	txv.ACTION.AFTER_REWRITE_PLAYER = "after_rewrite_player";
	var $me = this;
	this.isOnlyPrevUser = true;
	this.newwin = null;
	this.openUrlType = 0;
	this.loginChecker = null;
	this.isPlayWithHistory = function() {
		return true; // 不管能不能看都从历史播放点开始
	}

	this.setOpenURLType = function(opentype) {
		txv.log("setOpenURLType = " + opentype);
		this.openUrlType = opentype;
		this.flashOpenPay();
	};

	/**
	 * 获得单片支付的URL地址
	 */
	this.getPayUrl = function() {
		return "/pay/index.html?id="+COVER_INFO.id;
	};

	/**
	 * 获取断点选播的URL，调用这个的时候播放器肯定初始化好了，可以直接拿历史记录
	 */
	this.rewritePlayer = function(callback) {
		if (!txv.playdata.player)
			return;
		
		// 从历史记录和当前播放器时间找最大值作为续播点
		var $self = this;
		if(txv.playdata.player && typeof txv.playdata.player.getPlaytime != "undefined"){
			var curTime = txv.playdata.player.getPlaytime();			
		}else{
			var curTime = 0;
		}
		//safari对flash方法处理为控件方法,返回npmethod
		if(!!Live.userAgent.safari){
			var player = txv.playdata.player.getPlayer();
			if(!!player && typeof player.getPlaytime != "undefined"){
				curTime = parseInt(player.getPlaytime(),10);
			}
		}
		txv.history.getHistoryTimeByKey(txv.playdata.curVideo.getFullVid(), COVER_INFO.id, function(his) {
				txv.log("--rewrite player his:"+his);
				var stime = Math.max(his, curTime);
				txv.playdata.curVideo.setHistoryStart(stime);
		
				$self.showPlayer(true);
				$self.runActions(txv.ACTION.AFTER_REWRITE_PLAYER);
				// 显示了播放器，但是发现的当前有弹出层，先把播放器隐藏起来吧，否则弹出层会被播放器挡住
				$self.hidePlayerWhenTips();
				Live.dom.setScrollTop(0, document);
				if (typeof callback == "function") {
					callback.call($self);
				}
		    });
	}

	// endregion private

	/**
	 * 会员是否也需要购买
	 */
	this.isNeedVipPay = function() {
		return true;
	}

	/**
	 * 设置登录或者退出登录的回调
	 */
	this.setLoginHook = function() {
		txv.login.addLoginCallback(this.checkIsVip);
		txv.login.addLogoutCallback(function() {
			    setTimeout(function(){window.location.reload();},1000);
		    });
	}

	/**
	 * flash打开支付页
	 */
	this.flashOpenPay = function() {
		if (!!txv.playdata.player) {
			var flashobj = txv.playdata.player.getPlayer();
			if (typeof flashobj != "undefined" && typeof flashobj.setFullScreen == "function") {
				flashobj.setFullScreen(false);
			}
		}
		var url = this.getPayUrl();
		if (!txv.login.isLogin()) {
			txv.login.openLogin();
		}
		else {
			window.location.href = url;
		}
	}

	/**
	 * 获取用户状态
	 */
	this.getUserStatus = function() {
		if (!txv.login.isLogin()) {
			//txv.login.clearLoginCookie();
			return txv.USER_STATUS.NOT_LOGIN;
		}
		var flag = 0;
		if (txv.playdata.isVip && (PAY_INFO.productType == 1 || PAY_INFO.productType == 6)) { // 仅好莱坞存在会员一说
			flag = flag | 1;
		}
		if (txv.playdata.isBuy) {
			flag = flag | 2;
		}
		var v;
		switch (flag) {
			case 1 :
				v = txv.USER_STATUS.ONLY_VIP;
				break;
			case 2 :
				v = txv.USER_STATUS.SINGLE_PAY;
				break;
			case 3 :
				v = txv.USER_STATUS.VIP_AND_PAY;
				break;
			default :
				v = txv.USER_STATUS.ONLY_LOGIN;
				break;
		}
		return v;
	}

	this.getCommentPayType = function() {
		return 2;
	}
	/**
	 * 注册flash播放器支付相关的接口
	 */
	this.regestFlashPayInterface = function() {
		var $self = this;
		/**
		 * 播放器获取价格
		 */
		window.__tenplay_getpayinfo = function() {
			var data = {
				"s_validday" : PAY_INFO.validday,
				"s_price" : PAY_INFO.price,
				"s_discount" : (PAY_INFO.vipprice == "0.00" || PAY_INFO.vipprice == PAY_INFO.price) ? 0 : PAY_INFO.vipprice,
				"v_price" : 30,
				"v_discount" : 20,
				"vinfo" : PAY_INFO.status,
				"uinfo" : $self.getUserStatus(),
				"vtype" : COVER_INFO.typeid,
				// vip 每月赠送的观影券数据
				"vipGiftTicketNum" : 2,
				"wx": Live.login.getLoginType()=='wx'?1:0,
				"ticketnum" : $self.getUserTicket()
			}
			Live.tj2.hot("uinfo:"+data.uinfo);
			return data;
		}
		window.__tenplay_refreshplayer = function() {
			$self.checkIsVip();
		}
		/**
		 * 跳转到好莱坞支付页
		 */
		function goFilmPayPage() {
			var defer = $.Deferred().fail(function() {
				location.href = $me.getPayUrl();
			});
			if (txv.playpg.isNeedVipPay()) {// 会员收费
				$me.checkIsBuy(defer);
			}
			else {
				txv.vip.isVip(function(isVip) {
				    if (!isVip) {// 非会员
				    	$me.checkIsBuy(defer);
				    }
			    });
			}
		}
		
		window.__tenplay_getvideopayinfo = function(info){
			if (typeof info == "undefined" || typeof info.preview == "undefined" ){
				return;
			}
			var preview = Math.floor(info.preview/60);
			TMPL_WEB.UNLOGIN = '<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-toggle="l_pay" class="link">开通会员</a>看完整影片</p>';
			TMPL_WEB.NOTVIP_NOTICK = '<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _scene="1" _source="2" _hot="flash.playertips" class="link">开通会员</a>用券免费看</p>';
			TMPL_WEB.NOTVIP_HASTICK ='<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-type="buylink" _source="2" _hot="flash.ticketbuy" class="link">用券观看</a>完整影片</p>';
			TMPL_WEB.NOTVIP_NONEEDBUY ='<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _scene="1"  _source="2" _hot="flash.playertips" class="link">开通会员</a>看完整版</p>';
			TMPL_WEB.VIP_HASTICK = '<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-type="buylink" _source="2" _hot="flash.ticketbuy" class="link">用券观看</a>完整影片</p>';
			TMPL_WEB.VIP_NOTICK = '<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _scene="1"  _source="2" _hot="flash.playertips" class="link">续费好莱坞会员</a>用券免费看</p>';
			
			TMPL_TV.UNLOGIN_NOFREE='<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-amount="3" _source="2" data-toggle="l_pay" _scene="1"  class="link">会员登录</a>观看全剧</p>';
			TMPL_TV.NOTVIP_NOFREE = '<p class="tips_txt">可试看'+ preview +'分钟，<a href="javaScript:void(0)" data-amount="3" _source="2" data-toggle="l_pay" _scene="1"  _hot="flash.playertips" class="link">开通会员</a>看全剧</p>';
			$self.initPlayerTips();
		};
		/**
		 * flash播放器点击付费时的操作
		 */
		window.__tenplay_openpay = function() {
			$self.setOpenURLType(2);
			Live.tj2.button("cover.player.openpay");
		}
		window.__tenplayer_openLogin = function() {
			var flashobj = txv.playdata.player.getPlayer();
			if (typeof flashobj != "undefined" && typeof flashobj.setFullScreen == "function") {
				flashobj.setFullScreen(false);
			}
			$self.setOpenURLType(0);
			txv.login.openLogin();
			Live.tj2.button("cover.player.openlogin");
		};

		/**
		 * 播放器立即购买按钮
		 * 
		 * @param {Number}
		 *          btnType 按钮类型 1 单片支付 2 开通会员
		 */
		window.__tenplay_buynow = function(btnType) {
			if (PAGE_INFO.pageType == txv.PAGE_TYPE.EDU_PAY || typeof btnType == "undefined") {// 教育付费保持不变的逻辑
				$self.setOpenURLType(2);
			}
			else if (PAGE_INFO.pageType == txv.PAGE_TYPE.FILM) {// 好莱坞付费
				switch (btnType) {
					case 1 : {
						if (txv.login.isLogin()) {
							goFilmPayPage();
						}
						else {
							txv.login.openLogin({
								    success : function() {
									    goFilmPayPage();
								    }
							    });
						}
						break;
					}
					case 2 : {
						if (txv.login.isLogin()) {
							location.href = PAGE_INFO.openVipLink;
						}
						else {
							txv.login.openLogin();
						}
						break;
					}
					default : {
						$self.setOpenURLType(2);
					}
				}
			}
			Live.tj2.button("cover.player.buynow");
		}
	};
	this.getUserTicket = function() {
		return 0;
	}

	/**
	 * 重置统一播放器判断使用HTML5的规则，使用腾讯视频的规范
	 */
	this.resetUseHTML5 = Live.emptyFn;
	/**
	 * 延长skey有效期
	 */
	this.keepSkey = function() {
		window.setInterval(function() {
			    $me.loginChecker = new Image();
			    $me.loginChecker.src = "http://sns.video.qq.com/tvideo/fcgi-bin/loginstat?_=" + Math.random();
		    }, 900000);
	}
	/**
	 * 初始化支付页
	 */
	this.initPayCoverAction = function() {
		this.addAction(txv.ACTION.DOM_READY, this.keepSkey);
		this.addAction(txv.ACTION.DOM_READY, this.resetUseHTML5);
		this.addAction(txv.ACTION.DOM_READY, this.regestFlashPayInterface);
		this.addAction(txv.ACTION.DOM_READY, this.setLoginHook);
	}

	this.initAction = this.initPayCoverAction;

	/**
	 * 是否需要显示播放器广告
	 */
	this.isShowPlayerAD = function() {
		return "0";
	}

	this.showPlayerByPageLogic = function() {
		this.checkIsVip();
	}
}

txv.PayPage.prototype = new txv.BasePlayPage();
/**
 * @fileOverview 腾讯视频JS库 好莱坞付费播放页
 * @lastUpdate $Date: 2014-03-25 09:43:48 +0800 (周二, 25 三月 2014) $
 * @author QQLive $LastChangedBy: stanleyyu $
 * @version $Rev: 44695 $
 */

/*
 * @include "../../../extend/qzfl.txv.js" 
 * @include "../../common/live.define.js" 
 * @include "./../txv.define.js" 
 * @include "./../txv.common.js" 
 * @include "./../txv.login.js" 
 * @include "./../txv.template.js" 
 * @include "./txv.basepage.js" 
 * @include "./txv.coverutil.js" 
 * @include "../film.define.js" 
 * @include "../film.common.js" 
 * @include "./txv.paypage.js" 
 * @include "./txv.vip.js" 
 * @include "../../TenVideoPlayer/ocx/qqlivesetup.js" 
 * @include "../../TenVideoPlayer/ocx/qqlivedefine.js"
 */

/**
 * 好莱坞付费播放页
 * 
 * @class txv.FilmPage
 * @extends txv.BlackCoverPage
 * @extends txv.PayPage
 */
txv.FilmPage = function() {
    var $me = this,
        lightTimer = null,
        ticketNum = 0,
        hasOcxErr = false, // 控件上报过515和1002后不在上报1106
        JS_REPORT_TYPE = {
            LOGIN: 0,
            ISVIP: 1,
            CHECK_BUY: 2,
            SINGLE_BUY: 3,
            SET_RESULT: 4,
            REWRITE_PLAYER: 5,
            SET_END: 6,
            TIMEOUT: 99
        },
        needrefresh = true,
        buyJson,
        vipJson,
        isDrmVideo = false,
        vslider = null,
        maxretry = 1,
        //是否隐藏最开始的tips，ipad上不用隐藏
        hideBasePayTip = true,
        //记录上次播放视频时长
        lastTimelong = "",
        useNewFeature = true, //默认使用新特性，abtest命中
        lowPriceVip = 15,
        //websocket配置
        WEBSOCKS = {},
        WEBSOCK_CONF = {
            ws: "ws://login.tv.qq.com:8080",
            qrcode: "http://sns.video.qq.com/tvideo/fcgi-bin/qrencode?",
            scanreport: "http://pay.video.qq.com/fcgi-bin/scanreport?"
        };
    /**
     * 购买成功后的状态模块显示模板
     */
    var paySucTpl = {
        vipfree: '<div class="mod_side_vip">' +
            '<div class="tit_buy">' +
            '<p class="tit">您已是好莱坞会员，可完整观看</p> ' +
            '<p class="tit_time">好莱坞会员到期时间：<span class="time txt_red">{endtime}</span></p>' +
            '</div>' +
            '<div class="buy_again">' +
            '<a href="javaScript:void(0)" class="link" data-toggle="l_pay" id="vip_open"  _scene="1" _source="9" _hot="cover.page.openvip">立即续费</a>' +
            '</div>' +
            '</div>',
        pay: '<div class="mod_side_vip" >' +
            '<div class="tit_buy">' +
            '<p class="tit">您已购买该部影片，可完整观看</p> ' +
            '<p class="tit_time">观看有效期至：<span class="time">{endtime}</span></p>' +
            '</div>' +
            '</div>'
    };
    /**
     * @private
     */
    function addPlayerIndex10001() {
        clearTimeout(lightTimer);
        $e("#" + $me.playerModId).addClass("index_10001");
        $e(".container").css("zIndex", "auto");
    }

    /**
     * @private
     */
    function removePlayerIndex10001() {
        lightTimer = setTimeout(function() {
            $e(".container").css("zIndex", "1");
            $e("#" + $me.playerModId).removeClass("index_10001");
        }, 350);
    }

    function getSUin() {
        var cookieKeys = ['uin_cookie', 'adid', 'uin', 'luin', 'clientuin', 'pt2gguin', 'zzpaneluin', 'o_cookie'],
            suin = Live.login.getUin();
        if (!suin) {
            for (var i = 0, len = cookieKeys.length; i < len; i++) {
                suin = Live.cookie.get(cookieKeys[i]);
                suin = parseInt(suin.replace(/^[^\d]+/, '').replace(/[^\d]+$/, ''), 10) || 0;
                if (suin > 10000) {
                    break;
                }
            }
        }
        return suin;
    }
    /**
     * 上报前端的各种JS步骤和关键值
     */
    function reportJSInfo(type, str1, info) {
        var isLogin = txv.login.isLogin(),
            str2 = "";
        if (!isLogin)
            return;

        try {
            if (typeof info == "object") {
                str2 = Live.lang.obj2str(info);
            }

            $me.reportToTDB({
                "uin": txv.login.getUin(),
                "cmd": 2555, // 固定值
                "host": encodeURIComponent(document.location.host),
                "type": type,
                "str1": encodeURIComponent(str1),
                "str2": encodeURIComponent(str2),
                "url": encodeURIComponent(document.location.href)
            });
        } catch (err) {};
    }

    /**
     * 重置控件安装的Tips
     * 
     * @private
     */
    function resetOcxInstallerTips() {
        var $self = this;
        QQLive.config.IE_MIN_VER = QQLive.config.FF_MIN_VER = QQLive.config.CHROME_MIN_VER = "8.51.7195.0";
        QQLive.config.MEDIAPLAYER_DOWNLOAD_URL = "http://dldir1.qq.com/qqtv/QQLive9.0.81.0.exe";
        // 重置获取url
        tvp.OcxPlayer.getExeFileUrl = function(callbacks) {
                $j.ajax({
                    url: "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?auto_id=544&otype=json",
                    dataType: "jsonp",
                    success: function(json) {
                        if (typeof callbacks == "object" && typeof callbacks.onSuccess == "function") {
                            callbacks.onSuccess(json);
                        }
                    },
                    error: function() {
                        if (typeof callbacks == "object" && typeof callbacks.onError == "function") {
                            callbacks.onError();
                        }
                    },
                    complete: function() {
                        if (typeof callbacks == "object" && typeof callbacks.onComplete == "function") {
                            callbacks.onComplete();
                        }
                    }
                })
            }
            // 重置Ocx控件显示安装的tips
        tvp.OcxPlayer.showInstallerTips = function(container) {
            if ($.browser.chrome && $.browser.version >= 42) {
                var that = $self;
                $self.reportToTDB({
                    "uin": txv.login.getUin(),
                    "cmd": 2552, // 固定值
                    "type": 673, // DRM出错的控件事件id
                    "host": document.location.host,
                    "url": encodeURIComponent(document.location.href)
                });
                setTimeout(function() {
                    that.playertype = "flash";
                    txv.playdata.player = new tvp.Player();
                    txv.playdata.player.setting("width", parseInt(that.playerInfo.width));
                    txv.playdata.player.setting("height", parseInt(that.playerInfo.height));
                    txv.playdata.player.setting("playerType", that.getPlayerType());

                    if (!that.isPlayWithHistory()) {
                        txv.playdata.curVideo.setHistoryStart(0);
                    }
                    txv.playdata.curVideo.setPay(1);
                    that.addPlayerCommonParam(txv.playdata.player);
                    txv.playdata.player.setCurVideo(txv.playdata.curVideo);
                    txv.playdata.player.output(that.playerModId);
                }, 100); //延迟切换 否则控件可能崩溃
            } else {
                //          $self.whileOcxErr(function(){
                var link = QQLive.config.MEDIAPLAYER_DOWNLOAD_URL,
                    lowVersion = QQLive.version.getSupportMinVersion();;
                tvp.OcxPlayer.getExeFileUrl({
                    "onSuccess": function(json) {
                        if (!!json) {
                            link = json.url || link;
                            lowVersion = json.lowVersion || lowVersion;
                        }
                    },
                    "onComplete": function() {
                        var str = '';
                        str += ' <div class="pop_wrap pop_drm" style="opacity:1;">';
                        str += '    <div class="pop_play">';
                        str += '        <div class="title"></div>';
                        str += '        <div class="con">';
                        str += '            <h3 class="video_name">您即将观看：《' + COVER_INFO.title + '》</h3>';
                        str += '            <p><i class="icon icon_lock"></i>应版权方要求，该节目已进行加密保护，<br/>';
                        str += "您未安装腾讯视频最新版的播放控件，请下载安装后观看<\/p>";
                        str += '            <div class="btn_wrap"><a href="{EXEURL}" class="btn_download">立即下载</a></div>';
                        if (tvp.$.userAgent.is64 && !!tvp.$.userAgent.ie) {
                            str += '    <p class="tips">您当前使用的是64位浏览器，安装完成后请切换到32位浏览器上观看</p>';
                        } else {
                            str += '     <p class="tips">安装完后请' + (Live.userAgent.ie ? '刷新页面或者按F5' : '重新启动浏览器') + '</p>';
                        }
                        str += '        </div>';
                        str += '    </div>';
                        str += ' </div>';
                        container.innerHTML = str.replace(/\{EXEURL\}/g, link);

                        $self.reportToTDB({
                            "uin": txv.login.getUin(),
                            "cmd": 2552, // 固定值
                            "type": 518, // DRM出错的控件事件id
                            "host": document.location.host,
                            "url": encodeURIComponent(document.location.href),
                            "str1": encodeURIComponent(tvp.version.getOcx()),
                            "str2": encodeURIComponent(lowVersion)
                        });
                    },
                    "onError": function() {
                        var str = '';
                        str += ' <div class="pop_wrap pop_drm" style="opacity:1;">';
                        str += '    <div class="pop_play">';
                        str += '        <div class="title"></div>';
                        str += '        <div class="con">';
                        str += '            <h3 class="video_name">您即将观看：《' + COVER_INFO.title + '》</h3>';
                        str += '            <p><i class="icon icon_lock"></i>应版权方要求，该节目已进行加密保护，<br/>';
                        str += "您未安装腾讯视频最新版的播放控件，请下载安装后观看<\/p>";
                        str += '            <div class="btn_wrap"><a href="{EXEURL}" class="btn_download">立即下载</a></div>';
                        if (tvp.$.userAgent.is64 && !!tvp.$.userAgent.ie) {
                            str += '    <p class="tips">您当前使用的是64位浏览器，安装完成后请切换到32位浏览器上观看</p>';
                        } else {
                            str += '     <p class="tips">安装完后请' + (Live.userAgent.ie ? '刷新页面或者按F5' : '重新启动浏览器') + '</p>';
                        }
                        str += '        </div>';
                        str += '    </div>';
                        str += ' </div>';
                        container.innerHTML = str.replace(/\{EXEURL\}/g, link);

                        $self.reportToTDB({
                            "uin": txv.login.getUin(),
                            "cmd": 2552, // 固定值
                            "type": 518, // DRM出错的控件事件id
                            "host": document.location.host,
                            "url": encodeURIComponent(document.location.href),
                            "str1": encodeURIComponent(tvp.version.getOcx()),
                            "str2": encodeURIComponent(lowVersion)
                        });
                    }
                });
                //          });
            }
        }

        // 重置显示提示的tips
        tvp.OcxPlayer.showNoticeTips = function(eleid, info) {
            $self.whileOcxErr(function() {
                $self.showHtml5CannotPay(info.title + (info.msg ? ("<br/>" + info.msg) : ""), true);
            });
            //          var $message = $e("#" + $self.playerModId + " >.mod_message");
            //          $message.css('width', "900px");
            //          $message.css('marginLeft', '-450px');
        }
    }

    function showPaySucTips() {
        if (useNewFeature) {
            // var tpl = '<div class="pop_wrap pop_pay_success_v2" style="opacity:1;" id="suc_paytip">';
            // tpl += ' <div class="pop_play">';
            // tpl += '     <div class="con m_con">';
            // tpl += '         <h4 class="sub_title"><i class="icon_success"></i>支付成功</h4>';
            // tpl += '     </div>';
            // tpl += ' </div>';
            // tpl += ' <div id="player_mask" class="player_mask"></div>';
            // tpl += '</div>';
            // $j('#mod_player').append(tpl);
            // txv.login.showCenterNobg(getElementById("suc_paytip"),0,0,$j('#mod_player'));
            // setTimeout(function() {
            //      $j("#suc_paytip").remove();
            //     }, 2000);
        } else {
            var tpl = '<div class="pop_wrap pop_pay_success_v2" style="opacity:1;" id="suc_paytip">';
            tpl += '    <div class="pop_play">';
            tpl += '        <div class="con m_con">';
            tpl += '            <h4 class="sub_title"><i class="icon_success"></i>支付成功</h4>';
            tpl += '        </div>';
            tpl += '    </div>';
            tpl += '    <div id="player_mask" class="player_mask"></div>';
            tpl += '</div>';
            $j('body').append(tpl);
            txv.login.showMask('suc_paytip', 0, 0, 0);
            var pop = getElementById("suc_paytip")
            txv.login.showCenterNobg(pop);
            txv.login.ie6hook(pop);
            setTimeout(function() {
                txv.login.hideMask();
                $j("#suc_paytip").remove();
            }, 2000);
        }
    }

    function showErrTips(title, msg1, msg2, button, retcode, isclose) {
        title = title || "支付未成功";
        button = button || "返回重新支付";
        isclose = !!isclose;
        retcode = retcode || -1;
        if (useNewFeature) {
            // var tpl = '<div class="pop_wrap pop_wrap_v2 pop_pay_wrap_v2" style="opacity:1;" id="err_paytip">';
            // tpl += '    <div class="pop_play">';
            // tpl += '        <div class="title"><a href="javaScript:void(0)" class="close" data-type="closetip">关闭</a></div>';
            // tpl += '        <div class="con m_con">';
            // tpl += '         <h4 class="sub_title"><i class="icon_alert"></i>' + title + '</h4>';
            // tpl += '            <div class="vip_info">';
            // if (!!msg1) {
            //  tpl += '                <p class="txt">' + msg1 + '</p>';
            // }
            // if (!!msg2) {
            //  tpl += '                <p class="txt">' + msg2 + '</p>';

            // }
            // tpl += '             </div>';
            // tpl += '            <a href="javaScript:void(0)" class="btn btn_default" data-type="' + (!!isclose ? 'closetip' : 'backtotips') + '" data-retcode="' + retcode + '">' + button + '</a>';
            // tpl += '        </div>';
            // tpl += '    </div>';
            // tpl += ' <div id="player_mask" class="player_mask"></div>';
            // tpl += '</div>';
            // $j('#mod_player').append(tpl);
            // txv.login.showCenterNobg(getElementById("err_paytip"),0,0,$j('#mod_player'));
            // document.documentElement.scrollTop = 0;
            // document.body.scrollTop = 0;
        } else {
            var tpl = '<div class="pop_wrap pop_wrap_v2 pop_pay_wrap_v2" style="opacity:1;" id="err_paytip">';
            tpl += '    <div class="pop_play">';
            tpl += '        <div class="title"><a href="javaScript:void(0)" class="close ticketpay" data-type="closetip">关闭</a></div>';
            tpl += '        <div class="con m_con">';
            tpl += '            <h4 class="sub_title"><i class="icon_alert"></i>' + title + '</h4>';
            tpl += '            <div class="vip_info">';
            if (!!msg1) {
                tpl += '                <p class="txt">' + msg1 + '</p>';
            }
            if (!!msg2) {
                tpl += '                <p class="txt">' + msg2 + '</p>';
            }
            tpl += '             </div>';
            tpl += '            <a href="javaScript:void(0)" class="btn btn_default" data-type="' + (!!isclose ? 'closetip' : 'backtotips') + '" data-retcode="' + retcode + '">' + button + '</a>';
            tpl += '        </div>';
            tpl += '    </div>';
            tpl += '    <div id="player_mask" class="player_mask"></div>';
            tpl += '</div>';
            $j('body').append(tpl);
            txv.login.showMask('err_paytip', 0, 0, 0);
            var pop = getElementById("err_paytip");
            txv.login.showCenterNobg(pop);
            txv.login.ie6hook(pop);
        }
    }
    /**
     * 显示通用的DRM出错信息
     */
    this.showCommonDrmErr = function(msg) {
        $me.whileOcxErr(function() {
            $me.showHtml5CannotPay("版权保护信息获取失败，请<a href='javaScript:void(0)' onclick='window.location.reload();'>刷新重试</a>或重启浏览器" + msg, true);
        });
    }

    // region overload base function

    // region overload DOM provider

    this.getCommentItemTpl = function() {
        var str = '{for item in items}';
        str += "<li>";
        str += "    <p class=\"nick\">${item.poster.nickname|filterStr} <span>${item.posttime|getTimeDiff}</span></p>";
        str += "    <p class=\"desc\">${item.memo|filterStr}</p>";
        str += "</li>"
        str += "{forelse}";
        str += "<p class=\"mod_null c_txt2\">沙发空缺中，快去抢啊！<\/p>";
        str += "{/for}"
        return str;
    };

    this.getCommentPagerTpl = function() {
        var tpl = {};
        tpl.CONTENT = '{begin}{summary}{previous}{first}{prevdot}{pager}{next}';
        tpl.GO_PAGE_INPUT = "";
        tpl.FIRST_ENABLE = "";
        tpl.LAST_ENABLE = "";
        tpl.PAGE_NORMAL = "";
        tpl.PAGE_CURRENT = "";
        tpl.PREVDOT_ENABLE = "";
        tpl.NEXTDOT_ENABLE = "";
        tpl.PREVIOUS_ENABLE = '<a href="javaScript:void(0)" title="上一页" id="pager_previous_{id}">上一页</a>';
        tpl.PREVIOUS_DISABLE = '<span class="desc">上一页</span>';
        tpl.NEXT_ENABLE = ' <a href="javaScript:void(0)" title="下一页" id="pager_next_{id}">下一页</a>';
        tpl.NEXT_DISABLE = ' <span class="desc">下一页</span>';
        tpl.SUMMARY = '<span class="pager_val"><strong>{pagenum}</strong>/{totpage}</span>';
        tpl.BEGIN = '';
        return tpl;
    };

    /**
     * 评论每页显示数量
     */
    this.getCommentPageSize = function() {
        return 10;
    }
    this.isCommentUseCoverId = function() {
            return true;
        }
        /**
         * 初始化专辑介绍区域的标题点击事件
         */
    this.initCoverDescLink = function() {
        $(".mov_info a._info_link,.movie_info a._info_link").on("click", function(evt) {
            if (this.href == document.location.href) { // 跟当前的URL相同还点击个毛啊，直接回到顶部吧
                Live.dom.setScrollTop(0, document);
                Live.event.preventDefault(evt);
                return false;
            }
        });
    };

    // endregion overload DOM provider

    // region overload pay function

    /**
     * 绑定播放器更多的个性化事件
     * 
     * @override
     */
    this.attachMorePlayerEvt = function(player) {
        var $self = this;
        //if ($self.isOnlyPrevUser) { //未知原因 取消限制
        player.setting("flashWmode", "opaque");
        //}
        player.setting("flashVersionTag", "20141126");
        player.setting("loadingswf", "http://imgcache.qq.com/minivideo_v1/vd/res/skins/viploading.swf");

        function switchToFlash() {
            var that = $self;
            setTimeout(function() {
                that.playertype = "flash";
                txv.playdata.player = new tvp.Player();
                txv.playdata.player.setting("width", parseInt(that.playerInfo.width));
                txv.playdata.player.setting("height", parseInt(that.playerInfo.height));
                txv.playdata.player.setting("playerType", that.getPlayerType());

                if (!that.isPlayWithHistory()) {
                    txv.playdata.curVideo.setHistoryStart(0);
                }
                txv.playdata.curVideo.setPay(1);
                that.addPlayerCommonParam(txv.playdata.player);
                txv.playdata.player.setCurVideo(txv.playdata.curVideo);
                txv.playdata.player.output(that.playerModId);
            }, 150); //延迟切换 否则控件可能崩溃
        }
        // 监听控件播放器的消息
        player.onmsg = function(id, code) {

            if (player.getPlayerType() != "ocx") { // 不是控件还说啥啊，下面的事件是专门给控件用的
                return;
            }

            var isRpt = !!0; // 是否做数据上报
            switch (id) {
                // 得到预览原因
                case QQLive.DEFINE.MSG.OCX_EVT_PREVIEW_REASON:
                    {
                        // 如果不能完整的使用DRM观看，则切换到预览状态
                        if (code != 0) { // 0就不是预览了，0是可以完整观看
                            isRpt = !!1;
                            Live.tj2.button("cover.drm.prev_" + code);
                            var msg = "错误代码:1102_" + code;
                            $self.showCommonDrmErr("<br/>" + msg);
                            switchToFlash();
                            // $self.setNotPayDomStyle();
                        }
                        break;
                    }
                    // 控件DRM类的出错
                case QQLive.DEFINE.MSG.OCX_EVT_DRM_AUTHORIZE_RESULT:
                    {
                        isRpt = !!1;
                        if (code != 100) {
                            Live.tj2.button("cover.drm.err_" + code);
                            var msg = "错误代码:1106_" + code;
                            if (!isNaN(code)) {
                                code = parseInt(code, 10);
                            }
                            switch (code) {
                                case 8:
                                    {
                                        tvp.OcxPlayer.showNoticeTips(null, {
                                            title: "请重新校验您电脑的系统时间后，尝试重启浏览器观看影片",
                                            msg: msg
                                        });
                                        break;
                                    }
                                case 13:
                                    { // 设备初始化超过次数限制
                                        tvp.OcxPlayer.showNoticeTips(null, {
                                            title: "设备初始化超过次数，您可能在多台电脑上观看付费影片，请联系<a href='http://support.qq.com/write.shtml?fid=850' target='_blank'>客服处理</a>",
                                            msg: msg
                                        });
                                        break;
                                    }
                                case 16:
                                    { // IE保护模式修复失败
                                        tvp.OcxPlayer.showNoticeTips(null, {
                                            title: "请重新设置您的IE浏览器权限，具体流程请参考帮助页面 <a href='http://v.qq.com/help/film_1.html#19' target='_blank'>指引</a>",
                                            msg: msg
                                        });
                                        break;
                                    }
                                default:
                                    { // 其他的错误直接用普通的出错页面告知有问题啊，播不了啊
                                        //$self.showCommonDrmErr("<br/>" + msg);
                                        switchToFlash();
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                    // DRM获取超时
                case QQLive.DEFINE.MSG.OCX_DRM_GET_TIMEOUT:
                    {
                        // hasOcxErr = true;
                        Live.tj2.button("cover.drm.timeout");
                        isRpt = !!1;
                        //$self.showCommonDrmErr("<br/>错误代码:1107_TIMEOUT");
                        switchToFlash();
                        break;
                    }
            }

            // 如果要上报到服务端
            if (isRpt && !hasOcxErr) {
                $self.reportToTDB({
                    "uin": txv.login.getUin(),
                    "cmd": 2552, // 固定值
                    "type": id, // DRM出错的控件事件id
                    "host": document.location.host,
                    "url": encodeURIComponent(document.location.href),
                    "str1": code
                });
            }
        }

        // 普通的控件加载OK
        player.onocxok = function(id) {
            Live.tj2.button("cover.ocx.ok");
            $self.reportToTDB({
                "uin": txv.login.getUin(),
                "cmd": 2552, // 固定值
                "type": id, // 516
                "host": document.location.host,
                "url": encodeURIComponent(document.location.href)
            });
        }

        // 普通的控件出错
        player.onocxerror = function(code) {
            hasOcxErr = true;
            txv.log("ocxerror:[1002]" + code);
            var msg = "错误代码:1002_" + (isNaN(code) ? code : Math.abs(code));
            Live.tj2.button("cover.ocx.err_" + code);
            $self.reportToTDB({
                "uin": txv.login.getUin(),
                "cmd": 2552, // 固定值
                "type": 1002, // 固定值，DRM出错的控件事件id
                "host": document.location.host,
                "url": encodeURIComponent(document.location.href),
                "str1": code
            });
            if (!isNaN(code)) {
                code = parseInt(code, 10);
            }
            switch (code) {
                // IP限制
                case 5014:
                    {
                        $self.whileOcxErr(function() {
                            $self.showHTML5IPLimit();
                        });
                        break;
                    }
                    // 数字签名受损，一般是用户恶意自己修改dll
                case 9893:
                case 10001:
                case 9888:
                case -9888:
                    {
                        tvp.OcxPlayer.showNoticeTips(null, {
                            title: "请去官方网站下载最新版腾讯视频客户端。 <a href='http://v.qq.com/download.html' target='_blank'>点击下载</a>",
                            msg: msg
                        });
                        break;
                    }
                    // 数字签名受损，一般是用户恶意自己修改dll
                case 9285:
                    {
                        tvp.OcxPlayer.showNoticeTips(null, {
                            title: "请去官方网站下载安装最新版的directx。",
                            msg: msg
                        });
                        break;
                    }
                case 5305:
                case -5305:
                    {
                        tvp.OcxPlayer.showNoticeTips(null, {
                            title: "您的帐号同时在其他地方登录观看影片，请确认您的帐号是否安全。",
                            msg: msg
                        });
                        break;
                    }
                default:
                    {
                        //$self.showCommonDrmErr(msg);
                        switchToFlash();
                        break;
                    }
            }
        }
    }
    window.TMPL_TV = {
        UNLOGIN_NOFREE: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2" class="link">登录观看</a>全剧</p>',

        NOTVIP_NOFREE: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2" _hot="flash.playertips" class="link">开通好莱坞会员</a>看全剧</p>',
        VIP: '<p class="tips_txt">您已是好莱坞会员，免费观看全剧</p>'
    };
    this.getPlayerTvTips = function(payinfo) {
        $.ajax({
            "url": "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?auto_id=61&otype=json&cid=" + COVER_INFO.id,
            "dataType": "jsonp"
        }).always(function(json) {
            var freeUpdate = "全员免费观看",
                st = '';
            if (json && json.root && json.root[0]) {
                freeUpdate += json.root[0].payupdatetext.replace("N", json.root[0].payfreenum).replace("全免费", "全剧").replace("免费", "").replace("后", "最新");
            }
            TMPL_TV.UNLOGIN_FREE = '<p class="tips_txt">' + freeUpdate + '</p>';
            TMPL_TV.NOTVIP_FREE = '<p class="tips_txt">' + freeUpdate + '</p>';
            switch (payinfo.uinfo) {
                case txv.USER_STATUS.NOT_LOGIN:
                    if (isCurvideoFree()) {
                        st = TMPL_TV.UNLOGIN_FREE;
                    } else {
                        st = TMPL_TV.UNLOGIN_NOFREE;
                    }
                    break;
                case txv.USER_STATUS.ONLY_VIP:
                    st = TMPL_TV.VIP;
                    break;
                case txv.USER_STATUS.ONLY_LOGIN:
                    if (isCurvideoFree()) {
                        st = TMPL_TV.NOTVIP_FREE;
                    } else {
                        st = TMPL_TV.NOTVIP_NOFREE;
                    }
                    break;
                default:
                    break;
            }
            $("#mod_player").find(".player_tips_wrap").remove();
            if (!!st) {
                var tpl = '';
                tpl += '<div class="player_tips_wrap">';
                tpl += '    <iframe frameborder="0" class="iframe_mask"></iframe>';
                tpl += st;
                tpl += '</div>';
                $("#mod_player").append(tpl);
            }
        });
    }

    function isCurvideoFree() {
        return !$("#" + txv.playdata.curVideo.getFullVid()).data("payStatus");
    }
    this.initHBO = function() {
        if (COVER_INFO.typeid != 2) {
            return;
        }
        $.ajax({
            "url": "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?otype=json&auto_id=1631&cid=" + COVER_INFO.id,
            "dataType": "jsonp"
        }).done(function(json) {
            if (json) {
                var tpl = '';
                if (json.tag_4 && json.tag_4.param && json.tag_4.param.length > 0) {
                    tpl += '<span class="mark_sd">' + json.tag_4.text + '</span>';
                }
                if (json.tag_2 && json.tag_2.param && json.tag_2.param.length > 0) {
                    tpl += '<span class="' + json.tag_2.param + '">' + json.tag_2.text + '</span>';
                }
                $("#movie_img").append(tpl);
            }
        });

        var ajaxOption = {
            cid: COVER_INFO.id,
            tablist: "1",
            "playright": "2",
            "size": "60",
            "uin": txv.login.getUin(),
            "otype": "json"
        };



        $.when($.ajax({
            "url": "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?otype=json&auto_id=847&c_cover_id=" + COVER_INFO.id,
            "dataType": "jsonp"
        }), $.ajax({
            "url": "http://like.video.qq.com/fcgi-bin/recommand",
            data: ajaxOption,
            "dataType": "jsonp"
        })).done(function(season, hothbo) {
            season = season[0];
            hothbo = hothbo[0];
            if (season && season.list && season.list.length) {
                var tpl = "";
                for (var i = 0; i < season.list.length; i++) {
                    var d = season.list[i];
                    var playurl = d.play;
                    if (playurl.indexOf("/prev/") == -1) {
                        playurl = playurl.replace("v.qq.com", "film.qq.com");
                    }
                    tpl += '<li><a href="' + playurl + '" class="season_link" target="_blank" data-season="1" data-cid="' + d.cid + '">' + d.title + '</a></li>';
                }
                $("#mod_season").find("ul").html(tpl);
                $("#mod_season").show();
            }
            var hbofill = [];
            if (hothbo && hothbo.tablist && hothbo.tablist[0] && hothbo.tablist[0].cover_info) {
                for (var i = 0; i < hothbo.tablist[0].cover_info.length && hbofill.length < 6; i++) {
                    var data = hothbo.tablist[0].cover_info[i];
                    var cid = data.cid;
                    data.pic2url = data.pic2url.replace(/_h/, "_y");
                    if (cid == COVER_INFO.id || (data.pay_status == 8)) continue;
                    var inSeason = false;
                    if (season.list && season.list.length) {
                        for (var j = 0; j < season.list.length; j++) {
                            if (cid == season.list[j].cid) {
                                inSeason = true;
                                break;
                            }
                        }
                        if (!inSeason) {
                            hbofill.push(data);
                        }
                    } else {
                        hbofill.push(data);
                    }
                }
            }
            if (hbofill.length > 0) {
                var tpl = '';
                tpl += '<div class="film_show">';
                tpl += '    <ul class="movie_list" style="width:' + hbofill.length * 201 + 'px;">';
                for (var i = 0; i < hbofill.length; i++) {
                    var d = hbofill[i];
                    var link = ["/cover/", d.cid.charAt(0), "/", d.cid, ".html"].join("");
                    link += "?ptag=tv_promote"
                    tpl += '        <li data-type="hover" data-role="panel">';
                    tpl += '            <a href="' + link + '" target="_blank" _hot="cover.hbohot.pic" class="cover_wrap">';
                    tpl += '                <span class="a_cover">';
                    tpl += '                <img ' + (i > 6 ? '_' : '') + 'src="' + d.pic2url + '" class="cover" alt=""/>';
                    tpl += '                </span>';
                    if (d.tag_flag && d.tag_flag.tag_4 && d.tag_flag.tag_4.text) {
                        tpl += '                <span class="mark_sd">' + d.tag_flag.tag_4.text + '</span>';
                    }
                    tpl += '                <i class="icon_play"></i>';
                    tpl += '            </a>';
                    tpl += '            <a href="' + link + '" _hot="cover.hbohot.icon" class="mark_area">';
                    if (d.pay_status == 4) {
                        tpl += '                <i class="mark_vip_coupon">会员用券</i>';
                    } else if (d.pay_status == 8) {
                        tpl += '                <i class="mark_free_limit">限时免费</i>';
                    } else {
                        tpl += '                <i class="mark_vip_free">会员免费</i>';
                    }
                    tpl += '            </a>';
                    tpl += '            <h4 class="name"><a href="' + link + '" target="_blank" _hot="cover.hbohot.title">' + d.title + '</a><span class="film_score"><strong>' + d.c_score.slice(0, 1) + '</strong>.' + d.c_score.slice(-1) + '</span></h4>';
                    tpl += '            <p class="detail"><a href="' + link + '" target="_blank" _hot="cover.hbohot.title">' + d.subtitle + '</a></p>';
                    tpl += '        </li>';
                }
                tpl += '    </ul>';
                tpl += '</div>';
                if (hbofill.length > 6) {
                    tpl += '<a href="javaScript:void(0)" data-role="prev" class="arrow_pre">向前</a>';
                    tpl += '<a href="javaScript:void(0)" data-role="next" class="arrow_next">向后</a>';
                }
                $("#hbo_hot").html(tpl);
                $("#mod_hbohot").show();
                if (hbofill.length > 6) {
                    var SlIDER_CONFIG = {
                        triggerType: 'hover',
                        activeTriggerClass: 'current',
                        duration: 300,
                        lazyStr: '_src',
                        step: fm.common.scrollStep + 1
                    };
                    var sliders = $("#mod_hbohot").Slider(SlIDER_CONFIG);
                    //改变页面大小时重设翻页数量
                    if (typeof fm.common.changeBodyCb != "undefined") {
                        fm.common.changeBodyCb.add(function(type) {
                            for (var i = 0; i < sliders.length; i++) {
                                sliders[i].reload(fm.common.scrollStep + 1);
                            }
                        });
                    }
                }
            }
            if (hothbo && hothbo.zt && hothbo.zt.length) {
                for (var i = 0; i < hothbo.zt.length; i++) {
                    var d = hothbo.zt[i];
                    if (d.cid == COVER_INFO.id) {
                        //填专题
                        $("#zt").html("<a class='zt_link' _hot='cover.hbo.zt' href=" + d.link + " target='_blank' ><i class='icon_zt'></i>" + d.title + "</a>").show();
                        break;
                    }
                }
            }
        })
    }
    window.TMPL_WEB = {
        UNLOGIN: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-toggle="l_pay" class="link">开通会员</a>看完整影片</p>',
        NOTVIP_NOTICK: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2" _hot="flash.playertips" class="link">开通会员</a>用券免费看</p>',
        NOTVIP_HASTICK: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-type="buylink" _hot="flash.ticketbuy" _source="2" class="link">用券观看</a>完整影片</p>',
        NOTVIP_NONEEDBUY: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2" _hot="flash.playertips" class="link">开通会员</a>看完整版</p>',
        VIP_HASTICK: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-type="buylink" _source="2" _hot="flash.ticketbuy" class="link">用券观看</a>完整影片</p>',
        VIP_NOTICK: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2" _hot="flash.playertips" class="link">续费好莱坞会员</a>用券免费看</p>',
        VIP_NONEEDBUY: '<p class="tips_txt">您已是好莱坞会员，免费观看本片</p>',
        UNLOGIN_NEEDPAY: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-toggle="l_pay" class="link">开通会员</a>半价购买看完整版</p>',
        VIP_NEEDPAY_HASPAY: '<p class="tips_txt">您已购买该部影片，可完整观看</p>',
        VIP_NEEDPAY_NOTPAY: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-type="moneybuy" class="link">会员半价购买</a>看完整版</p>',
        VIP_NEEDPAY_NOTPAY_NO_DISCOUNT: '<p class="tips_txt">可试看5分钟，<a href="javaScript:void(0)" data-type="moneybuy" class="link">' + PAY_INFO.price + '元点播看完整版</a></p>'
    };

    //非vip会员调用
    function bindVipAccount(hintOther, callback) {
        hlw_account_relate.getBindAccount(function(json_msg) {
            var hint = "";
            var payinfo = __tenplay_getpayinfo();
            if (json_msg.isVip && json_msg.isVip == 1) {
                var accountType = "QQ帐号";
                hint = ["QQ帐号", json_msg.account_id].join('');
                if (json_msg.bind_type && json_msg.bind_type == "wx") {
                    hint = '绑定的微信账号';
                }
                tpl = '<p class="tips_txt">试看5分钟，<a href="javaScript:;" class="link" id="btn_vip_account_change">切换</a>' + hint + '看完整版</p>';
                if (txv.USER_STATUS.ONLY_LOGIN == payinfo.uinfo) {
                    callback && callback(tpl);
                    $e(document).undelegate("#btn_vip_account_change", "click");
                    $e(document).delegate("#btn_vip_account_change", "click", function(evt) {
                        //由于公用了一个mask，打开登录时隐藏其他浮层，就是隐藏自己
                        if (hideBasePayTip) {
                            $j(this).parents(".pop_wrap").remove();
                            $j(this).parents(".mod_play_layer").remove();
                        }
                        txv.login.openLogin({
                            "success": function() {
                                setTimeout(function() {
                                    window.location.reload();
                                }, 1000);
                            }
                        });
                    });
                } else {
                    callback && callback(hintOther);
                }
            } else {
                callback && callback(hintOther);
            }
        }, function() {
            callback && callback(hintOther);
        });
    }

    //播放器上文案
    this.initPlayerTips = function() {
            var payinfo = __tenplay_getpayinfo();
            var infoPrice = {
                vipprice: PAY_INFO.vipprice,
                single: PAY_INFO.price
            };
            if (COVER_INFO.typeid == 2) {
                if (PAY_INFO.status != 8) {
                    this.getPlayerTvTips(payinfo);
                }
            } else {
                var st = '';
                switch (payinfo.uinfo) {
                    case txv.USER_STATUS.NOT_LOGIN:
                        if (payinfo.vinfo == 7) {
                            if (PAY_INFO.vipprice == PAY_INFO.price) {
                                st = TMPL_WEB.VIP_NEEDPAY_NOTPAY_NO_DISCOUNT;
                            } else {
                                st = TMPL_WEB.UNLOGIN_NEEDPAY;
                            }

                        } else {
                            st = TMPL_WEB.UNLOGIN;
                        }
                        break;
                    case txv.USER_STATUS.ONLY_VIP:
                        if (payinfo.vinfo == 7) {
                            if (txv.playdata.isBuy) {
                                st = TMPL_WEB.VIP_NEEDPAY_HASPAY;
                            } else {
                                if (PAY_INFO.vipprice == PAY_INFO.price) {
                                    st = TMPL_WEB.VIP_NEEDPAY_NOTPAY_NO_DISCOUNT;
                                } else {
                                    st = TMPL_WEB.VIP_NEEDPAY_NOTPAY;
                                }
                            }
                        } else if (payinfo.vinfo == 4) {
                            if (payinfo.ticketnum > 0) {
                                st = TMPL_WEB.VIP_HASTICK;
                            } else {
                                st = TMPL_WEB.VIP_NOTICK;
                            }
                        } else {
                            st = TMPL_WEB.VIP_NONEEDBUY;
                        }
                        break;
                    case txv.USER_STATUS.ONLY_LOGIN:
                        if (payinfo.vinfo == 7) {
                            if (txv.playdata.isBuy) {
                                st = TMPL_WEB.VIP_NEEDPAY_HASPAY;
                            } else {
                                if (PAY_INFO.vipprice == PAY_INFO.price) {
                                    st = TMPL_WEB.VIP_NEEDPAY_NOTPAY_NO_DISCOUNT;
                                } else {
                                    st = TMPL_WEB.UNLOGIN_NEEDPAY;
                                }
                            }
                        } else if (payinfo.vinfo == 4) {
                            if (payinfo.ticketnum > 0) {
                                st = TMPL_WEB.NOTVIP_HASTICK;
                            } else {
                                st = TMPL_WEB.NOTVIP_NOTICK;
                            }
                        } else {
                            st = TMPL_WEB.NOTVIP_NONEEDBUY;
                        }
                        break;
                    default:
                        break;
                }

                $("#mod_player").find(".player_tips_wrap").remove();
                if (st.indexOf('看0分钟') > -1) {
                    st = '';
                }

                if (st.indexOf('试看') > -1 && $j.util.getUrlParam('show_mask') != 1 && typeof window.abtest == "undefined") {
                    $j.ajax({
                        "url": "http://sns.video.qq.com/fcgi-bin/dlib/dataout?auto_id=1741&otype=json",
                        "dataType": "jsonp",
                        "cache": true,
                        "success": function(json) {
                            if (json && json.testlist) {
                                for (var i = 0, len = json.testlist.length; i < len; i++) {
                                    if (json.testlist[i].c_cover_id == COVER_INFO.id) {

                                        $j.ajax({
                                            "url": "http://aid.video.qq.com/fcgi-bin/userip?otype=json",
                                            "dataType": "jsonp",
                                            "cache": true,
                                            "success": function(json1) {
                                                if (json1 && json1.ip && (json1.ip[json1.ip.length - 1] % 2 == 0)) {
                                                    location.href = "http://film.qq.com/cover/" + COVER_INFO.id[0] + '/' + COVER_INFO.id + '/' + json.testlist[i].vid + '.html?show_mask=1';
                                                }

                                            }
                                        });
                                        break;
                                    }
                                }
                            }

                        }
                    });
                }

                if ($j.util.getUrlParam('show_mask') == 1) {
                    this.reportToTDB({
                        "uin": txv.login.getUin(),
                        "cmd": 2552, // 固定值
                        "type": 911,
                        "host": document.location.host,
                        "url": encodeURIComponent(document.location.href)
                    });
                    window.abtest = true;
                    if (!txv.login.isLogin()) {
                        st = '<p class="tips_txt">正在观看预告片，<a href="javaScript:void(0)" data-toggle="l_pay" class="link">开通会员</a>看完整影片</p>';
                    } else {
                        st = '<p class="tips_txt">正在观看预告片，<a href="javaScript:void(0)" data-amount="3" data-toggle="l_pay" _source="2"  _hot="flash.playertips" class="link">开通会员</a>看完整版</p>';
                    }
                } else if (st.indexOf('试看') > -1) {
                    this.reportToTDB({
                        "uin": txv.login.getUin(),
                        "cmd": 2552, // 固定值
                        "type": 910,
                        "host": document.location.host,
                        "url": encodeURIComponent(document.location.href)
                    });
                } else {
                    $('.btn_switch').click();
                }


                if (!!st && this.getPlayerType() != "ocx") {
                    var tpl = '';
                    tpl += '<div class="player_tips_wrap">';
                    tpl += '    <iframe frameborder="0" class="iframe_mask"></iframe>';
                    tpl += st;
                    tpl += '</div>';
                    $("#mod_player").append(tpl);
                    if (txv.playdata.curVideo.getBullet()) {
                        $(".player_tips_wrap").addClass('player_tips_wrap_barrage');
                    } else {
                         $(".player_tips_wrap").removeClass('player_tips_wrap_barrage');
                    }
                    /*bindVipAccount(st, function(st_msg) {
                        tpl += '<div class="player_tips_wrap">';
                        tpl += '    <iframe frameborder="0" class="iframe_mask"></iframe>';
                        tpl += st_msg;
                        tpl += '</div>';
                        $("#mod_player").after(tpl);
                        if (txv.playdata.curVideo.getBullet()) {
                            $(".player_tips_wrap").addClass('player_tips_wrap_barrage');
                        } else {
                            $(".player_tips_wrap").removeClass('player_tips_wrap_barrage');
                        }
                    });*/
                }
            }
        }
        //当控件出错时使用flash播放
    this.whileOcxErr = function(unMatchFn) {
            this.isOcxErr = true;
            try {
                stats.speed.setFlag({
                    "7": logger.elapsed('init player')
                }).report();
            } catch (e) {}
            var that = this;
            setTimeout(function() {
                that.playertype = "flash";
                txv.playdata.player = new tvp.Player();
                txv.playdata.player.setting("width", parseInt(that.playerInfo.width));
                txv.playdata.player.setting("height", parseInt(that.playerInfo.height));
                txv.playdata.player.setting("playerType", that.getPlayerType());

                if (!that.isPlayWithHistory()) {
                    txv.playdata.curVideo.setHistoryStart(0);
                }
                txv.playdata.curVideo.setPay(1);
                that.addPlayerCommonParam(txv.playdata.player);
                txv.playdata.player.setCurVideo(txv.playdata.curVideo);
                txv.playdata.player.output(that.playerModId);
            }, 100); //延迟切换 否则控件可能崩溃
        }
        /**
         * 获取当前应该用什么播放器
         * 
         * @override
         */
    this.getPlayerType = function() {
        if (!txv.login.isLogin())
            return "auto";
        if ($j.util.useHtml5())
            return "html5";
        return this.playertype;
    }

    this.getCommentPayType = function() {
        return 1;
    }
    this.popstatecb = function(vid) {
            if (typeof LANG_INFO != "undefined") {
                for (var a in LANG_INFO) {
                    if (LANG_INFO[a].vid == vid) {
                        var vinfo = LANG_INFO[a];
                        var pt = 0;
                        var p = txv.playdata.player;
                        if (typeof tvp.VideoInfo == "function" && typeof p.getPlaytime == "function") {
                            pt = parseInt(p.getPlaytime());
                        }
                        var playurl = [window.location.protocol, "//", window.location.host, txv.common.rootPath, "/cover/", COVER_INFO.id.charAt(0), "/", COVER_INFO.id, "/", vinfo.vid, ".html"].join("");
                        txv.playdata.curVideo.clear();
                        txv.playdata.curVideo = new tvp.VideoInfo();
                        txv.playdata.curVideo.setVid(vinfo.vid);
                        txv.playdata.curVideo.setTitle(vinfo.title);
                        txv.playdata.curVideo.setCoverId(COVER_INFO.id);
                        txv.playdata.curVideo.setPay(1);
                        if (pt > 0) {
                            txv.playdata.curVideo.setHistoryStart(pt);
                        }
                        p.play(txv.playdata.curVideo);
                        break;
                    }
                }
            }
        }
        /**
         * 会员是否也需要购买
         */
    this.isNeedVipPay = function() {
        if (!PAY_INFO.isreal)
            return false;
        if ((PAY_INFO.status == txv.PAY_STATUS.SINGLE || PAY_INFO.status == txv.PAY_STATUS.PAY_ONLY) && PAY_INFO.vipprice != "0.00") {
            return true;
        }
        return false;
    }
    var pay_report_url = 'http://pay.video.qq.com/fcgi-bin/payreport';

    function pay_report_dj(reportParams) {

        var img = new Image();
        var data = '';

        $.each(reportParams, function(key, val) {
            data += (key + '=' + val + '&');
        });

        data += ('rand=' + Math.random());

        img.src = pay_report_url + '?' + data;
    }
    /**
     * 获取支付页URL
     */
    this.getPayUrl = function(cid) {
        return "/pay/index.html?id=" + cid;
    };
    this.openPayCenter = function() {

        if (Live.login.getLoginType() == 'wx') {
            $('body').append(
                '<div class="pop_wrap pop_wrap_v2 pop_wrap_qr" style="position: relative;top: 0;left: 0; opacity: 1;" id="qr_buy">' + '<div class="pop_play">' + '<div class="title"><a href="javascript:" class="close" data-type="closetip">关闭</a></div>' + '<div class="ly_bd cf">' + '<div class="ly_ct">' + '<div class="qr_list">' + '<h3 class="qr_tit">正在为微信帐号<span class="user">' + Live.login.getWxNick() + '</span> 购买影片<span class="name">《<span class="name_inner">' + COVER_INFO.title + '</span>》</span></h3>' + '<div class="qr_pic">' + '<img id="buy_qr" alt="">' + '<span class="icon_wx"></span>' + '</div>' + '<p class="qr_txt">使用微信扫描二维码</p>' + '<p class="qr_tips">请使用当前登录的微信扫码支付</p>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>    ');
            txv.login.showMask('qr_buy', 0, 0, 0);
            var pop = getElementById("qr_buy")
            txv.login.showCenterNobg(pop);
            txv.login.ie6hook(pop);

            function payQrimgSrc(param) {
                var extendparam = (param != 0) ? 'qqbrowseract' : '';
                $.pay_qrimg({
                    id: 'buy_qr',
                    pay_type: 1,
                    use_ws: true,
                    extendparam: extendparam,
                    pay_suc: function() {
                        $('#qr_ticket_buy .qr_txt').html('支付成功');
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    },
                    scan_suc: function() {
                        $('#qr_buy .qr_txt').html('扫描成功');
                        $('#qr_buy .qr_tips').html('请在手机上完成支付');
                    }
                });
            }
            if (!txv.playdata.isVip) {
                isQQBrowser(payQrimgSrc);
            } else {
                payQrimgSrc(0);
            }
            return;
        }
        txv.login.showMask();
        seajs.use("hw.paycenter", function(paycenter) {
            var bought = false,
                isFirstBuy = false;
            var timestamp = new Date().getTime();
            paycenter.off("success").on("success", function() {
                bought = true;
                pay_report_dj({
                    plat: 0,
                    step: 6,
                    uin: txv.login.getUin(),
                    code_1: 0,
                    type: 2,
                    payitem: '1*' + COVER_INFO.id
                });
            }).off("close").on("close", function() {
                Live.cookie.del("yhhwd_" + Live.login.getUin());
                if (!bought) {
                    ////pay_report_dj({plat:0,step:7,uin:txv.login.getUin(),type:2,payitem:'1*'+COVER_INFO.id});
                }
                if (bought && !txv.playdata.isVip) {
                    //取低价
                    var defer = $.Deferred().always(function(json) {
                        if (json && json.favor_money) {
                            lowPriceVip = json.favor_money / 100;
                        }
                        lowPriceVip = Math.min(20 - PAY_INFO.price, lowPriceVip);
                        $me.showYHHWD(lowPriceVip);
                    });
                    $me.checkIsBuy(defer);
                } else {
                    bought && setTimeout(function() {
                        window.location.reload();
                    }, 1000);
                    txv.login.hideMask();
                }
            }).off("cancel").on("cancel", function() {
                txv.login.hideMask();
                pay_report_dj({
                    plat: 0,
                    step: 7,
                    uin: txv.login.getUin(),
                    type: 2,
                    payitem: '1*' + COVER_INFO.id
                });
            }).off("priceerr").on("priceerr", function(e, data) {
                if (data.code == -11) {
                    txv.login.openLogin();

                } else {
                    txv.login.hideMask();
                    showErrTips("支付失败", "错误码：" + data.code, "错误信息:" + data.msg, "确定", "-500", true);
                }
                //pay_report_dj({plat:0,step:1,uin:txv.login.getUin(),type:2,code_1:data.code,  msg:data.msg,payitem:'1*'+COVER_INFO.id});
            }).off("frameload").on("frameload", function() {
                pay_report_dj({
                    plat: 0,
                    step: 1,
                    uin: txv.login.getUin(),
                    type: 2,
                    payitem: '1*' + COVER_INFO.id
                });
            }).show({
                "coverid": COVER_INFO.id,
                "sandbox": false
            });

        });
    };
    this.showYHHWD = function(price) {
        Live.cookie.set("yhhwd_" + Live.login.getUin(), "1", "film.qq.com", "/", 365 * 24);
        if ($("#__frm_yhhwd").size() > 0) {
            return;
        }
        $("body").append('<iframe src="http://film.qq.com/iframe/open.html?mid=731&price=' + price + '" width="500px" height="330px" frameborder="0" scrolling="no" onload="shown_yhhwd();" id="__frm_yhhwd" allowtransparency="yes"></iframe>')
    }
    window.shown_yhhwd = function() {
        $.util.showAtCenter("#__frm_yhhwd");
        Live.login.showMask();
    }
    window.__closeIframe = function() {
        if (needrefresh) {
            window.location.reload();
        } else {
            $("#__frm_yhhwd").remove();
            Live.login.hideMask();
        }
    }
    this.openPayByLogin = function() {
            //if (Live.login.getLoginType() == 'qq' && !txv.login.isStrongLogin()) {
            //  $j("#mod_player").off("checkvipend").on("checkvipend",function(){
            //      if($me.isOnlyPrevUser && Live.login.getLoginType() == 'qq'){
            //          $me.openPayCenter();
            //      }
            //      if(!$me.isOnlyPrevUser){
            //          window.location.reload();
            //      }
            //  });
            //  $me.openPayCenter();
            //}
            //else 
            if (Live.login.getLoginType()) {
                $me.openPayCenter();
            } else {
                txv.login.openPayLogin({
                    pay_type: 1,
                    pay_suc: function() {
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    },
                    success: function() {
                        $j("#mod_player").off("checkvipend").on("checkvipend", function() {
                            if ($me.isOnlyPrevUser && Live.login.getLoginType() == 'qq') {
                                $me.openPayCenter();
                            }

                            if (!$me.isOnlyPrevUser && Live.login.getLoginType() == 'wx') {
                                txv.login.bye_login();
                            }
                        });

                    }
                });
            }
        }
        /**
         * 会员点播
         */
    this.setVipPayOnly = function(cb) {
            var $self = this,
                tpl = {
                    needPay: '<div class="mod_side_vip">' + '     <div class="tit_buy">' + '         <p class="tit">您已是好莱坞会员，可半价购买观看完整影片</p>' + '     </div>' + '     <div class="btn_1row">' + '        <a href="javaScript:void(0)" class="btn_demand"  data-type="moneybuy" _hot="cover.page.buy">{vipprice}元购买单片<span class="ori_price"> (<span class="num">原价{singleprice}元</span>)</span></a> ' + '     </div>' + '     <div class="line_v"></div>' + '     <div class="buy_txt cf" id="vip_price_hint"><a href="javaScript:void(0)" data-type="moneybuy" _hot="cover.page.buy" class="link">会员半价&nbsp;&nbsp;{vipprice}元单片购买</a></div>' + ' </div>',
                    needPayNoDicount: '<div class="mod_side_vip">' + '     <div class="tit_buy">' + '         <p class="tit">本片为付费视频，可购买单片观看</p>' + '     </div>' + '     <div class="btn_1row">' + '        <a href="javaScript:void(0)" class="btn_demand"  data-type="moneybuy" _hot="cover.page.buy">{singleprice}元购买单片</a> ' + '     </div>'
                        // + '     <div class="line_v"></div>'
                        // + '     <div class="buy_txt cf"><a href="javaScript:void(0)" data-type="moneybuy" _hot="cover.page.buy" class="link">{singleprice}元购买单片</a></div>'
                        + ' </div>'

                };
            var $vip = $e("#vip_pay"),
                $single = $e("#single_pay");
            var $vipprice = $vip.find("#vip_price");
            var $vipopen = $e("#vip_open");
            var infoJson = {},
                str = tpl.needPay;
            if (PAY_INFO.vipprice == PAY_INFO.price) {
                str = tpl.needPayNoDicount;
            }
            infoJson = {
                url: "javaScript:void(0)",
                vipprice: PAY_INFO.vipprice,
                singleprice: PAY_INFO.price,
                isVip: txv.playdata.isVip
            }
            if (typeof cb == "function") {
                cb();
            }
            if (txv.playdata.isVip) {
                $vip.html(QZFL.string.format(str, infoJson));
                $("#vip_price_hint").hide();
            }

            if (PAY_INFO.vipprice == PAY_INFO.price) {
                $("#copy_limit").show();
            }
            var aid = $j.pay({
                aid_version: 'V0',
                key4: 9,
                key11: 2,
                _scene: 2
            }, "aid");
            $.pay_qrimg({
                id: 'qrimg',
                type: 0,
                use_ws: false,
                aid: aid
            });
        }
        /**
         * 设置畅享券提示
         */
    this.setVipTicket = function(cb) {
            var $self = this,
                tpl = {
                    hasTicket: '<div class="mod_side_vip">' + '     <div class="tit_buy">' + '          <p class="tit">您已是好莱坞会员</p>' + '            <p class="tit">剩余观影券<span class="num txt_red">{num}</span>张，用券可观看完整影片</p>' + '      </div>' + '     <div class="btn_1row">' + '        <a href="javaScript:void(0)" class="btn_look"  data-type="buylink" _hot="cover.page.openvip">用观影券观看</a> ' + '        </div>' + '     <div class="line_v"></div>' + '     <p class="buy_txt"><a href="javaScript:void(0)" data-type="moneybuy" _hot="cover.page.buy" class="link">会员价{vipprice}元单片购买</a></p>' + ' </div>',
                    wxNoTicket: '<div class="mod_side_vip mod_side_vipwx">' + '<div class="tit_price">' + ' <p class="tit">您已是好莱坞会员</p> ' + '   <p class="tit">剩余观影券<span class="num txt_red">0</span>张，续费可立刻获赠券看完整影片</p>  ' + '<p class="price">最低<span class="num txt_red">12.5</span>元/月 </p>' + '</div>' + '<dl class="qr_list wx cf">' + '<dt>' + '<span class="qr_pic"><span class="icon_wx1"></span>' + '<img id="qrimg" class="QR_img" alt="" >' + '</span>' + '</dt>' + '<dd>' + '<p class="qr_txt">请使用当前登录的微信扫码支付，<a class="txt" href="javaScript:void(0)" data-type="wxok">支付完成</a></p>' + '</dd>' + '</dl>' + '<div class="line_v"></div>' + '<p class="buy_txt wx"><a href="javaScript:void(0)" class="link " data-type="moneybuy" _hot="cover.page.buy">会员价{vipprice}元单片购买</a></p>'

                        + '</div>',
                    noTicket: '<div class="mod_side_vip">' + '      <div class="tit_buy">' + '          <p class="tit">您已是好莱坞会员</p> ' + '           <p class="tit">剩余观影券<span class="num txt_red">0</span>张，续费可立刻获赠券看完整影片</p>  ' + '        </div>' + '     <div class="btn_1row">' + '        <a href="{url}" class="btn_vip" target="_blank" data-toggle="l_pay" _source="9" _hot="cover.page.openvip">续费好莱坞会员</a> ' + '      </div>' + '     <dl class="qr_list cf">' + '            <dt>' + '               <span class="qr_pic">' + '                  <img id="qrimg" alt="">' + '                </span>' + '            </dt>' + '          <dd>' + '               <p class="qr_txt">微信支付开通好莱坞会员</p>' + '              <p class="qr_txt">(<a href="javaScript:void(0)" data-type="wxok"  class="link">已完成支付</a>)</p>' + '          </dd>' + '      </dl>' + '      <div class="line_v"></div><p class="buy_txt"><a href="javaScript:void(0)" class="link" data-type="moneybuy" _hot="cover.page.buy">会员价{vipprice}元单片购买</a></p>' + '   </div>',
                    needPay: '<div class="mod_side_vip">' + '     <div class="tit_buy">' + '         <p class="tit">您已是好莱坞会员，可半价购买观看完整影片</p>' + '     </div>' + '     <div class="btn_1row">' + '        <a href="javaScript:void(0)" class="btn_demand"  data-type="moneybuy" _hot="cover.page.buy">{vipprice}元购买单片<span class="ori_price"> (<span class="num">原价{singleprice}元</span>)</span></a> ' + '     </div>' + '     <div class="line_v"></div>' + '     <div class="buy_txt cf" id="vip_price_hint"><a href="javaScript:void(0)" data-type="moneybuy" _hot="cover.page.buy" class="link">会员半价&nbsp;&nbsp;{vipprice}元单片购买</a></div>' + ' </div>',
                    needPayNoDicount: '<div class="mod_side_vip">' + '     <div class="tit_buy">' + '         <p class="tit">本片为付费视频，可购买单片观看</p>' + '     </div>' + '     <div class="btn_1row">' + '        <a href="javaScript:void(0)" class="btn_demand"  data-type="moneybuy" _hot="cover.page.buy">{singleprice}元购买单片</a> ' + '     </div>' + '     <div class="line_v"></div>' + '     <div class="buy_txt cf"><a href="javaScript:void(0)" data-type="moneybuy" _hot="cover.page.buy" class="link">{singleprice}元购买单片</a></div>' + ' </div>'

                };
            getVipTicketJson(function(json) {
                var $vip = $e("#vip_pay"),
                    $single = $e("#single_pay");
                var $vipprice = $vip.find("#vip_price");
                var $vipopen = $e("#vip_open");
                var num = 0,
                    infoJson = {},
                    str = tpl.hasTicket;
                if (PAY_INFO.status == 7) {
                    if (PAY_INFO.vipprice == PAY_INFO.price) {
                        str = tpl.needPayNoDicount;
                    } else {
                        str = tpl.needPay;
                    }
                }
                if (!!json) {
                    num = parseInt(json.vip_tt, 10) + parseInt(json.watch_tt, 10);
                    num = num ? num : 0;
                }
                ticketNum = num;
                infoJson = {
                    num: num,
                    url: "javaScript:void(0)",
                    vipprice: PAY_INFO.vipprice,
                    singleprice: PAY_INFO.price,
                    isVip: txv.playdata.isVip
                }
                if (typeof cb == "function") {
                    cb();
                }
                if (num == 0 && PAY_INFO.status != 7) {
                    str = tpl.noTicket;
                    if (Live.login.getLoginType() == 'wx') {
                        str = tpl.wxNoTicket;
                    }
                }
                if (txv.playdata.isVip) {
                    $vip.html(QZFL.string.format(str, infoJson));
                    $("#vip_price_hint").hide();
                }

                if (PAY_INFO.vipprice == PAY_INFO.price) {
                    $("#copy_limit").show();
                }
                var aid = $j.pay({
                    aid_version: 'V0',
                    key4: 9,
                    key11: 2,
                    _scene: 2
                }, "aid");
                //var url = "http://pay.qq.com/h5/index.shtml?m=buy&wechat=1&pf=2007&showwxpaytitle=1&c=txsp&n=3&u="+txv.login.getUin()+"&aid="+encodeURIComponent(aid);
                //var url = "http://film.qq.com/weixin/wxpay.html?showwxpaytitle=1&c=txsp&n=3&u="+txv.login.getUin()+"&aid="+encodeURIComponent(aid);
                //$j("#qrimg").attr("src","http://sns.video.qq.com/tvideo/fcgi-bin/qrencode?size=150&url="+encodeURIComponent(url));

                $.pay_qrimg({
                    id: 'qrimg',
                    type: 0,
                    use_ws: false,
                    aid: aid
                });
            });
        }
        /**
         * 非会员有券，各种活动推出来的
         */
    this.noVIPHasTic = function(cb) {
        getVipTicketJson(function(json) {
            var num = 0;
            if (!!json) {
                num = parseInt(json.vip_tt, 10) + parseInt(json.watch_tt, 10);
                num = num ? num : 0;
            }
            ticketNum = num;
            if (typeof cb == "function") {
                cb(num);
            }
        });
    }
    this.getUserTicket = function() {
        return ticketNum;
    }
    this.setUserTicket = function(num) {
            ticketNum = num;
        }
        /**
         * 设置购买后的各种DOM表现
         */
    this.setPayDomStyle = function(json) {
            json = json || buyJson;
            var movieendtime = "",
                vipendtime = "",
                $single = $e("#single_pay"),
                $vip = $e("#vip_pay");
            if (typeof json != "undefined" && typeof json.end == "string" && json.end.length > 3) {
                movieendtime = json.end.substring(0, json.end.length - 3);
            }
            // 传入值一般都是购买的json
            vipJson = vipJson || json;
            if (typeof vipJson != "undefined" && typeof vipJson.endTime == "string" && vipJson.endTime.length > 3) {
                vipendtime = vipJson.endTime.substring(0, 10);
            }
            if (vipJson.servicetype == 'HLWHF' && vipJson.endmsg) {
                vipendtime = vipJson.endmsg;
            }
            //电视剧付费
            if (COVER_INFO.typeid == 2) {
                $("#mod_paystatus").find("[data-modtype='novip']").remove();
                $("#mod_paystatus").find("[data-modtype='vip']").remove();
                $("#mod_videolist").find(".album_vip_free").hide();
                var tpl = '';
                tpl += '<div class="tabcont_vip" data-modtype="vip">';
                tpl += '    <p class="info_tit">您已是好莱坞会员，可免费观看全剧</p>';
                tpl += '    <p class="info_txt">好莱坞会员到期时间：<span class="txt_red">{endtime}</span>';
                tpl += '        <a href="javaScript:void(0)" _hot="cover.tvpage.renew" data-amount="3" data-toggle="l_pay" _source="9"  class="link_underline">立即续费</a>';
                tpl += '    </p>';
                tpl += '</div>';
                $("#mod_paystatus").append(tpl.replace("{endtime}", vipendtime));
            } else {
                // $vip.addClass("price_box_free");
                if (txv.playdata.isVip) {
                    if (this.isNeedVipPay()) {
                        $vip.html(paySucTpl.pay.replace("{endtime}", movieendtime));
                    } else {
                        $vip.html(paySucTpl.vipfree.replace("{endtime}", vipendtime));
                    }
                } else {
                    $vip.html(paySucTpl.pay.replace("{endtime}", movieendtime));
                }
                $single.hide();
                $vip.show();
            }
        }
        /**
         * 未支付时dom展现
         */
    this.setNotPayDomStyle = function() {
            var vip_pay = $e("#vip_pay");
            if (!(txv.playdata.isVip && this.isNeedVipPay())) {
                $e("#single_pay").show();
                vip_pay.show();
            }
            if (Live.login.getLoginType()) {
                if (!txv.playdata.isVip) {
                    isQQBrowser(modSidePrice);
                }

                function modSidePrice(param) {
                    if (param != 0) {
                        var disPrice = param.price || "300";
                        disPrice = (disPrice / 100).toFixed(2);
                        vip_pay.find(".buy_txt").replaceWith("<div class='qe_info'><p class='qe_tit'>QQ浏览器用户专享优惠</p><p class='qe_link'><a href='javascript:;'' class='link' data-type='moneybuy' _hot='cover.page.buy'>" + disPrice + "元单片购买（原价：<span class='or_price'>" + PAY_INFO.price + "元</span>）</a></p></div>");
                    } else {
                        vip_pay.find("[data-type='moneybuy']").html(PAY_INFO.price + "元单片购买");
                    }
                }
                if (Live.login.getLoginType() == 'wx') {
                    $('.btn_vip').css('display', 'none');
                    //if(vip_pay.find(".buy_txt").length != 0 && vip_pay.find(".buy_txt a[data-type='change_qq']").length == 0){
                    //  vip_pay.find(".buy_txt").append('<a href="javaScript:void(0)" class="change" data-type="change_qq">切换至QQ账号</a>').append('<span class="line">|</span>');
                    //  vip_pay.find(".link").addClass('link_rt');
                    //}
                    //else{
                    //  if(vip_pay.find(".buy_txt a[data-type='change_qq']").length == 0){
                    //      vip_pay.find('.mod_side_vip').append('<div class="buy_txt cf"><a href="javaScript:void(0)" class="change" data-type="change_qq">切换至QQ账号</a></div>');
                    //  }
                    //}
                    var mod = $('.mod_side_vip', vip_pay);
                    mod.addClass('mod_side_vipwx');
                    var qr_list = $('.qr_list ', vip_pay);
                    qr_list.addClass('wx');
                    $('.btn_tips', vip_pay).addClass('wx');
                    if (mod.find("a[data-type='change_qq']").length == 0) {
                        mod.append('<div class="change_txt cf"><a href="javaScript:void(0)" class="change" data-type="change_qq">切换至QQ账号</a> </div>');
                    }
                    $('.mod_side_vip .qr_pic').prepend('<span class="icon_wx1"></span>');
                }
            }
        }
        /**
         * drm视频在mac等不能播的平台上的提示
         */
    this.setSystemUnMatch = function() {
            var $vip = $e("#vip_pay");
            $e("#single_pay").hide();
            $vip.addClass("price_box_free");
            $vip.html("<h3 class=\"title title_tips\">由于版权限制，当前付费视频暂时只支持Windows操作系统，请在相关设备上观看</h3>");
            $vip.show();
        }
        /**
         * 显示当前设备由于版权限制不支持 MAC电脑上暂时不支持播放该视频，请去windows环境播放。
         */
    this.showMobileDeviceCannotPlay = function() {
            //mac下用html5播放
            if (!!PAY_INFO.macdrm) {
                $me.playertype = "flash";
            } else {
                var tips = "该影片暂时不支持非windows系统下观看，请去windows系统下付费观看该影片",
                    tpl = "{tips}";
                // if (QZFL.userAgent.macs) {
                // tips = "该影片暂时不支持mac系统下观看，请去window系统下付费观看该影片。";
                // }
                this.showHtml5CannotPay(tpl.replace("{tips}", tips));
                $e("#vip_pay").html('<div class="price_box"><h3 class="title">该影片暂不支持在此电脑上播放！</h3></div>');
                this.setNotPayDomStyle(); // 设置为未支付的DOM表现，隐藏各种支付的按钮
                Live.tj2.button("cover.drm.mobile_forbidden"); // 上报被阻挡的统计
            }
        }
        /**
         * 电影网的要上报
         */
    this.reportToMu = function() {
        if (COVER_INFO.copyright == 290 && typeof hex_md5 != "undefined") {
            var now = Math.round(new Date().getTime() / 1000);
            var logid = txv.playdata.curVideo.getVid() + "_" + txv.login.getUin() + "_" + now + "_" + Math.random();
            var playtype = 1;
            if (txv.playdata.isVip && PAY_INFO.status != txv.PAY_STATUS.SINGLE) {
                playtype = 2;
            }
            var str = "itemid=" + COVER_INFO.id + "&itemname=" + COVER_INFO.title + "&partnerid=tencent&playlogid=" + logid + "&playtime=" + now + "&playtype=" + playtype + "&qzreferrer=" + window.location.href + "&userid=" + txv.login.getUin() + "eef800d7fb0557c5778e4a324a25ca1f";
            $j.ajax({
                url: "http://mu.m1905.com/index.php/index/playLog",
                data: {
                    "partnerid": "tencent",
                    "playlogid": logid,
                    "itemid": COVER_INFO.id,
                    "itemname": COVER_INFO.title,
                    "userid": txv.login.getUin(),
                    "playtime": now,
                    "playtype": playtype,
                    "sign": hex_md5(str)
                },
                type: "post",
                dataType: "text",
                success: Live.emptyFn
            });
        }
    }

    function getVipTicketJson(cb, retryCount) {
        seajs.use('hw.request', function(Req) {
            Req.ticket(true, {
                _t: 1
            }).done(function(json) {
                if (json && json.result) {
                    if (json.result.code === 0) {
                        cb(json);
                        return;
                    } else if (json.result.code == -11) {
                        cb();
                        return;
                    }
                }
                cb();
            }).fail(cb);
        });
    }
    /**
     * @override 检查VIP
     */
    this.checkIsVip = function() {
            var checkVipTimer = null,
                checktimes = 0,
                $self = txv.playpg;

            function onSetPayStatus(json) {
                clearTimeout(checkVipTimer);
                checkVipTimer = null;
                checktimes++;
                if ($j.util.getUrlParam('show_mask') == 1 || typeof window.abtest != "undefined") {
                    location.href = "http://film.qq.com/cover/" + COVER_INFO.id[0] + '/' + COVER_INFO.id + '.html';
                }
                reportJSInfo(JS_REPORT_TYPE.SET_RESULT, "1");

                $self.isOnlyPrevUser = false;
                // 当前vid不是正片的时候不使用drm播放
                var cvid = !!txv.playdata.curVideo ? txv.playdata.curVideo.getFullVid() : "";
                cvid = cvid || $self.getVidFromUrl();
                var isTag = false;
                if (!!cvid) {
                    isTag = $j.inArray($e("#" + cvid).attr("tp"), ["2", "3"]) > -1 ? true : false;
                }
                if (!isTag && !!PLAYER_INFO.useDRM) { // 如果页面里说了，这个节目必须用DRM才能完整观看
                    isDrmVideo = true;

                    var ip_white = ["61.135.172.68", "61.135.172.69", "61.135.172.70", "123.125.119.120", "123.125.119.121", "123.125.119.122", "123.125.119.123", "123.125.119.124", "123.125.119.125", "123.125.119.126",
                        "180.153.219.11", "180.153.219.12", "180.153.219.13", "180.153.219.14", "180.153.219.15", "180.153.219.16", "180.153.219.17", "180.153.219.18", "180.153.219.19", "180.153.219.20", "180.153.219.21", "180.153.219.22", "180.153.219.23", "180.153.219.24", "180.153.219.25", "180.153.219.26"
                    ];
                    if ((!Live.userAgent.windows && !!PAY_INFO.macdrm) || Live.login.getLoginType() == 'wx') {
                        $self.playertype = "flash";
                    } else {
                        var url = 'http://vv.video.qq.com/checktime?_t=1&otype=json';
                        $j.ajax({
                            url: url,
                            dataType: "jsonp",
                            cache: false,
                            success: function(json) {
                                var city = json["city"];
                                var ip = json["ip"];
                                if (city && ip && ((ip_white.indexOf(ip) != -1) || (city.indexOf('北京') == -1 && city.indexOf('上海') == -1))) {
                                    $self.playertype = "flash";
                                } else {
                                    $self.playertype = "ocx";
                                    // 使用控件播放，上报吧
                                    Live.tj2.button("cover.ocx.write");
                                    $self.reportToTDB({
                                        "uin": txv.login.getUin(),
                                        "cmd": 2552, // 固定值
                                        "type": 517,
                                        "host": document.location.host,
                                        "url": encodeURIComponent(document.location.href)
                                    });
                                }
                            },

                            error: function(msg) {
                                $self.playertype = "ocx";
                                // 使用控件播放，上报吧
                                Live.tj2.button("cover.ocx.write");
                                $self.reportToTDB({
                                    "uin": txv.login.getUin(),
                                    "cmd": 2552, // 固定值
                                    "type": 517,
                                    "host": document.location.host,
                                    "url": encodeURIComponent(document.location.href)
                                });
                            }
                        });
                    }
                } else {
                    $self.playertype = "auto";
                }
                //低价开会员
                if (json && json.favor_money) {
                    lowPriceVip = json.favor_money / 100;
                    if (json.favor_vip && !Live.cookie.get("yhhwd_" + Live.login.getUin()) && !txv.playdata.isVip && Live.login.isLogin() && !Live.login.isLowLogin()) {
                        $self.showYHHWD(lowPriceVip);
                        needrefresh = false;
                    }
                }

                $self.setPayDomStyle(json);

                $self.rewritePlayer(function() {
                    reportJSInfo(JS_REPORT_TYPE.REWRITE_PLAYER, $self.playertype);
                });

                $self.onSetEnd();
                // drm控件本身不做历史观看记录上报，由页面定时请求播放器时间做上报
                setTimeout(function() {
                    if (isDrmVideo && !!txv.playdata.player && typeof txv.playdata.player.getPlaytime == "function") {
                        var playTime = parseInt(txv.playdata.player.getPlaytime(), 10);
                        var totalTime = typeof txv.playdata.player.getTotaltime == "function" ? parseInt(txv.playdata.player.getTotaltime(), 10) : VIDEO_INFO.duration;
                        if (!txv.playdata.curVideo.getFullVid() || txv.playdata.curVideo.getFullVid().indexOf("_") != -1) {
                            _flash_view_history(0, playTime, totalTime); // 看点开始播放上报
                        } else {
                            _flash_view_history(-1, playTime, totalTime); // 其他开始播放上报
                        }
                        clearInterval(historyTimer);
                        txv.log("set history interval");
                        var historyTimer = setInterval(function() {
                            try {
                                if (!txv.playdata.curVideo.getFullVid() || txv.playdata.curVideo.getFullVid().indexOf("_") != -1) { // 不报看点
                                    return;
                                }
                                var playTime = 0;
                                if (!!txv.playdata.player && typeof txv.playdata.player.getPlaytime == "function") {
                                    playTime = parseInt(txv.playdata.player.getPlaytime(), 10);
                                }
                                var totalTime = typeof txv.playdata.player.getTotaltime == "function" ? parseInt(txv.playdata.player.getTotaltime(), 10) : VIDEO_INFO.duration;
                                // 电影结束时有个片尾，暂定为1分钟吧，到了这个点就算看完了
                                if (parseInt(playTime, 10) + 60 > parseInt(totalTime)) {
                                    txv.log("clear history interval");
                                    clearInterval(historyTimer);
                                    _flash_view_history(-2, playTime, totalTime);
                                } else {
                                    _flash_view_history(-3, playTime, totalTime);
                                }
                            } catch (e) {}
                        }, 10000);
                    }
                }, 3000)
                try {
                    $self.reportToMu();
                } catch (err) {};
            }

            function onSetNotPayStatus(json) {
                clearTimeout(checkVipTimer);
                checkVipTimer = null;
                checktimes++;

                reportJSInfo(JS_REPORT_TYPE.SET_RESULT, "0");

                //低价开会员
                if (json && json.favor_money) {
                    lowPriceVip = json.favor_money / 100;
                }
                $self.isOnlyPrevUser = true;
                $self.playertype = "auto"; // 没买，那么该用啥预览就用啥预览，其实就是flash，因为HTML5不支持预览的 哈哈
                $self.setNotPayDomStyle();
                if ($self.isNeedVipPay() && txv.playdata.isVip) { // 如果是会员需要单片购买，可能需要修改文案的
                    if (PAY_INFO.status == 7) {
                        $self.setVipPayOnly(function() {
                            $self.rewritePlayer(function() {
                                reportJSInfo(JS_REPORT_TYPE.REWRITE_PLAYER, $self.playertype);
                            });
                            $self.onSetEnd();
                        });
                    } else {
                        $self.setVipTicket(function() {
                            $self.rewritePlayer(function() {
                                reportJSInfo(JS_REPORT_TYPE.REWRITE_PLAYER, $self.playertype);
                            });
                            $self.onSetEnd();
                        });
                    }

                } else {
                    if (Live.login.getLoginType() && (PAY_INFO.status == txv.PAY_STATUS.SINGLE || PAY_INFO.status == txv.PAY_STATUS.VIP_AND_SINGLE) && !txv.playdata.isVip) {
                        $self.noVIPHasTic(function(num) {
                            if (num > 0) {
                                $j("a[data-type='buylink']").html("用观影券观看");
                                $j('#vip_pay .tit_price').html('<p class="tit">您剩余观影券<span class="num txt_red">' + num + '</span>张，用券或开会员可看完整影片</p>');
                                $j('#vip_pay .btn_1row').removeClass('btn_1row').addClass('btn_2row').addClass('cf');
                                if (Live.login.getLoginType() == 'wx') {
                                    if ($j('#vip_pay .btn_look').length == 0) {
                                        var tic = '<a href="javaScript:void(0)" class="btn_look" data-type="buylink" _hot="cover.page.openvip">用观影券观看</a>';
                                        $j('#vip_pay .btn_2row').prepend(tic);
                                        $('.btn_tips').css('display', 'none');
                                    }
                                } else if ($j('#vip_pay .btn_coupon').length == 0) {
                                    //var pay='<a href="javaScript:void(0)" class="btn_vip" target="_blank" data-toggle="l_pay" _source="9" _hot="cover.page.openvip"><span class="txt">开通好莱坞会员</span></a>'
                                    //$j('#vip_pay .btn_2row').prepend(pay);
                                    var tic = '<a href="javaScript:void(0)" class="btn_coupon"  data-type="buylink" _hot="cover.page.buy">用观影券观看</a>';
                                    $('.mod_side_vip .btn_tips').remove();
                                    //$j('#vip_pay .btn_1row').append(tic);
                                    $j('#vip_pay .btn_2row').prepend(tic);

                                    //$('.btn_tips').css('display','none');
                                }

                                //$('.btn_vip').removeClass('btn_vip').addClass('btn_look').html("用观影券观看").css('display','block');

                                //$j('#vip_pay .btn_2row').prepend('<a href="javaScript:void(0)" data-type="buylink" _hot="cover.page.buy" class="btn_coupon">观影券观看</a>');

                            }
                            $self.rewritePlayer(function() {
                                reportJSInfo(JS_REPORT_TYPE.REWRITE_PLAYER, $self.playertype);
                            });
                            $self.onSetEnd();
                        });
                    } else {
                        $self.rewritePlayer(function() {
                            reportJSInfo(JS_REPORT_TYPE.REWRITE_PLAYER, $self.playertype);
                        });
                        $self.onSetEnd();
                    }
                }
            }

            function checkSinglePay() {
                /**
                 * 上报请求是否购买的cgi出错
                 * 
                 * @param {Object}
                 *          data
                 */
                var defer = $.Deferred().done(function(json) {
                    // 支付过了
                    buyJson = json;
                    txv.playdata.isBuy = true;
                    if (checktimes == 0) {
                        reportJSInfo(JS_REPORT_TYPE.SINGLE_BUY, "1", json);
                        onSetPayStatus(json);
                    }
                }).fail(function(json) {
                    // 没支付过
                    txv.playdata.isBuy = false;
                    if (checktimes == 0) {
                        reportJSInfo(JS_REPORT_TYPE.SINGLE_BUY, "0", json);
                        onSetNotPayStatus(json);
                    }
                    if ($self.openUrlType != 0) { // 没支付过，并且之前还设定了登录后回调的打开窗口方案就需要开窗口
                        $self.flashOpenPay();
                        $self.openUrlType = 0;
                    }
                });
                $me.checkIsBuy(defer);
            }

            function checkIsBuy(isvip) {
                if (!isvip) { // 不是会员
                    reportJSInfo(JS_REPORT_TYPE.CHECK_BUY, "1")
                    checkSinglePay();
                    if (PAY_INFO.ispay) {
                        $.ajax({
                            url: "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?auto_id=2089&otype=json",
                            dataType: "jsonp",
                            success: function(json) {
                                if (json && json.returncode == 0 && json.items && json.items.length > 0) {
                                    $(".mod_side_vip").append("<div class='ad_pic'><a href='" + json.items[0].url + "' class='pic' _hot='film.ad.click." + json.items[0].id + "' target='_blank'><img src='" + json.items[0].pic + "' alt=''></a></div>");
                                    Live.tj2.hot("film.ad." + json.items[0].id);
                                }
                            },
                            error: function() {}
                        });
                    }
                } else { // 是会员
                    if ($self.isNeedVipPay()) { // 当前影片要求会员也要单独购买
                        reportJSInfo(JS_REPORT_TYPE.CHECK_BUY, "2");
                        checkSinglePay();
                    } else {
                        if (checktimes == 0) {
                            reportJSInfo(JS_REPORT_TYPE.CHECK_BUY, "3");
                            onSetPayStatus();
                        }
                    }
                }
            }
            // 当前vid不是正片的时候不使用drm播放
            var cvid = !!txv.playdata.curVideo ? txv.playdata.curVideo.getFullVid() : "";
            cvid = cvid || $self.getVidFromUrl();
            var isTag = false;
            if (!!cvid) {
                isTag = $j.inArray($e("#" + cvid).attr("tp"), ["2", "3"]) > -1 ? true : false;
            }
            // 非windows上直接提示受DRM版权保护，因为iPad上是直接播放MP4文件，一键可以下载高清原片的，太危险了
            if (!!PLAYER_INFO.useDRM && !Live.userAgent.windows && !isTag) {
                isDrmVideo = true;
                $self.showMobileDeviceCannotPlay();
                if (!PAY_INFO.macdrm) {
                    return;
                }
            }
            // 定时器记录支付信息
            checkVipTimer = setTimeout(function() {
                reportJSInfo(JS_REPORT_TYPE.TIMEOUT, "11000");
                onSetNotPayStatus();
            }, 11000);

            // chrome 25无法响应控件的各种事件，所以需要实时判断
            var isCheckVipByServer = (Live.userAgent.chrome >= 25 || !!Live.userAgent.safari) ? true : false;
            isCheckVipByServer = isCheckVipByServer ? isCheckVipByServer : !$self.isNeedVipPay(); // 包月免费片子要显示会员到期时间，强制请求CGI
            var vipDefer = txv.vip.checkIsVip(true);
            vipDefer.always(function(json) {
                var isvip = (vipDefer instanceof Live.Deferred) ? vipDefer.isResolved() : false;
                vipJson = json;
                txv.playdata.isVip = isvip;
                reportJSInfo(JS_REPORT_TYPE.ISVIP, isvip ? "1" : "0");
                checkIsBuy(isvip);
            });
        }
        //清掉base里面这个方法，这会多发一次请求
    this.playHistory = Live.emptyFn;
    this.playFilmHis = function() {
            // 先判断是否有从url中指定开始时间参数，有的话就不需要从历史观看中获取
            var playTimeArr = ["start", "tstart", "sharestart"],
                isHasTimeParam = false;
            for (var i = 0, len = playTimeArr.length; i < len; i++) {
                var val = $j.util.getUrlParam(playTimeArr[i]);
                if (!!val && !isNaN(val) && val > 0) {
                    isHasTimeParam = true;
                    break;
                }
            }
            if (!!isHasTimeParam) {
                return;
            }

            var vid = this.getDefaultVid();
            txv.history.getHistoryTimeByKey(vid, COVER_INFO.id, this.historyCallback);
        }
        // endregion overload pay function
    this.onSetEnd = function() {
            var $self = this;
            // 针对第一次，显示播放器
            if (!txv.playdata.player && !$self.isAutoShowPlayer()) {
                // 控件不能通过js去设置起点播放时间，要预先传值
                if (!isDrmVideo) {
                    $self.showPlayer();
                    $self.playFilmHis();
                } else {
                    txv.history.getHistoryTimeByKey(txv.playdata.curVideo.getFullVid(), COVER_INFO.id, function(his) {
                        txv.playdata.curVideo.setHistoryStart(his);
                        $self.showPlayer();
                    });
                }

                $self.hidePlayerWhenTips();
                reportJSInfo(JS_REPORT_TYPE.SET_END, $self.playertype);
                // $self.runActions(txv.ACTION.AFTER_SHOW_PLAYER);
            }
            //      txv.common.initVipIcon();
            $j("#mod_player").trigger("checkvipend").trigger("check::vipbuy");
        }
        /**
         * 显示支付浮层
         * 
         * @private
         */
    window.__tenplay_showPayTips = function(appendInto, cb) {
        Live.tj2.hot("film.flash.showtip");
        var player = txv.playdata.player;
        if (!!player && player.getPlayer() && typeof player.getPlayer().setFullScreen != "undefined") {
            player.getPlayer().setFullScreen(false);
        }
        //不能同时出现两个浮层吧,如果遮罩出来了说明已经有东西了，flash弹层就不相应了
        if ($j("#mask_layer").is(":visible")) {
            return false;
        }
        // 默认设为append
        if (typeof appendInto == "undefined") {
            appendInto = true;
        }
        hideBasePayTip = appendInto;
        var payinfo = __tenplay_getpayinfo(); // 获取支付和用户信息，偷了个懒，这个接口本来是给flash用，但返回的数据格式一样的，就直接调用这个接口了。
        if ((PAY_INFO.status == 4 && txv.playdata.isBuy) || (PAY_INFO.status == 5 && (txv.playdata.isVip || txv.playdata.isBuy)) || (PAY_INFO.status == 5 && txv.playdata.isVip) || (PAY_INFO.status == 6 && txv.playdata.isVip) || (PAY_INFO.status == 7 && txv.playdata.isBuy)) {
            //说明这个用户可以看了，不需要弹tips提醒了

            Live.tj2.hot("flash.paystatus.err");
            var tips = new txv.tips("Message", "支付状态获取异常，请刷新页面重试");
            tips.SetType(txv.tips.ConstTipsType.Warning);
            tips.SetBtn("确定", "取消");
            tips.onBtnOk = function() {
                tips.SetHide();
                // 这里添加确定按钮的触发事件
                setTimeout(function() {
                    window.location.reload();
                }, 1000);
            };
            tips.FillPage();
            return false;
        }
        var s = payinfo.s_price.split("."),
            discount = payinfo.s_discount == 0 ? "0.00" : payinfo.s_discount,
            discount = discount.split(".");
        payinfo.sPrice_s1 = s[0], payinfo.sPrice_s2 = s[1] || "00";
        payinfo.sDisCount_s1 = discount[0], payinfo.sDisCount_s2 = discount[1] || "00";

        var $doc = $e(document),
            evtName = "click";
        $doc.undelegate("#btn_ios_tips_login", evtName);
        $doc.delegate("#btn_ios_tips_login", evtName, function(evt) {
            //由于公用了一个mask，打开登录时隐藏其他浮层，就是隐藏自己
            if (hideBasePayTip) {
                $j(this).parents(".pop_wrap").remove();
                $j(this).parents(".mod_play_layer").remove();
            }
            txv.login.openLogin({
                "success": function() {
                    setTimeout(function() {
                        window.location.reload();
                    }, 1000);
                }
            });
        });
        /*
         * 改为页面片形式嵌入页面，防止拉取过程出现错误的情况
         */
        if (!getElementById("tmpContainer")) {
            $j('body').append('<div id="tmpContainer" style="display:none;"></div>');
        }
        //会员有券直接拉起券支付浮层
        if (payinfo.vinfo == 4 && payinfo.uinfo == 3 && payinfo.ticketnum > 0) {
            __handelBuy();
        } else {
            var url = "http://data.video.qq.com/fcgi-bin/dataout?otype=json&auto_id=1659&tid=3";
            $j.ajax({
                "url": url,
                "dataType": "jsonp",
                beforeSend: function() {}
            }).done(function(json) {
                if (json && json.returncode == 0) {
                    if (json.list.length > 0) {
                        var type = json.list[0].type;
                        if (type == 2) { //自定义
                            fillWX1yHtml(json.list[0]);
                            return;
                        }
                    }
                }
                defaultHtml(payinfo, appendInto, cb);
            }).fail(function() {
                defaultHtml(payinfo, appendInto, cb);
            });

            // if(useNewFeature){

            //  } else {
            //      txv.template.fillHtml(payinfo, "tpl_ios_paytips_v2", "tmpContainer", true, null, txv.template.FILL_TYPE.TPL_ID, function() {
            //    if(getSUin()>0){
            //     Live.tj2.hot("cover.float.inbody");
            // } else {
            //  Live.tj2.hot("cover.float.inbody_unlogin");
            // }
            //    var tpl = $j("#tmpContainer").html();
            //    $j("#tmpContainer").html("");
            //    if (appendInto) {
            //     $j('body').append(tpl);
            //     txv.login.showMask('poptip',0,0,0);
            //     var pop = getElementById("poptip")
            //     txv.login.showCenterNobg(pop);
            //     txv.login.ie6hook(pop);
            //    }
            //    else {
            //      var $p = $j("#mod_player");
            //      $p.html(tpl);
            //      var $m = $p.find(".pop_wrap").css("height",$p.css("height"));
            //    }
            //    setWebSockQrcode($j("#wx_qrcode"),$j.pay("cover.float.openvip-qr","aid"));
            //    typeof cb == "function" && cb();
            //   });
            //  }
        }
    }

    /**
     * QQ浏览器非会员部分影片单点支付优惠
     * 
     * @private
     */
    function isQQBrowser(callbFun) {
        if (navigator.userAgent.match(/QQBrowser/ig)) {
            $.ajax({
                url: "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?auto_id=2013&otype=json&cid=" + COVER_INFO.id,
                dataType: "jsonp",
                success: function(json) {
                    if (json.returncode == 0 && json.enable == 1) {
                        callbFun(json);
                    } else {
                        callbFun(0);
                    }
                },
                error: function() {}
            });
        } else {
            callbFun(0);
        }
    }

    function defaultHtml(payinfo, appendInto, cb) {
        var url = "http://data.video.qq.com/fcgi-bin/dataout?otype=json&auto_id=1445";
        var retObj = new Live.RetCode(url);
        $j.ajax({
            "url": url,
            "dataType": "jsonp",
            beforeSend: function() {
                retObj.begin();
            }
        }).done(function(json) {
            if (json) {
                if (json.returncode == 0) {
                    isQQBrowser(fillHtml);

                    function fillHtml(param) {
                        if (param != 0 && !txv.playdata.isVip) {
                            var disPrice = param.price || "300";
                            disPrice = (disPrice / 100).toFixed(2);
                            payinfo.s_price = disPrice;
                        }
                        retObj.reportSuc();
                        var type = 0;
                        if (json.policy) {
                            if (json.policy == 3) {
                                type = Math.floor(Math.random() * 3);
                            } else {
                                type = json.policy;
                            }
                        }
                        if (type == 1 || type == 2) {
                            fillRecommendHtml(payinfo, json, type, appendInto, cb);
                        } else {
                            fillDefaultHtml(payinfo, appendInto, cb);
                        }
                    }
                } else {
                    fillDefaultHtml(payinfo, appendInto, cb);
                    retObj.reportErr(json.returncode);
                }
            } else {
                fillDefaultHtml(payinfo, appendInto, cb);
                retObj.reportErr(-1);
            }
            retObj.end();
        }).fail(function() {
            fillDefaultHtml(payinfo, appendInto, cb);
            retObj.reportErr(-1);
            retObj.end();
        });
    }

    function fillWX1yHtml(data) {
        //手动添加一个iframe
        var ptag = data.ptag;
        var aid = data.aid;
        var page = data.pagename;

        var tpl = "";
        if (!getElementById("ff_poptip")) {
            tpl += '<div class="layer_wrap" data-ptag="' + (typeof ptag == "undefined" ? "" : ptag) + '" data-aid="' + (typeof aid == "undefined" ? "" : aid) + '" id="ff_poptip" style="display:none; margin-left:-300px; margin-top: -150px;">';
            tpl += '<iframe frameborder="0" allowtransparency="true" width="600" height="300" class="iframe_layer" src="http://film.qq.com/priv/' + page + '" scrolling="no"></iframe>';
            tpl += '</div>';
            $j("body").append(tpl);
            txv.login.showMask();
            $j.util.showAtFstSrnCenter("#ff_poptip", 600, 300);
        }

        $("#ff_poptip").on("minipay", function(e, obj) {
            $j("#ff_poptip").remove();
            if (!Live.login.isLogin()) {
                Live.login.openLogin({
                    "success": function() {
                        txv.vip.isVip(function(isvip) {
                            if (!isvip) {
                                $j.pay(obj);
                            }
                        }, true);
                    }
                });
            } else {
                $j.pay(obj);
            }
            // $j(document).off("close.hw.minipay").on("close.hw.minipay",function(){
            //  Live.priv_skipad.playAd();
            // });
        }).on("close", function() {
            $j("#ff_poptip").remove();
            txv.login.hideMask();
            Live.priv_skipad.playAd();
        }).on("login", function() {
            $j("#ff_poptip").remove();
            Live.login.openLogin({
                "success": function() {
                    txv.vip.isVip(function(isvip) {
                        if (!isvip) {
                            fillWX1yHtml(data);
                        }
                    }, true);
                }
            });
        }).on("wxok", function() {
            $j("#ff_poptip").remove();
            if (!Live.login.isLogin()) {
                Live.login.openLogin({
                    "success": function() {
                        txv.vip.isVip(function(isvip) {
                            if (!isvip) {
                                fillWX1yHtml(data);
                            }
                        }, true);
                    }
                });
            } else {
                txv.vip.isVip(function(isvip) {
                    if (isvip) {
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    } else {
                        fillWX1yHtml(data);
                    }
                }, true);
            }
        }).on("shown", function(e, obj) {
            obj = obj || {};
            if (obj.matchType == 0) {
                $j("#frm_poptip").css({
                    "width": "580px",
                    "height": "305px"
                });
                $j.util.showAtFstSrnCenter("#ff_poptip", 580, 305);
            } else if (obj.matchType == 2) {
                $j("#frm_poptip").css({
                    "width": "600px",
                    "height": "310px"
                });
                $j.util.showAtFstSrnCenter("#ff_poptip", 600, 310);
            }
        });
    }

    function fillDefaultHtml(payinfo, appendInto, cb) {
        function popMask() {
            //如果遮罩出来了，屏蔽弹层
            if ($j("#mask_layer").is(":visible")) {
                return false;
            }
            if (Live.login.getLoginType() == 'wx') {
                payinfo.wx = 1;
            } else {
                payinfo.wx = 0;
            }
            if (PAY_INFO.status == 7) {
                var cur = new Date(new Date() - 0 + 2 * 86400000);
                var month = cur.getMonth() + 1;
                var day = cur.getDate();
                if (month < 10) {
                    month = "0" + month;
                }
                if (day < 10) {
                    day = "0" + day;
                }
                var endtime = [cur.getFullYear(), '-', month, '-', day].join('');
                payinfo.endtime = endtime;
            }
            txv.template.fillHtml(payinfo, "tpl_ios_paytips", "tmpContainer", true, null, txv.template.FILL_TYPE.TPL_ID, function() {
                if (getSUin() > 0) {
                    Live.tj2.hot("cover.float.inflash");
                } else {
                    Live.tj2.hot("cover.float.inflash_unlogin");
                }
                var tpl = $j("#tmpContainer").html();
                $j("#tmpContainer").html("");
                var $player = $j('#mod_player');

                if (appendInto) {
                    $j('body').append(tpl);
                    txv.login.showMask('poptip', 0, 0, 0);
                    var pop = getElementById("poptip")
                    txv.login.showCenterNobg(pop);
                    txv.login.ie6hook(pop);
                } else {
                    var $p = $player;
                    $p.html(tpl);
                    txv.login.showCenterNobg(getElementById("poptip"), 0, 0, $j('#mod_player'));
                    var $m = $p.find(".pop_wrap").css("height", $p.css("height"));
                }

                $.pay_qrimg({
                    id: "wx_qrcode",
                    aid: $j.pay({
                        aid_version: 'V0',
                        key4: 9,
                        key11: 2,
                        _scene: 2
                    }, "aid"),
                    use_ws: txv.login.isLogin(),
                    success: function() {
                        seajs.use(['hw.request', 'hw.vip'], function(Req, Vip) {
                            Req.vip().done(function(data) {
                                if (data.isVip) {
                                    setTimeout(function() {
                                        window.location.reload();
                                    }, 1000);
                                }
                            });
                        });
                    },
                    pay_suc: function() {
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    }
                });

                typeof cb == "function" && cb();
            });
        }
        if (!txv.login.isLogin()) {
            popMask();
        } else {
            seajs.use(['hw.request', 'hw.vip'], function(Req, Vip) {

                Req.vip().done(function(data) {
                    if (data.result && data.result.code == 0) {
                        Date.prototype.format = function(format) {
                            var date = {
                                "M+": this.getMonth() + 1,
                                "d+": this.getDate(),
                                "h+": this.getHours(),
                                "m+": this.getMinutes(),
                                "s+": this.getSeconds(),
                                "q+": Math.floor((this.getMonth() + 3) / 3),
                                "S+": this.getMilliseconds()
                            };
                            if (/(y+)/i.test(format)) {
                                format = format.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
                            }
                            for (var k in date) {
                                if (new RegExp("(" + k + ")").test(format)) {
                                    format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
                                }
                            }
                            return format;
                        }

                        function getDate(num) {
                            return (new Date(num * 1000)).format('yyyy.MM.dd').replace(/年|月/g, "-").replace(/日/g, " ");
                        }
                        payinfo.vipGiftTicketTime = (data.nextgivedate == 0 ? 0 : getDate(data.nextgivedate));
                        popMask();
                    }
                });
            });
        }
        initPrice();
    }

    function fillRecommendHtml(payinfo, data, type, appendInto, cb) {
        var prefix = ['cover', 'cover_A', 'cover_B'];

        var cover = data.cover;
        var picclass = type == 2 ? "pic_list_a" : "pic_list_b";
        var filmlist = [];

        var title = "";
        title += payinfo.uinfo == 3 ? "您已是好莱坞会员，" : "开通好莱坞会员，";
        title += payinfo.vinfo == 4 ? "用券免费观看完整影片" : "免费观看完整影片";
        var buytxt = "";
        if (payinfo.uinfo == 0) {
            buytxt = "登录购买单片";
        } else {
            if (payinfo.ticketnum > 0) {
                buytxt = "用观影券观看";
            } else {
                buytxt = [payinfo.s_price, '元单片购买'].join('');
            }
        }

        var disbuytxt = "";
        if (payinfo.s_discount != 0) {
            disbuytxt = ["半价", payinfo.s_discount, "元单片购买"].join('');
        } else {
            disbuytxt = [payinfo.s_price, "元单片购买"].join('');
        }

        var btntxt = (payinfo.vinfo == 4 && payinfo.uinfo == 3 && payinfo.ticketnum == 0) ? "续费好莱坞会员" : "开通好莱坞会员";

        var qrtxt = (payinfo.vinfo == 4) ? "用券观看" : "立即播放";

        var tpl = "";

        tpl += '        <div class="pop_wrap pop_wrap_v2 pop_vip" style=" opacity: 1;" id="poptip">';
        tpl += '        <div class="pop_play">';
        tpl += '            <div class="title"><a href="javaScript:void(0)" class="close" data-type="closetip" _hot="cover.float.close_inflash">关闭</a></div>';
        tpl += '            <div class="con">';
        tpl += '                <h4 class="sub_title">' + title + '</h4>';
        tpl += '                <div class="sub_btn clearfix">';
        tpl += '                    <a href="<?cs var:config.openVipUrl?>" target="_blank" _source="10" data-amount="3" data-toggle="l_pay" _hot="' + prefix[type] + '.float.openvip_inflash" class="btn"><i class="icon_hw"></i>' + btntxt + '</a>';
        tpl += (payinfo.vinfo == 6) ? '<div class="txt_info txt_info_zk">' : '<div class="txt_info">';
        tpl += '                        <p class="txt_zk">最低<em>12.5</em>元/月</p>';
        if (payinfo.vinfo == 4 && payinfo.uinfo == 3 && payinfo.ticketnum <= 0) {
            tpl += '                            <a href="javaScript:void(0)" class="txt_vip" data-type="moneybuy" _hot="' + prefix[type] + '.float.buy_inflash">' + disbuytxt + ' >></a>';
        } else if (payinfo.vinfo != 6) {
            tpl += '                            <a href="javaScript:void(0)" class="txt_vip" data-type="buylink" _hot="' + prefix[type] + '.float.buy_inflash">' + buytxt + ' >></a>';
        }
        tpl += '                    </div> ';
        tpl += '                </div>';
        tpl += '                <div class="privilege_wrap">';
        if (payinfo.vinfo == 4 && payinfo.uinfo == 3 && payinfo.ticketnum <= 0) {
            tpl += '                    <div class="coupon_tips">您没有可用观影券，现在续费立即获赠<span class="tips">' + payinfo.vipGiftTicketNum + '</span>张观影券</div>';
        } else {
            tpl += '                    <h4 class="title_txt">好莱坞会员尊享特权：</h4>';
        }
        tpl += '                    <ul class="privilege_list">';
        tpl += '                        <li><i class="icon icon_1"></i>新片抢先看</li>';
        tpl += '                        <li><i class="icon icon_2"></i>千部影片赏</li>';
        tpl += '                        <li><i class="icon icon_3"></i>全站无广告</li>';
        tpl += '                    </ul>';
        tpl += '                </div>';
        tpl += '                <div class="pic_list ' + picclass + '">';
        tpl += '                    <ul class="list clearfix">';
        for (var i = 0, l = cover.length; i < l; i++) {
            if (filmlist.length < type && cover[i].c_type == type && COVER_INFO.id != cover[i].c_cover_id) {
                filmlist.push(cover[i]);
                var item = cover[i];
                var curl = [item.c_url, "?ptag=", prefix[type], ".float"].join('');
                var score = item.newscore.substr(0, item.newscore.indexOf('.') + 2);
                var imgtag = item.c_state == 1 ? "icon_hot" : "icon_online";
                tpl += '                    <li>';
                tpl += '                        <a class="figure_item" href="' + curl + '"  target="_blank">';
                tpl += '                            <img src="' + item.c_pic + '" alt="' + item.c_title + '">';
                tpl += '                            <span class="figure_mask cf">';
                tpl += '                                <em class="mask_tit mask_tit_big">' + item.c_title + '</em>';
                tpl += '                                <span class="mask_txt">评分' + score + '</span>';
                tpl += '                            </span>';
                tpl += '                            <i class="icon ' + imgtag + '"></i>';
                tpl += '                        </a>';
                tpl += '                        <a class="btn_follow" href="#" style="display:none;"><i class="icon_follow"></i>关注</a>';
                tpl += '                    </li>';
            }
        }
        tpl += '      </ul>';
        tpl += '                </div>';
        tpl += '                <div class="weixin_con">';
        tpl += '                    <div class="QR_wrap">';
        tpl += '                        <h4 class="weixin_title">微信支付开通</h4>';
        tpl += '                        <span class="loading" id="qrloading"></span>';
        tpl += '                        <img id="wx_qrcode" style="display:none;" class="QR_code" alt="微信支付开通"/>';
        tpl += '                        <p class="weixin_tips">完成支付后，<a href="javaScript:void(0)" data-type="wxok" _hot="pay.player.wxok_inflash">' + qrtxt + '</a></p>';
        tpl += '                    </div>';
        tpl += '                </div>';
        tpl += '            </div>';
        if (payinfo.uinfo == 0) {
            tpl += '                <div class="login_tips">如您已开通会员或购买单片，请<a href="javaScript:void(0)" id="btn_ios_tips_login" class="login_link" _hot="cover.float.login_inflash">登录</a>观看</div>';
        }
        tpl += '        </div>';
        tpl += '        <div id="player_mask" class="player_mask"></div>';
        tpl += '    </div>';

        if (getSUin() > 0) {
            Live.tj2.hot(prefix[type] + ".float.inflash");
        } else {
            Live.tj2.hot(prefix[type] + ".float.inflash_unlogin");
        }
        //var tpl = $j("#tmpContainer").html();
        //$j("#tmpContainer").html("");
        var $player = $j('#mod_player')
            // if (appendInto) {
            //  $player.append(tpl);
            //  txv.login.showCenterNobg(getElementById("poptip"), 0, 0, $player);
        if (appendInto) {
            $j('body').append(tpl);
            txv.login.showMask('poptip', 0, 0, 0);
            var pop = getElementById("poptip")
            txv.login.showCenterNobg(pop);
            txv.login.ie6hook(pop);
        } else {
            var $p = $player;
            $p.html(tpl);
            var $m = $p.find(".pop_wrap").css("height", $p.css("height"));
        }
        //setWebSockQrcode($j("#wx_qrcode"), $j.pay(prefix[type]+".float.openvip-qr-inflash", "aid"));  坑爹的vincent图方便不再区分
        setWebSockQrcode($j("#wx_qrcode"), $j.pay({
            aid_version: 'V0',
            key4: 10,
            key11: 2,
            _source: 10,
            _scene: 2
        }, "aid"));

        typeof cb == "function" && cb();
    }


    function setWebSockQrcode(qrobj, aid) {
        qrobj.hide();
        $j("#qrloading").show();
        qrobj.on("error", function() {
            this.src = "http://pay.qq.com/cgi-bin/account/get_qr_image.cgi?size=150&url=http%3A%2F%2Fpay.qq.com%2Fh5%2Findex.shtml%3Fm%3Dbuy%26wechat%3D1%26pf%3D2007%26showwxpaytitle%3D1%26c%3Dtxsp%26n%3D3%26u%3D0%26aid%3Dweb.cover.float.openvip-qr-inflash";
        });

        var hasQRCode = false;

        function defalutQrcode() {
            var url = "http://film.qq.com/weixin/wxpay.html?showwxpaytitle=1&c=txsp&n=3&u=" + txv.login.getUin() + "&aid=" + encodeURIComponent(aid);
            //var url = "http://pay.qq.com/h5/index.shtml?m=buy&wechat=1&pf=2007&showwxpaytitle=1&c=txsp&n=3&u="+txv.login.getUin()+"&aid="+encodeURIComponent(aid)+"_="+Math.random();
            qrobj.attr("src", "http://sns.video.qq.com/tvideo/fcgi-bin/qrencode?size=150&url=" + encodeURIComponent(url));
            qrobj.show();
            $j("#qrloading").hide();
            hasQRCode = true;
        }

        function webSockQrcode(guid) {
            var url = WEBSOCK_CONF.scanreport + "code=PCPAY&msgtype=1&guid=" + guid + "&cid=" + COVER_INFO.id + "&platform=8&uin=" + txv.login.getUin() + "&aid=" + encodeURIComponent(aid);
            qrobj.attr("src", WEBSOCK_CONF.qrcode + "size=150&url=" + encodeURIComponent(url));
            qrobj.show();
            $j("#qrloading").hide();
            hasQRCode = true;
        }

        window.WebSocket = window.WebSocket || window.MozWebSocket;
        if (!window.WebSocket) {
            defalutQrcode();

            return;
        }
        var sock = WEBSOCKS[aid];
        if (!!sock) {
            sock.close();
        }
        logger.time("websocket");

        var retObj = new Live.RetCode_v2("login.tv.qq.com", "ws");
        retObj.begin();
        var guid,
            interval,
            logininfo = {};

        //3s后没有初始化二维码就显示默认的
        setTimeout(function() {
            if (!hasQRCode) {
                defalutQrcode();
            }
        }, 3000);
        var websocket = new WebSocket(WEBSOCK_CONF.ws);
        WEBSOCKS[aid] = websocket;
        websocket.onmessage = function(evt) {

            var data = JSON.parse(evt.data);
            var cmd = data.cmd;
            var info = data.info;
            var msgtype = data.msgtype;
            if (info.ret != 0) {
                retObj.reportLogicErr(info.ret);

                return;
            }

            if (cmd == 101) {
                stats.speed.setFlag({
                    "12": logger.elapsed('websock getguid')
                }).report();
                guid = data.guid;
                if (guid) {
                    webSockQrcode(guid);
                    retObj.reprot(1, cmd);
                } else {
                    defalutQrcode();
                    retObj.reportErr();
                }
            } else if (cmd == 300) {

            } else if (cmd == 400) {
                retObj.reprot(1, cmd);
                var eventcode = info.event;
                //扫描成功
                if (eventcode == 1) {} else if (eventcode == 2) {
                    if (msgtype == 3) {
                        //登录事件可以打入cookie刷新页面
                        $.extend(logininfo, info);
                    } else if (msgtype == 1) {
                        var uin = info.uin;
                        var month = info.month;
                        //登录号与支付号不一致，打入登录cookie刷新页面
                        if (!!logininfo.uin && logininfo.uin != txv.login.getUin()) {
                            //有uin信息说明移动端重新登录了
                            Live.cookie.set("uin", logininfo.uin, "qq.com", "/");
                            Live.cookie.set("skey", logininfo.skey, "qq.com", "/");
                            Live.cookie.set("luin", logininfo.uin, "qq.com", "/", 24 * 7);
                            Live.cookie.set("lskey", logininfo.lskey, "qq.com", "/", 24 * 7);
                        }
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    }
                }
            }
        }
        websocket.onopen = function() {
            retObj.reportSuc();
            stats.speed.setFlag({
                "10": logger.elapsed('websocket')
            }).report();

            logger.time("websock getguid");
            websocket.send(JSON.stringify({
                cmd: 100,
                bid: 10002
            }));
            interval = setInterval(function() {

                websocket.send(JSON.stringify({
                    cmd: 300,
                    bid: 10002,
                    guid: guid,
                    info: {}
                }));
            }, 60000);
        }

        websocket.onclose = function(evt) {

            if (interval) {
                clearInterval(interval);
            }
        }

        websocket.onerror = function(evt) {
            defalutQrcode();
            retObj.reportErr();
            stats.speed.setFlag({
                "11": logger.elapsed('websocket')
            }).report();

        }
    }
    //隐藏播放器弹出的浮层
    window.__tenplay_hidePayTips = function() {
        if (hideBasePayTip) {
            $j("#poptip").remove();
        }
        try {
            for (var i in WEBSOCKS) {
                if (WEBSOCKS.hasOwnProperty(i)) {
                    WEBSOCKS[i].close();
                }
            }
        } catch (e) {}
    }

    function resetPic($container) {
        /*下面的代码是防止图片不显示*/
        $container.find("img").each(function(i, el) {
            var isRender = el.getAttribute("isRender");
            if (!isRender || isRender != "true") {
                if (!!$e(el).attr("src")) {
                    setTimeout(function() {
                        $e(el).attr("src", $e(el).attr("src"));
                    }, 0);
                    el.setAttribute("isRender", "true");
                }
            }
        });
    }

    function openMiniPay() {
        $j.pay({
            type: "minipay",
            aid: "flash.control.openvip",
            amount: 3
        });
    }
    window.__tenplay_openminipay = function() {
        Live.event.preventDefault();
        var player = txv.playdata.player;
        if (!!player && player.getPlayer() && typeof player.getPlayer().setFullScreen != "undefined") {
            player.getPlayer().setFullScreen(false);
        }
        //flash播放器控制栏上点击状态可能不对，如果已购买的就显示弹窗了
        if ((PAY_INFO.status == 4 && txv.playdata.isBuy) || (PAY_INFO.status == 5 && (txv.playdata.isVip || txv.playdata.isBuy)) || (PAY_INFO.status == 5 && txv.playdata.isVip)) {
            //说明这个用户可以看了，不需要弹tips提醒了

            Live.tj2.hot("flash.paystatus.err");
            var tips = new txv.tips("Message", "支付状态获取异常，请刷新页面重试");
            tips.SetType(txv.tips.ConstTipsType.Warning);
            tips.SetBtn("确定", "取消");
            tips.onBtnOk = function() {
                tips.SetHide();
                // 这里添加确定按钮的触发事件
                setTimeout(function() {
                    window.location.reload();
                }, 1000);
            };
            tips.FillPage();
            return false;
        }
        //控制栏上只有两种状态，有券时用券支付，无券时开通好莱坞会员
        if (ticketNum > 0) {
            Live.tj2.hot("flash.control.quan");
            __handelBuy();
        } else {
            Live.tj2.hot("flash.control.openvip");
            if (!txv.login.isLogin() || txv.login.isLowLogin()) {
                txv.login.openLogin({
                    "success": openMiniPay
                });
            } else {
                openMiniPay();
            }
        }
    };
    /**
     * 初始化影片介绍下方的支付按钮点击事件
     */
    this.initGoPayBtn = function(evt) {
        var $self = this;
        var $doc = $j(document);
        var ticklist = [];

        function getTickErr() {
            showErrTips("获取观影券信息错误");
        }
        //券支付
        function openTickTrade() {
            if (ticklist.length > 0) {
                fillTicketInfo(ticklist);
                pay_report_dj({
                    plat: 0,
                    step: 1,
                    uin: txv.login.getUin(),
                    type: 3,
                    payitem: '1*' + COVER_INFO.id
                });

            } else {
                seajs.use('hw.request', function(Req) {
                    var timestamp = new Date().getTime();
                    Req.myticket(true).done(function(json) {
                        if (json && json.result) {
                            if (json.result.code === -11) {
                                function getUin() {
                                    var uin = parseInt(Live.cookie.get('uin').replace(/^o0*/g, ""), 10);
                                    if (!uin || uin <= 10000) {
                                        uin = parseInt(Live.cookie.get('luin').replace(/^o0*/g, ""), 10);
                                        if (!uin || uin <= 10000) {
                                            return 0;
                                        }
                                    }
                                    return uin;
                                }
                                pay_report_dj({
                                    plat: 0,
                                    step: 1,
                                    uin: getUin(),
                                    costtime: (new Date().getTime()) - timestamp,
                                    cginame: 'user_ticket',
                                    type: 3,
                                    code_1: json.result.code,
                                    msg: '登录校验失败',
                                    payitem: '1*' + COVER_INFO.id
                                });
                                txv.login.openLogin();
                            } else if (json.result.code === 0 && $j.isArray(json.list)) {
                                ticklist = json.list;
                                fillTicketInfo(ticklist);
                                pay_report_dj({
                                    plat: 0,
                                    step: 1,
                                    uin: txv.login.getUin(),
                                    costtime: (new Date().getTime()) - timestamp,
                                    cginame: 'user_ticket',
                                    type: 3,
                                    payitem: '1*' + COVER_INFO.id
                                });
                            } else {
                                getTickErr();
                                pay_report_dj({
                                    plat: 0,
                                    step: 1,
                                    uin: txv.login.getUin(),
                                    costtime: (new Date().getTime()) - timestamp,
                                    cginame: 'user_ticket',
                                    type: 3,
                                    code_1: json.result.code,
                                    msg: 'other',
                                    payitem: '1*' + COVER_INFO.id
                                });
                            }
                        } else {
                            getTickErr();
                            pay_report_dj({
                                plat: 0,
                                step: 1,
                                uin: txv.login.getUin(),
                                costtime: (new Date().getTime()) - timestamp,
                                cginame: 'user_ticket',
                                type: 3,
                                code_1: '-99999',
                                msg: 'other',
                                payitem: '1*' + COVER_INFO.id
                            });

                        }
                    }).fail(function() {
                        pay_report_dj({
                            plat: 0,
                            step: 1,
                            uin: txv.login.getUin(),
                            costtime: (new Date().getTime()) - timestamp,
                            cginame: 'user_ticket',
                            type: 3,
                            code_1: 500,
                            msg: '超时',
                            payitem: '1*' + COVER_INFO.id
                        });
                        getTickErr();
                    });
                });
            }
        }

        function fillTicketInfo(arr) {
            if ($j.isArray(arr) && arr.length > 0) {
                var tot = 0,
                    free = 0,
                    freeTicket = [],
                    cashTicket = [];
                for (var i = 0, l = arr.length; i < l; i++) {
                    var t = arr[i];
                    tot += t.num;
                    if (t.ttype != 1) { // 免费券
                        free += t.num;
                        freeTicket.push(t);
                    } else { // 现金券
                        cashTicket.push(t);
                    }
                }
                if (freeTicket.length) {
                    freeTicket.sort(function(t1, t2) {
                        if (t1.ttype < t2.ttype) {
                            return -1;
                        } else if (t1.ttype > t2.ttype) {
                            return 1;
                        } else
                            return 0;
                    });
                    var f = freeTicket[0];
                    showTickTips(f);
                }
            }
        }

        function showTickTips(tickinfo) {
            var cur = new Date(new Date() - 0 + 2 * 86400000);
            var month = cur.getMonth() + 1;
            var day = cur.getDate();
            if (month < 10) {
                month = "0" + month;
            }
            if (day < 10) {
                day = "0" + day;
            }
            if (useNewFeature) {
                // var tpl = '<div class="pop_wrap pop_wrap_v2 pop_pay_wrap_v2" style="opacity:1;" id="pop_paytip">';
                // tpl += '    <div class="pop_play">';
                // tpl += '        <div class="title"><a href="javaScript:void(0)" class="close" data-type="closetip">关闭</a></div>';
                // tpl += '        <div class="con m_con">';
                // tpl += '         <h4 class="sub_title">'+(!!txv.playdata.isVip ? '您已是好莱坞会员，' : '')+'用券免费观看完整影片</h4>';
                // tpl += '            <div class="vip_info">';
                // tpl += '                <dl>';
                // tpl += '                 <dt>观影有效期：</dt>';
                // tpl += '                    <dd>2 天内无限次观看（至'+cur.getFullYear()+'-'+month+'-'+cur.getDate()+'）</dd>';
                // tpl += '                    <dt>可用观影券：</dt>';
                // tpl += '                    <dd>'+ticketNum+' 张</dd>';
                // tpl += '                    <dt>本次支付消耗：</dt>';
                // tpl += '                    <dd><span class="tips">1</span>张</dd>';
                // tpl += '                </dl>';
                // tpl += '            </div>';
                // tpl += '            <a href="javaScript:void(0)" class="btn" data-type="subtick" data-tid="' + tickinfo.tid + '" data-ttype="' + tickinfo.ttype + '" data-pid="' + tickinfo.pid + '" data-money="' + tickinfo.value + '" data-vday=' + tickinfo.vday + '>确定支付</a>';
                // tpl += '        </div>';
                // tpl += '    </div>';
                // tpl += ' <div id="player_mask" class="player_mask"></div>';
                // tpl += '</div>';
                // $j("#poptip").remove();
                // $j('#mod_player').append(tpl);
                // txv.login.showCenterNobg(getElementById("pop_paytip"),0,0,$j('#mod_player'));
            } else {
                if ($("#pop_paytip").size() > 0) return;
                var tpl = '<div class="pop_wrap pop_wrap_v2 pop_pay_wrap_v2" style="opacity:1;" id="pop_paytip">';
                tpl += '    <div class="pop_play">';
                tpl += '        <div class="title"><a href="javaScript:void(0)" class="close" data-type="closetip">关闭</a></div>';
                tpl += '        <div class="con m_con">';
                tpl += '            <h4 class="sub_title">' + (!!txv.playdata.isVip ? '您已是好莱坞会员，' : '') + '用券免费观看完整影片</h4>';
                tpl += '            <div class="vip_info">';
                tpl += '                <dl>';
                tpl += '                    <dt>观影有效期：</dt>';
                tpl += '                    <dd>2 天内无限次观看（至' + cur.getFullYear() + '-' + month + '-' + day + '）</dd>';
                tpl += '                    <dt>可用观影券：</dt>';
                tpl += '                    <dd>' + ticketNum + ' 张</dd>';
                tpl += '                    <dt>本次使用：</dt>';
                tpl += '                    <dd><span class="tips">1</span>张</dd>';
                tpl += '                </dl>';
                tpl += '            </div>';
                tpl += '            <a href="javaScript:void(0)" class="btn" data-type="subtick" data-tid="' + tickinfo.tid + '" data-ttype="' + tickinfo.ttype + '" data-pid="' + tickinfo.pid + '" data-money="' + tickinfo.value + '" data-vday=' + tickinfo.vday + '>确定使用</a>';
                tpl += '        </div>';
                tpl += '    </div>';
                tpl += '    <div id="player_mask" class="player_mask"></div>';
                tpl += '</div>';
                $j('body').append(tpl);
                txv.login.showMask("pop_paytip", 0, 0, 0);
                var pop = getElementById("pop_paytip")
                txv.login.showCenterNobg(pop);
                txv.login.ie6hook(pop);
            }
        }
        //跳转到支付页支付
        function goBuyPage() {
            //用券支付在当前页支付
            __tenplay_hidePayTips()
            if (ticketNum > 0) {
                openTickTrade();
            } else {
                $me.openPayByLogin();
                // location.href = fm.common.getPayUrl(COVER_INFO.id);
            }
        }

        function buyLinkHandle(evt) {
            if (Live.login.getLoginType()) {
                goBuyPage();
            } else {
                if (!!evt) {
                    evt.preventDefault();
                } else {
                    Live.event.preventDefault();
                }
                __tenplay_hidePayTips();
                txv.login.openPayLogin({
                    success: function() {
                        //if(Live.login.getLoginType() != 'qq'){
                        //  setTimeout(function(){window.location.reload();},1000);
                        //  return;
                        //}
                        if (!useNewFeature) {
                            if ($self.isNeedVipPay()) { // 会员收费
                                $j("#mod_player").off("check::vipbuy").on("check::vipbuy", function() {
                                    if (!txv.playdata.isBuy) {
                                        if (Live.login.getLoginType() == 'qq') {
                                            goBuyPage();
                                        }
                                    }
                                    $j("#mod_player").off("check::vipbuy");
                                });
                            } else {
                                $j("#mod_player").off("check::vipbuy").on("check::vipbuy", function() {
                                    if (!txv.playdata.isVip && !txv.playdata.isBuy) {
                                        if (Live.login.getLoginType() == 'qq') {
                                            goBuyPage();
                                        }
                                    }
                                    $j("#mod_player").off("check::vipbuy");
                                });
                            }
                        }
                    },
                    pay_type: 1
                });
            }
        }
        //暴露个方法到外面方便flash调用,需要根据会员身份判断是否需要拉起minipay
        window.__handelBuy = buyLinkHandle;

        function vipLinkHandle(el, evt) {
            evt.preventDefault();
            __tenplay_hidePayTips();
            if (!txv.login.isLogin() || (Live.login.getLoginType() == 'qq' && txv.login.isLowLogin())) {
                txv.login.openPayLogin({
                    aid: $(el).pay('aid'),
                    success: function() {
                        $j("#mod_player").off("check::vipbuy").on("check::vipbuy", function() {
                            if (!txv.playdata.isVip && Live.login.getLoginType() == 'qq') {
                                $j(el).pay();
                            } else if (txv.playdata.isVip && Live.login.getLoginType() == 'wx') {
                                txv.login.bye_login();
                            }
                            $j("#mod_player").off("check::vipbuy");
                        });
                    }
                });
            } else {
                $j(el).pay();
            }
        }
        //对于想要用钱买的用户当然要满足他的愿望了
        if ($j.util.useHtml5() && $j.util.isEventSupported("touchstart")) {
            $j("#mod_player,#vip_pay").delegate("a[data-type='buylink']", "touchstart click", function(evt) {
                //                  evt.stopPropagation();
                buyLinkHandle(evt);
            }).on("touchstart click", "a[data-toggle='l_pay']", function(evt) {
                vipLinkHandle(this, evt);
            }).on("touchstart click", "a[data-type='moneybuy']", function(evt) {
                $me.openPayByLogin();
                __tenplay_hidePayTips();
                // location.href = fm.common.getPayUrl(COVER_INFO.id);
                return false;
            });
        } else {
            $doc.delegate("a[data-type='buylink']", "click", function(evt) {
                buyLinkHandle(evt);
            }).on("click", "a[data-toggle='l_pay']", function(evt) {
                vipLinkHandle(this, evt);
            }).on("click", "a[data-type='moneybuy']", function(evt) {
                $me.openPayByLogin();
                __tenplay_hidePayTips();
                // location.href = fm.common.getPayUrl(COVER_INFO.id);
                return false;
            });
        }
        $doc.delegate("a[data-type='change_qq']", "click", function(evt) {
            txv.login.openLogin({
                "success": function() {
                    setTimeout(function() {
                        window.location.reload();
                    }, 1000);
                }
            });
        });

        $doc.delegate("a[data-type='wxok_refresh']", "click", function(evt) {
            if (!txv.login.isLogin()) {
                txv.login.openLogin({
                    "success": function() {
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    }
                });
            } else {
                window.location.reload();
            }
        });

        $doc.delegate("a[data-type='wxok']", "click", function(evt) {

            if (!txv.login.isLogin()) {
                txv.login.openLogin({
                    "success": function() {
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                        if (!useNewFeature) {
                            $j("#mod_player").off("checkvipend").on("checkvipend", function() {
                                if ($me.isOnlyPrevUser) {
                                    __tenplay_showPayTips();
                                }
                                //调用完之后就取消掉这个事件防止调用多次
                                $j("#mod_player").off("checkvipend");
                            });
                        }
                    }
                });
                __tenplay_hidePayTips();
                return false;
            }
            setTimeout(function() {
                window.location.reload();
            }, 1000);
            if (ticketNum > 0) {
                __handelBuy(evt);
            } else {
                if (!useNewFeature) {
                    txv.login.hideMask();
                }
                try {
                    var totalTime = typeof txv.playdata.player.getTotaltime == "function" ? parseInt(txv.playdata.player.getTotaltime(), 10) : VIDEO_INFO.duration;
                    _flash_view_history(0, 310, totalTime);
                } catch (e) {

                }
                __tenplay_hidePayTips();
                $me.checkIsVip();
            }
            return false;
        });
        $doc.delegate("[data-type='backtotips']", "click", function() {
            ticklist = [];
            $j(this).parents(".pop_wrap").remove();
            $j(this).parents(".mod_play_layer").remove();
            if ($j(this).attr("data-retcode") == -11) {
                txv.login.openLogin();
            } else {
                openTickTrade();
            }
        });
        $doc.delegate("[data-type='closetip']", "click", function() {
            if (!useNewFeature) {
                txv.login.hideMask();
            }
            $j(this).parents(".pop_wrap").remove();
            $j(this).parents(".mod_play_layer").remove();
            if (PAY_INFO.status == 4 && $(this).hasClass('ticketpay')) {
                pay_report_dj({
                    plat: 0,
                    step: 7,
                    uin: txv.login.getUin(),
                    type: 3,
                    payitem: '1*' + COVER_INFO.id
                });
            }

        });
        $doc.delegate("[data-type='cancel']", "click", function() {
            if (!useNewFeature) {
                txv.login.hideMask();
            }
            $j(this).parents(".pop_wrap").remove();
            $j(this).parents(".mod_play_layer").remove();
        });
        $doc.delegate("[data-type='subtick']", "click", function() {
            Live.event.preventDefault();
            var $sub = $j(this);
            $sub.parents(".pop_wrap").remove();
            if (!txv.login.isLogin() || txv.login.isLowLogin()) {
                if (txv.login.getLoginType() != 'wx') {
                    txv.login.openLogin();
                    return;
                }
            }
            var _data = {
                uin: txv.login.getUin(),
                cid: COVER_INFO.id,
                pid: "10001",
                pchannel: "nomoney",
                money: $sub.attr("data-money"),
                title: COVER_INFO.title,
                days: $sub.attr("data-vday"),
                tid: $sub.attr("data-tid"),
                pubid: $sub.attr("data-pid"),
                tcount: "0",
                platform: "1",
                version: "film",
                aid: $(this).pay('aid'),
                g_tk: $j.getToken()
            };
            pay_report_dj({
                plat: 0,
                step: 5,
                uin: txv.login.getUin(),
                type: 3,
                payitem: '1*' + COVER_INFO.id
            });
            seajs.use('hw.request', function(Req) {
                var timestamp = new Date().getTime();
                Req.ticket_trade(true, _data).done(function(json) {
                    var ret = !!json ? json.ret : -1;
                    if (ret == 0 || ret == -206) {
                        showPaySucTips();
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                        $me.checkIsVip();
                    } else if (ret == -11) {
                        if (Live.login.getLoginType() == 'wx') {
                            $('body').append(
                                '<div class="pop_wrap pop_wrap_v2 pop_wrap_qr" style="position: relative;top: 0;left: 0; opacity: 1;" id="qr_ticket_buy">' + '<div class="pop_play">' + '<div class="title"><a href="javascript:" class="close" data-type="closetip">关闭</a></div>' + '<div class="ly_bd cf">' + '<div class="ly_ct">' + '<div class="qr_list">' + '<h3 class="qr_tit">使用观影券观看<span class="name">《' + COVER_INFO.title + '》</span></h3>' + '<div class="qr_pic">' + '<img id="ticket_buy_qr" alt="">' + '<span class="icon_wx1"></span>' + '</div>' + '<p class="qr_txt">使用微信扫描二维码</p>' + '<p class="qr_tips">请使用当前登录的微信扫码</p>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>');
                            txv.login.showMask('qr_ticket_buy', 0, 0, 0);
                            var pop = getElementById("qr_ticket_buy")
                            txv.login.showCenterNobg(pop);
                            txv.login.ie6hook(pop);
                            $.pay_qrimg({
                                id: 'ticket_buy_qr',
                                pay_type: 2,
                                use_ws: true,
                                pay_suc: function() {
                                    $('#qr_ticket_buy .qr_txt').html('支付成功');
                                    setTimeout(function() {
                                        window.location.reload();
                                    }, 1000);
                                },
                                scan_suc: function() {
                                    $('#qr_ticket_buy .qr_txt').html('扫描成功');
                                    $('#qr_ticket_buy .qr_tips').html('请在手机上完成支付');
                                }
                            });
                            return;
                        }
                        txv.login.openLogin();

                        function getUin() {
                            var uin = parseInt(Live.cookie.get('uin').replace(/^o0*/g, ""), 10);
                            if (!uin || uin <= 10000) {
                                uin = parseInt(Live.cookie.get('luin').replace(/^o0*/g, ""), 10);
                                if (!uin || uin <= 10000) {
                                    return 0;
                                }
                            }
                            return uin;
                        }
                        pay_report_dj({
                            plat: 0,
                            step: 6,
                            uin: getUin(),
                            openuin: getUin(),
                            type: 3,
                            costtime: (new Date().getTime()) - timestamp,
                            cginame: 'ticket_trade',
                            code_1: ret,
                            msg: json.msg_desc,
                            payitem: '1*' + COVER_INFO.id
                        });
                        return false;
                    } else {
                        showErrTips('', "支付失败", '详细信息：' + json.msg_desc, '', ret);
                        pay_report_dj({
                            plat: 0,
                            step: 6,
                            uin: txv.login.getUin(),
                            openuin: txv.login.getUin(),
                            type: 3,
                            costtime: (new Date().getTime()) - timestamp,
                            cginame: 'ticket_trade',
                            code_1: ret,
                            msg: json.msg_desc,
                            payitem: '1*' + COVER_INFO.id
                        });
                        return false;
                    }
                    pay_report_dj({
                        plat: 0,
                        step: 6,
                        uin: txv.login.getUin(),
                        openuin: txv.login.getUin(),
                        type: 3,
                        costtime: (new Date().getTime()) - timestamp,
                        cginame: 'ticket_trade',
                        code_1: ret,
                        payitem: '1*' + COVER_INFO.id
                    });
                }).fail(function() {
                    showErrTips('', '很抱歉！由于系统或网络链接出错等原因，', '暂时无法连接到服务器，请稍后重试');
                    pay_report_dj({
                        plat: 0,
                        step: 6,
                        uin: txv.login.getUin(),
                        openuin: txv.login.getUin(),
                        type: 3,
                        costtime: (new Date().getTime()) - timestamp,
                        cginame: 'ticket_trade',
                        code_1: 500,
                        msg: '超时',
                        payitem: '1*' + COVER_INFO.id
                    });
                });
            })
        });
    }

    this.initActors = function() {
        $j.ajax({
            url: "http://data.video.qq.com/fcgi-bin/data?tid=205&appid=20001059&appkey=c8094537f5337021&otype=json&idlist=" + COVER_INFO.id,
            dataType: "jsonp",
            //jsonpCallback: "myHotcommentList",
            success: function(json) {
                if (json && json.errorno == 0 && json.results && json.results[0] && json.results[0].retcode == 0) {
                    var actors = $('#actors_infor');
                    var i = 0;
                    for (; i < json.results[0].fields.director.length; ++i) {
                        if (json.results[0].fields.director_info[i] == null) {
                            continue;
                        }
                        actors.append('<li class="item">' + '<a href="http://v.qq.com/search.html?pagetype=3&stag=word.tag&ms_key=' + json.results[0].fields.director[i] + '"  target="_blank" class="pic">' + '    <img src="' + json.results[0].fields.director_info[i].pic200x200 + '" title="' + json.results[0].fields.director[i] + '" alt="">' + '   <em class="mask_star">导演</em>' + '</a>' + '<a class="name" target="_blank" href="http://v.qq.com/search.html?pagetype=3&stag=word.tag&ms_key=' + json.results[0].fields.director[i] + '" title="' + json.results[0].fields.director[i] + '">' + json.results[0].fields.director[i] + '</a>' + '</li>');
                    }

                    for (var j = 0; j < json.results[0].fields.leading_actor.length && i < 6; ++j) {
                        if (json.results[0].fields.leading_actor_info[j] == null) {
                            continue;
                        }
                        actors.append('<li class="item">' + '<a href="http://v.qq.com/search.html?pagetype=3&stag=word.tag&ms_key=' + json.results[0].fields.leading_actor[j] + '"  target="_blank" class="pic">' + '   <img src="' + json.results[0].fields.leading_actor_info[j].pic200x200 + '"  title="' + json.results[0].fields.leading_actor[j] + '" alt="">' + '</a>' + '<a class="name" target="_blank" href="http://v.qq.com/search.html?pagetype=3&stag=word.tag&ms_key=' + json.results[0].fields.leading_actor[j] + '"  title="' + json.results[0].fields.leading_actor[j] + '">' + json.results[0].fields.leading_actor[j] + '</a>' + '</li>');
                        ++i;
                    }

                } else {

                }
            },
            error: function() {

            }

        });
    }
    this.initRank = function() {
        /**
         * 排行榜
         */
        var SlIDER_CONFIG = {
            triggerType: 'hover',
            activeTriggerClass: 'current',
            duration: 300,
            lazyStr: '_src'
        };
        var opts = $j.extend({}, SlIDER_CONFIG);
        $j(".j_tabshow").Slider(opts);
        $('.wrapper_right').Slider(opts);
        var tag = 3;
        var vid = VIDEO_INFO.vid;

        function get_top_watch() {

        }

        function get_top_comment() {
            $j.ajax({
                url: "http://video.coral.qq.com/filmreviewr/c/upcomment/" + COVER_INFO.id + '?reqnum=1',
                dataType: "jsonp",
                jsonpCallback: "myHotcommentList",
                success: function(json) {
                    if (json && json.data && json.data.commentid && json.data.commentid[0] && json.data.commentid[0].userinfo) {
                        var info = json.data.commentid[0].userinfo;
                        var nick = decodeURIComponent(info.nick);
                        //$('.comment .name').remove();
                        //$('.mod_master_list .list .comment ').prepend('<span class="name txt_red" title="'+nick+'">' + nick + '</span>');

                        $('.comment .name').text(nick);
                        if (info.hwvip) {
                            $('.comment .name').after('<a href="http://film.qq.com/vip.html?ptag=film_direct.comment" target="_blank" title="会员尊享红名特权" class="icon_vip"><span class="num num_' + info.hwlevel + '"></span></a>').addClass('txt_red');
                        }
                        var head = info.head.replace("s=40", "s=100");
                        var iframe_url = "http://v.qq.com/txyp/active_user/active_user.htm?targetid=" + json.data.commentid[0].targetid + "&commentid=" + json.data.commentid[0].id + "&coverid=" + COVER_INFO.id + "&userid=" + 51228242;
                        $('.a_cover .comment').attr('src', head);
                        var leave1 = true;
                        var leave2 = true;
                        var dom1 = $('.a_cover .comment');
                        var dom2 = $('.iframe_ypdr');
                        dom1.mouseover(function() {
                            var ifram_dom = $('iframe', dom2);
                            if (!ifram_dom.attr('src')) {
                                ifram_dom.attr('src', iframe_url);
                            }
                            dom2.css('display', 'block');
                            leave1 = false;
                        });
                        dom2.mouseover(function() {
                            dom2.css('display', 'block');
                            leave2 = false;
                        });

                        dom1.mouseleave(function() {
                            leave1 = true;
                            setTimeout(function() {
                                if (leave1 && leave2) {
                                    dom2.css('display', 'none');
                                }
                            }, 100);
                        });
                        dom2.mouseleave(function() {
                            leave2 = true;
                            setTimeout(function() {
                                if (leave1 && leave2) {
                                    dom2.css('display', 'none');
                                }
                            }, 100);
                        });

                    } else {
                        $('.comment .name').text('空缺中');
                    }
                },
                error: function() {
                    $('.comment .name').text('空缺中');
                }

            });
        }

        function get_top_share() {
            $j.ajax({
                url: "http://sns.video.qq.com/fcgi-bin/dlib/dataout?auto_id=1726&otype=json&v_id=" + vid,
                dataType: "jsonp",
                success: function(json) {
                    var watch = '',
                        share = '';
                    if (json.returncode == 0 && json.list) {
                        for (var i = 0; i < json.list.length; ++i) {
                            var type = json.list[i].type;
                            if (type == 1) {
                                watch = json.list[i].uin;
                            }
                            if (type == 2) {
                                share = json.list[i].uin;
                            }
                        }
                    }
                    $j.ajax({
                        url: "http://pay.video.qq.com/fcgi-bin/share_report?request_type=2&uin=10000&otype=json&vid=" + vid + (watch ? '&watch=' + watch : '') + (watch ? '&share=' + share : ''),
                        dataType: "jsonp",
                        success: function(json) {
                            if (json && json.share_rank && json.share_rank[0] && json.share_rank[0] && (json.share_rank[0].nick != undefined) && (json.share_rank[0].vip_level >= 0)) {
                                var nick = decodeURIComponent(json.share_rank[0].nick);
                                $('.share .name').text(nick).attr('title', nick);
                                var head = json.share_rank[0].face.replace("s=40", "s=100");
                                $('.a_cover .share').attr('src', head);
                                if (json.share_rank[0].vip_level != "0") {
                                    $('.share .name').after('<a href="http://film.qq.com/vip.html?ptag=film_direct.comment" target="_blank" title="会员尊享红名特权" class="icon_vip"><span class="num num_' + json.share_rank[0].vip_level + '"></span></a>').addClass('txt_red');
                                }
                            } else {
                                $('.share .name').text('空缺中');
                            }
                            if (json && json.watch_rank && json.watch_rank[0] && json.watch_rank[0] && (json.watch_rank[0].nick != undefined) && (json.watch_rank[0].vip_level >= 0)) {
                                var nick = decodeURIComponent(json.watch_rank[0].nick);
                                $('.watch .name').text(nick).attr('title', nick);
                                var head = json.watch_rank[0].face.replace("s=40", "s=100");
                                $('.a_cover .watch').attr('src', head);
                                if (json.watch_rank[0].vip_level != "0") {
                                    $('.watch .name').after('<a href="http://film.qq.com/vip.html?ptag=film_direct.comment" target="_blank" title="会员尊享红名特权" class="icon_vip"><span class="num num_' + json.watch_rank[0].vip_level + '"></span></a>').addClass('txt_red');
                                }
                            } else {
                                $('.watch .name').text('空缺中');
                            }
                        },
                        error: function() {
                            $('.share .name').text('空缺中');
                            $('.watch .name').text('空缺中');
                        }

                    });
                }
            });

        }
        var rank_tpl = "";
        rank_tpl += '<div class="mod_master_list">';
        rank_tpl += '<ul class="list cf">';
        rank_tpl += '<li class="hover">';
        rank_tpl += '<div href="javaScript:void(0)" class="a_cover">';
        rank_tpl += '<img class="cover comment" src="http://i.gtimg.cn/qqlive/images/20141022/default_master.png" alt=""> </img>';
        rank_tpl += '</div>';
        rank_tpl += '<p class="tit" title="热门评论获赞数最多的会员">最佳影评</p>';
        rank_tpl += '<p class="info_txt cf comment">';
        rank_tpl += ' <span class="name"></span>';
        rank_tpl += '</p>';
        rank_tpl += '<div class="iframe_ypdr" style="display: none;">';
        rank_tpl += '<iframe width="100%" height="100%" allowtransparency="true" scrolling="no" frameborder="no" ></iframe>';
        rank_tpl += '</div>';
        rank_tpl += '</li>';
        rank_tpl += '<li>';
        rank_tpl += '<div href="javaScript:void(0)" class="a_cover">';
        rank_tpl += '<img class="cover watch" src="http://i.gtimg.cn/qqlive/images/20141022/default_master.png" alt="">';
        rank_tpl += '</div>';
        rank_tpl += '<p class="tit" title="观看该影片且看片总数最多的会员">超级影迷</p>';
        rank_tpl += '<p class="info_txt cf watch">';
        rank_tpl += '<span class="name"></span>';
        rank_tpl += '</p>';
        rank_tpl += '</li>';
        rank_tpl += '<li>';
        rank_tpl += '<div href="javaScript:void(0)" class="a_cover">';
        rank_tpl += '<img class="cover share" src="http://i.gtimg.cn/qqlive/images/20141022/default_master.png" alt="">';
        rank_tpl += '</div>';
        rank_tpl += '<p class="tit" title="每天分享次数最多的会员">分享达人</p>';
        rank_tpl += '<p class="info_txt cf share">';
        rank_tpl += '<span class="name"></span>';
        rank_tpl += '</p>';
        rank_tpl += '</li>';
        rank_tpl += '</ul>';
        rank_tpl += '</div>';
        $j("#daren").prepend('<div class="mod_tit_film path_film_title"><div class="tit_info">观影达人</div><a href="javaScript:void(0)" class="more rank_rule">上榜规则 &gt;&gt;</a></div>');
        $j(".path_film_title").after(rank_tpl);
        get_top_comment();
        get_top_share();

        rank_tpl = "";
        rank_tpl += '<div class="layer_wrap" style=" display:none; margin-left:-270px; margin-top: -130px;">';
        rank_tpl += '<div class="mod_layer mod_layer_rules">';
        rank_tpl += '<iframe frameborder="0" class="iframe_mask"></iframe>';
        rank_tpl += '<div class="layer_conent">';
        rank_tpl += '<div class="layer_hd cf">';
        rank_tpl += '<h3 class="layer_tit">上榜规则</h3>';
        rank_tpl += '<a href="javaScript:void(0)" class="layer_close" title="关闭">×</a>';
        rank_tpl += '</div>';
        rank_tpl += '<div class="layer_bd cf">';
        rank_tpl += '<h3 class="info_tit">每部影片的观影达人按以下规则评选：</h3>';
        rank_tpl += '<div class="info_txt">';
        rank_tpl += '<p class="txt"><em>最佳影评</em>：该影片“深度解读”评论获点赞数最多用户</p>';
        rank_tpl += '<p class="txt"><em>超级影迷</em>：当天观看该影片的用户中最近7天看片数最多的会员（观看时长需超过全片时长的80%，同时观看多部片仅算1部）</p>';
        rank_tpl += '<p class="txt"><em>分享达人</em>：当天分享该影片次数最多的会员（每个分享渠道限1次）</p>';
        rank_tpl += '</div>';
        rank_tpl += '<div class="info_txt">';
        rank_tpl += '<p class="txt"><i class="icon_question"></i>注：数据于每晚24时更新，评选当天的观影达人；如相等则取最先评论/观看/分享的会员。</p>';
        rank_tpl += '</div>';
        rank_tpl += '</div>';
        rank_tpl += '</div>';
        rank_tpl += '</div>';
        rank_tpl += '</div>';
        rank_tpl += '<div id="mask_layer" class="mask_layer" style="display:none"></div>';

        $('body').append(rank_tpl);
        $('.rank_rule').click(function() {
            $(".layer_wrap").css("display", "block");
            $(".mask_layer").css("display", "block");
        });
        $('.layer_close').click(function() {
            $(".layer_wrap").css("display", "none");
            $(".mask_layer").css("display", "none");
        });
        if (Live.userAgent.ie == 6) {
            $(".layer_wrap").css("margin-top", $(document).scrollTop() - 135 + "px");
        }

    }
    this.destoryOCX = function() {
        /**
         * drm视频需要先把播放器干掉不然关闭时会报错 由于登录框是引入的iframe，关闭时也会调用该方法，先屏蔽该方法
         */
        // window.onbeforeunload = function() {
        // txv.playdata.player = null;
        // }
    }

    function addLoginReprotJSInfo() {
        txv.login.addLoginCallback(function() {
            reportJSInfo(JS_REPORT_TYPE.LOGIN, "" + txv.login.getUin());
        });
        //重定义居中方法，主要是因为样式上有个背景不能使用#ffffff
        txv.login.showCenterNobg = function(loginwin, w, h, parentmod) {
            if (!loginwin)
                return;
            var $mod = $j(loginwin),
                $innerMod = $mod.find(".pop_play");
            if ($innerMod.length == 0) {
                $innerMod = $mod;
            }
            var size = [$innerMod.outerWidth(), $innerMod.outerHeight()],
                zIndex = parseInt($mod.css("zIndex")),
                w = w || size[0] || 373,
                h = h || size[1] || 235;
            if (COVER_INFO.typeid == 1 && !!$(".login_tips")[0]) {
                h += $(".login_tips").outerHeight();
            }
            if (!parentmod) {
                //用内部框算宽高
                var scrhei = document.documentElement.scrollTop || document.body.scrollTop,
                    clihei = document.documentElement.clientHeight || document.body.clientHeight;
                $innerMod.css({
                    top: 0,
                    left: 0,
                    marginTop: 0,
                    marginLeft: 0
                });
                $mod.css({
                    width: w + "px",
                    height: h + "px",
                    top: Live.userAgent.ie != 6 ? "50%" : ((clihei / 2 + scrhei) - h / 2 + "px"),
                    left: "50%",
                    marginLeft: -w / 2 + "px",
                    marginTop: Live.userAgent.ie != 6 ? (-h / 2 + "px") : ("0px"),
                    position: Live.userAgent.ie != 6 ? "fixed" : "absolute",
                    zIndex: zIndex || "10001",
                    display: 'block',
                    padding: '0px'
                });

            } else {
                typeof parentmod == "string" && (parentmod = $j(parentmod));
                parentmod.css("position", "relative");
                $mod.css({
                    width: w + "px",
                    height: h + "px",
                    top: "50%",
                    left: "50%",
                    marginLeft: -w / 2 + "px",
                    marginTop: -h / 2 + "px",
                    position: "absolute",
                    zIndex: zIndex || "10001",
                    display: 'block',
                    padding: '0px'
                }).find(".pop_play").css({
                    top: 0,
                    left: 0,
                    marginTop: 0,
                    marginLeft: 0
                });
            }
            if ($j.util.useHtml5()) {
                document.documentElement.scrollTop = 0;
            }
        }
        txv.login.ie6hook = function(loginwin) {
            if (Live.userAgent.ie == 6) {
                $e("#mask_layer").css("height", document.documentElement.scrollHeight);
                hookScroll = function() {
                    txv.login.showCenterNobg(loginwin);
                }
                txv.login.onHideMask = function() {
                    $j(window).unbind('scroll', hookScroll);
                }
                $j(window).bind('scroll', hookScroll);
            }
        }
    }
    /**
     * 设置Actions动作
     * 
     * @override
     * @public
     */
    this.initAction = function() {
        this.addAction(txv.ACTION.DOM_READY, addLoginReprotJSInfo);
        this.unshiftAction(txv.ACTION.AFTER_SHOW_PLAYER, this.initSwitch);
        this.addAction(txv.ACTION.PLAYIING, this.initPlayerTips);
        this.addAction(txv.ACTION.PLAYIING, this.reinitPlayerSize); //reinit player size
        this.initPayCoverAction();
        this.addAction(txv.ACTION.DOM_READY, resetOcxInstallerTips);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, this.initRank);
        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, this.initActors);

        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, this.initHBO);
        this.addAction(txv.ACTION.DOM_READY, this.initCoverDescLink);
        this.addAction(txv.ACTION.DOM_READY, this.initGoPayBtn);
        this.addAction(txv.ACTION.DOM_READY, this.destoryOCX);

        this.addAction(txv.ACTION.AFTER_SHOW_PLAYER, initPrice);
        //暑期活动tab添加
        //this.addAction(txv.ACTION.AFTER_SHOW_PLAYER,this.showSummerActiveTab);      
    };
    this.initSwitch = function() {
        $("#btn_player_expand").on("click", function() {
            var $mod = $('.mod_player_section'),
                toWidth = "1180px",
                toHeight = "545px";;
            if ($mod.hasClass("mod_player_section_active")) {
                $me.hideList = false;
                $mod.removeClass("mod_player_section_active");
                //宽屏
                if (fm.common.scrollStep == 5) {
                    toWidth = "805px";
                } else {
                    toWidth = "680px";
                }
            } else {
                $me.hideList = true;
                $mod.addClass("mod_player_section_active");
                //宽屏
                if (fm.common.scrollStep == 5) {
                    toWidth = "1154px";
                } else {
                    toWidth = "914px";
                }
            }

            function getType() {
                if ($(window).width() >= 1380) {
                    return 'large';
                } else if ($(window).width() >= 1180) {
                    return 'big';
                } else {
                    return 'small';
                }
            }
            fm.common.changeBodyCb.fire(getType());
            return false;
        });
        vslider = $j("#fullplaylist").Slider({
            triggerType: 'hover',
            activeTriggerClass: 'current',
            duration: 300,
            lazyStr: '_src'
        });
    }
    this.reinitPlayerSize = function() {
        function getType() {
            if ($(window).width() >= 1380) {
                return 'large';
            } else if ($(window).width() >= 1180) {
                return 'big';
            } else {
                return 'small';
            }
        }
        fm.common.changeBodyCb.fire(getType());
    }

    function changeTo(toWidth, toHeight) {
        $j("#" + $me.playerModId).css({
            "width": toWidth,
            "height": toHeight
        });
        var player = txv.playdata.player;

        $me.playerInfo.width = PLAYER_INFO.width = toWidth;
        $me.playerInfo.height = PLAYER_INFO.height = toHeight;
        try {
            if (!!player && !!player.getPlayer()) {
                player.getPlayer().style.width = toWidth;
                player.getPlayer().style.height = toHeight;
                if (player.getPlayerType() == "html5" && !!player.$videomod && player.$videomod.css) {
                    player.$videomod.css({
                        "width": toWidth,
                        "height": toHeight
                    });
                    if (!!player.$UILayer) {
                        player.$UILayer.css({
                            "width": toWidth,
                            "height": toHeight
                        });
                    }
                }
                if (player.getPlayerType() == "ocx" && !!player.resize) {
                    player.resize(toWidth, toHeight);
                }
            }
        } catch (e) {

        }

        // var mw = parseInt(toWidth,10),mh = parseInt(toHeight,10);
        // $("#player_mask").css({"width": toWidth,"height": toHeight,marginLeft : -mw / 2 + "px",marginTop : -mh / 2 + "px"});
    }

    function changePlayerSize(type, expand) {
        //expand = true;
        var toWidth = "1153px",
            toHeight = "545px";
        if (type == "large") {
            toWidth = "1354px";
            if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                toWidth = "1093px";
            }
        } else if (type == "small") {
            toWidth = "914px";
            if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                toWidth = "653px";
            }
        } else {
            toWidth = "1153px";
            if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                toWidth = "893px";
            }
        }
        if (PAGE_INFO.ltrLayout) {
            if ($me.hideList) {
                if (type == "small") {
                    toWidth = "914px";
                    if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                        toWidth = "627px";
                    }
                } else {
                    toWidth = "1154px";
                    if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                        toWidth = "867px";
                    }
                }
            } else {
                if (type == "small") {
                    toWidth = "680px";
                    if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                        toWidth = "393px";
                    }
                } else {
                    toWidth = "805px";
                    if (!$('.mod_player_section').hasClass('mod_player_section_active')) {
                        toWidth = "518px";
                    }
                }
            }
        }
        changeTo(toWidth, toHeight);


    }
    /**
     * 设置根据业务逻辑显示播放器的逻辑
     * 
     * @override
     * @public
     */
    this.showPlayerByPageLogic = function() {
            // 当前vid不是正片的时候不使用drm播放
            var cvid = !!txv.playdata.curVideo ? txv.playdata.curVideo.getFullVid() : "";
            cvid = cvid || this.getVidFromUrl();
            var isTag = false;
            if (!!cvid) {
                isTag = $j.inArray($e("#" + cvid).attr("tp"), ["2", "3"]) > -1 ? true : false;
            }
            // 非windows上直接提示受DRM版权保护，因为iPad上是直接播放MP4文件，一键可以下载高清原片的，太危险了
            if (!!PLAYER_INFO.useDRM && !Live.userAgent.windows && !isTag) {
                isDrmVideo = true;
                this.showMobileDeviceCannotPlay();
                if (!!PAY_INFO.macdrm) {
                    this.checkIsVip();
                }
            } else {
                this.checkIsVip();
            }

            // 因为不一定会真的出现播放器，但是也要处理显示了播放器以后的回调，例如播放量、评分、评论都是在显示了播放器以后才初始化
            this.runActions(txv.ACTION.AFTER_SHOW_PLAYER);
        }
        /**
         * mac下的drm视频不能显示播放器
         */
    this.alwaysShowPlayer = function() {
        return !isDrmVideo;
    }
    this.getVideoATagSelector = function() {
        return "li a:not(.cover_wrap)";
    }
    this.setVideoElSelected = function(vid) {
        vid = vid || txv.playdata.curVideo.getFullVid();
        var $vcur = this.getVideoListContainer().find("li.current");
        $vcur.removeClass("current");
        if (COVER_INFO.typeid == 1) {
            //第一次进来是空的
            if (!!lastTimelong) {
                $vcur.find(".trailer_details strong").html(lastTimelong);
            }
            $vcur = this.getVideoListContainer().find("#" + vid);
            if ($vcur.size() > 0) {
                var $currentLi = $vcur.parents("li");
                var $text = $currentLi.find(".trailer_details strong");
                lastTimelong = $text.html();
                $text.html("正在播放");
                $currentLi.addClass("current");
            }
        } else {
            var $curp = $("#fullplaylist").find(".mod_player_tabcont li.current")
            $curp.removeClass("current");
            //片段列表清除选中态
            $curp.find("a.figure .figure_mask").remove();
            $vcur = this.getVideoListContainer().find("#" + vid);
            $("#" + vid).parents("li").addClass("current");

            if ($("#" + vid).parents("div")[0].id === "cliplist") {
                $("#" + vid).parents("li").find("a.figure").append('<span class="figure_mask"><em class="mask_txt"><i class="triangle_right"></i><span class="mask_inner">播放中...</span></em></span>');
                vslider[0].switchTo(1);
            }
        }
    }
    this.initPage = function() {
        //ie6手动计算黑板宽度，啥也不说了。
        if (Live.userAgent.ie == 6) {
            $(window).on("resize", _.throttle(function() {
                $j("#dark_layer,#mask_layer").css("width", document.documentElement.scrollWidth);
            }, 200));
        };

        function getType() {
            if ($(window).width() >= 1380) {
                return 'large';
            } else if ($(window).width() >= 1180) {
                return 'big';
            } else {
                return 'small';
            }
        }
        $(function() {
            var $_switchListID = 1;
            $('.btn_switch').click(function() {
                if ($_switchListID == 1) {
                    $('.mod_player_section').addClass('mod_player_section_active');
                    /*$(this).addClass('btn_switch_active');*/
                    fm.common.changeBodyCb.fire(getType());
                    $_switchListID = 0;
                } else if ($_switchListID == 0) {
                    $('.mod_player_section').removeClass('mod_player_section_active');
                    /*$(this).removeClass('btn_switch_active');*/
                    fm.common.changeBodyCb.fire(getType());
                    $_switchListID = 1;
                };
            });

        });
        fm.common.changeBodyCb.add(changePlayerSize, true);
        //导航，宽屏多两个,小4，大6
        fm.common.changeBodyCb.add(function(type) {
            var $menu = $j(".simple_menu_list li");
            var $moremod = $e("#nav_more .s_pop_menu");
            if (type == "small") {
                if ($menu.size() < 5) {
                    fm.common.fixIe6FloatBug($moremod);
                    return;
                }
                var str = '';
                str += '{for item in data}<tr>';
                str += '     <td>';
                str += '         <a href="${item.url}" target="_blank" _hot="${item.hot}">${item.title}</a>';
                str += '     </td>';
                str += ' </tr>{/for}';
                if (!getElementById("tmpContainer")) {
                    $j('body').append('<div id="tmpContainer" style="display:none;"></div>');
                }
                txv.template.fillHtml({
                    data: NAV_INFO
                }, str, "tmpContainer", true, null, txv.template.FILL_TYPE.TPL_STR, function() {
                    var tpl = $j("#tmpContainer").html();
                    $j("table.sub_menu_list tbody").prepend($j(tpl));
                    var nav = $menu;
                    for (var n in NAV_INFO) {
                        nav.eq(n).remove();
                    }
                    fm.common.fixIe6FloatBug($moremod);
                });
            } else {
                if ($menu.size() > 5) {
                    fm.common.fixIe6FloatBug($moremod);
                    return;
                }
                var str = '{for item in data}<li><a href="${item.url}" _hot="${item.hot}" class="menu_item" target="_blank">${item.title}</a></li>{/for}';
                if (!getElementById("tmpContainer")) {
                    $j('body').append('<div id="tmpContainer" style="display:none;"></div>');
                }
                txv.template.fillHtml({
                    data: NAV_INFO
                }, str, "tmpContainer", true, null, txv.template.FILL_TYPE.TPL_STR, function() {
                    var tpl = $j("#tmpContainer").html();
                    $j(tpl).insertBefore(".simple_menu_list li:last");
                    $j("table.sub_menu_list tbody tr:lt(2)").remove();
                    fm.common.fixIe6FloatBug($moremod);
                });
            }
        });
        //简介也要处理下
        if (typeof DESC_INFO != "undefined") {
            var $mod = $j("#mod_desc");
            var $lk = $j("#lk_desc");
            fm.common.changeBodyCb.add(function(type) {
                if (type == "small") {
                    if (!!DESC_INFO.desc_cut) {
                        $lk.show();
                    }
                    $mod.find("p.detail").html("简介：" + DESC_INFO.desc_cut);
                } else {
                    if (!DESC_INFO.moredesc_cut) {
                        $lk.hide();
                        $mod.addClass("open");
                    } else {
                        $mod.find("p.detail").html("简介：" + DESC_INFO.moredesc_cut);
                    }
                }
            });
        }
        var timer = null,
            computePos = function() {
                var b = $j(".player_wrap")[0].getBoundingClientRect()["bottom"];
                var $f = $j("#modControl"),
                    t = $f[0].getBoundingClientRect()["top"];
                //底部位置大于浮层顶部时隐藏
                if (t < b) {
                    $f.css({
                        "opacity": 0,
                        "right": "2000px"
                    });
                } else {
                    $f.css({
                        "opacity": 1,
                        "right": "20px"
                    });
                }
            }

        function throtCompute() {
            clearTimeout(timer);
            timer = setTimeout(computePos, 200);
        };
        fm.common.initPage({
            "tj2": {
                "forbidden": true
            },
            playPageFlag: true,
            isScrollMenu: false,
            noIPLimit: !!COVER_INFO.noIPLimit
        });
        $j(window).on('scroll resize', throtCompute);
        computePos();
        $j("#nav_more").hoverClass("s_pop_menu_show", 300);
        $j("#gotocmt").on("click", function() {
            var sTop = getElementById("mod_comment").getBoundingClientRect().top;
            var getScrollTop = function(doc) {
                    var _doc = doc || document;
                    return (_doc.defaultView && _doc.defaultView.pageYOffset) || Math.max(_doc.documentElement.scrollTop, _doc.body.scrollTop);
                }
                //          var getClientH = function (doc) {
                //              var _doc = doc || document;
                //              return _doc.compatMode == "CSS1Compat" ? _doc.documentElement.clientHeight : _doc.body.clientHeight;
                //          } 
            var s = getScrollTop();
            if (s) {
                sTop += s;
            }

            txv.playpg.resetScroll(sTop);
        });

        function setQrcode() {
            var aid = $j.pay({
                aid_version: 'V0',
                key4: 9,
                key11: 2,
                _source: 9,
                _scene: 2
            }, "aid");
            $.pay_qrimg({
                id: 'qrimg',
                type: 0,
                use_ws: false,
                aid: aid
            });
        }
        setQrcode();
        txv.login.addLoginCallback(setQrcode);

        function canUseNewFeature() {
            // var uin = getSUin();
            // //登录偶数使用旧版，未登录和奇数使用新版
            // if(uin > 0){
            //  if (uin % 2 == 0) {
            //      useNewFeature = false;
            //  } else {
            //      useNewFeature = true;
            //  }
            // } else {
            //  useNewFeature = false;
            // }
            useNewFeature = false;
        }
        canUseNewFeature();
        txv.login.addLoginCallback(canUseNewFeature);
    }

    /**
     *download button show
     */

    this.showDownload = function() {
        if (Live.userAgent.macs) {
            $("#act_download").remove();
        }
        isDownloadAllowed(function(json) {
            if (!getElementById("act_download")) {
                //add download button
                var downloadBtn = '<div class="action_item action_download" id="act_download">';
                downloadBtn += '<a class="action_title" id="btn_downvideo" href="javaScript:void(0)" role="button"><i class="ico_dl"></i><span class="ico_text">下载</span></a>';
                downloadBtn += '</div>';
                var downloadBtnObj = $j(downloadBtn);
                var shareBtn = $j('#act_shares');
                downloadBtnObj.insertAfter(shareBtn);
            }
            //bind click event
            if (getElementById("act_download")) {
                $j("#act_download").on("click", function() {
                    if (!!QQLive.version.hasQQLiveOcx()) {
                        checkClientVersion();
                    } else {
                        var url = "http://v.qq.com/download.html?ptag=PCdownload";
                        $j("#btn_downvideo").attr("target", "_blank");
                        $j("#btn_downvideo").attr("href", url);
                    }
                });
            }

        }, function() {
            if (getElementById("act_download")) {
                var downloadBtnObj = $j("#act_download");
                downloadBtnObj.remove();
            }
        });

    }

    function isDownloadAllowed(suCb, failCb) {
        var cid = COVER_INFO.id;
        var pf = "1";
        var url = ["http://pay.video.qq.com/fcgi-bin/download?otype=json&_t=3",
            "&cid=", encodeURIComponent(cid), "&pf=", encodeURIComponent(pf)
        ].join("");
        $.ajax({
            url: url,
            dataType: "jsonp",
            success: function(json) {
                var data = json.result;
                if (data && data.code == 0) {
                    suCb && suCb(data);
                } else {
                    failCb && failCb();
                }
            },
            error: function() {
                failCb && failCb();
            }
        });
    }

    function checkClientVersion() {
        var supportMinVersion = "9.8.860.0";
        var currentVersion = tvp.version.getOcx();
        var url = "";
        if (currentVersion < supportMinVersion) { //download client
            showDownloadClientTips();
        } else {
            url = "qqlive://download/videoid=" + txv.playdata.curVideo.getFullVid() + "&vformat=1&cprt=1";
            if (COVER_INFO.id) {
                url = "qqlive://download/vbarid=" + COVER_INFO.id + "&vlist=" + txv.playdata.curVideo.getFullVid() + "&vformat=1&cprt=1";
            }
            $j("#btn_downvideo").attr("href", url);
            $j("#btn_downvideo").attr("target", "_self");
        }
    }

    function showDownloadClientTips() {
        if ($j("#mask_layer").is(":visible")) {
            return;
        }
        var tpl = '<div class="pop_wrap pop_wrap_v2 pop_wrap_v2_down" style="position: relative;top: 0;left: 0; opacity: 1;" id="pop_downloadClient">';
        tpl += '    <div class="pop_play">';
        tpl += '        <div class="title"><a href="javaScript:void(0)" class="close" id="loadClientCancelBtn">关闭</a></div>';
        tpl += '        <div class="con">';
        tpl += '            <dl class="list_dl cf">';
        tpl += '                <dt><i class="icon_alert"></i></dt>';
        tpl += '                <dd>';
        tpl += '                    <div class="tit">您的腾讯视频客户端版本过低，<br>请更新到最新版本。</div>';
        tpl += '                    <div class="btn_con">';
        tpl += '                        <a href="javaScript:void(0)" id="loadClientBtn" class="btn_up">立即更新</a>';
        tpl += '                    </div>';
        tpl += '                </dd>';
        tpl += '            </dl>';
        tpl += '        </div>';
        tpl += '    </div>';
        tpl += '</div>';
        $j('body').append(tpl);
        txv.login.showMask("pop_downloadClient", 0, 0, 0);
        var pop = getElementById("pop_downloadClient");
        txv.login.showCenterNobg(pop);
        txv.login.ie6hook(pop);

        $j("#loadClientCancelBtn").on("click", function() {
            txv.login.hideMask();
            $j(this).parents(".pop_wrap").remove();
        });

        $j("#loadClientBtn").on("click", function() {
            var url = "http://v.qq.com/download.html?ptag=PCdownload";
            $j("#loadClientBtn").attr("target", "_blank");
            $j("#loadClientBtn").attr("href", url);

            txv.login.hideMask();
            $j(this).parents(".pop_wrap").remove();
        });
    }

    //添加暑期活动tab
    this.showSummerActiveTab = function() {
        var tpl = '<div class="mod_summer_fixed" id="mod_summer">';
        tpl += '    <div class="hd_top"></div>';
        tpl += '    <div class="bd_cont">';
        tpl += '        <ul class="activity_list" id="summer_active">';
        tpl += '            <li>';
        tpl += '                <a class="item item_zk" href="javascript:void(0);" id="link_zk">';
        tpl += '                   <div class="item_bg">';
        tpl += '                        <p class="txt">深海寻宝</p>';
        tpl += '                        <p class="txt">赢iPhone</p>';
        tpl += '                        <p class="time" id="link_zk_time">6月24日开启</p>';
        tpl += '                        <span class="more">GO</span>';
        tpl += '                    </div>';
        tpl += '                </a>';
        tpl += '            </li>';
        tpl += '            <li>';
        tpl += '                <a class="item item_bx" href="javascript:void(0);" id="link_bx">';
        tpl += '                   <div class="item_bg">';
        tpl += '                        <p class="txt">元气加油站</p>';
        tpl += '                        <p class="txt">年费特价</p>';
        tpl += '                        <p class="time" id="link_bx_time">7月16日开启</p>';
        tpl += '                        <span class="more">GO</span>';
        tpl += '                    </div>';
        tpl += '                </a>';
        tpl += '            </li>';
        tpl += '            <li>';
        tpl += '                <a class="item item_sd" href="javascript:void(0);" id="link_sd">';
        tpl += '                   <div class="item_bg">';
        tpl += '                        <p class="txt">疯狂购物车</p>';
        tpl += '                        <p class="txt">送千元礼包</p>';
        tpl += '                        <p class="time" id="link_sd_time">8月01日开启</p>';
        tpl += '                        <span class="more">GO</span>';
        tpl += '                    </div>';
        tpl += '                </a>';
        tpl += '            </li>';
        tpl += '        </ul>';
        tpl += '    </div>';
        tpl += '</div>';
        $("body").append(tpl);
        if ($(window).width() >= 1580) {
            $("#mod_summer").show();
        } else {
            $("#mod_summer").hide();
        }
        summerTabShowHide();
        summerTabAnimation();
        activityChange();
    }

    function summerTabShowHide() {
        $(window).on("resize", _.throttle(function() {
            if ($(window).width() >= 1580) {
                $("#mod_summer").show();
            } else {
                $("#mod_summer").hide();
            }
        }, 100));
    }

    function summerTabAnimation() {
        var length = $("#summer_active a").size();
        var index = -1;
        $("#summer_active").on("mouseenter", "a", function() {
            var currentItem = $(this);
            var parentItem = $("#summer_active");
            index = $("#summer_active a").index(this);
            var cl = "activity_list";
            if (index == 0) {
                $("#summer_active").addClass("activity_list list_item_zk");
            } else if (index == 1) {
                $("#summer_active").addClass("activity_list list_item_bx");
            } else if (index == 2)　 {
                $("#summer_active").addClass("activity_list list_item_sd");
            }
        }).on("mouseleave", "a", function() {
            $("#summer_active").removeClass();
            $("#summer_active").addClass("activity_list");
        });
    }

    function activityChange() {
        var curDate = new Date();
        var activeOneDate = new Date(Date.parse("2015/06/24"));
        var activeTwoDate = new Date(Date.parse("2015/07/16"));
        var activeThreeDate = new Date(Date.parse("2015/08/01"));

        if (curDate >= activeOneDate && curDate < activeTwoDate) { //activity one
            $("#link_zk").attr("href", "http://film.qq.com/topic/2015/summer/shxb.html?ptag=tab");
            $("#link_zk").attr("target", "_blank");
            $("#link_zk_time").text("火热进行中");
        } else if (curDate >= activeTwoDate && curDate < activeThreeDate) { //activity two
            $("#link_bx").attr("href", "http://film.qq.com/topic/2015/summer/02.html?ptag=tab");
            $("#link_bx").attr("target", "_blank");
            $("#link_bx_time").text("火热进行中");
            $("#link_zk_time").text("已结束");
        } else if (curDate >= activeThreeDate) { //activity three
            $("#link_sd").attr("href", "http://film.qq.com/topic/2015/gameofthrones5.html");
            $("#link_sd").attr("target", "_blank");
            $("#link_bx_time").text("已结束");
            $("#link_zk_time").text("已结束");
            $("#link_sd_time").text("火热进行中");
        }
    }

    //读取价格配置
    function initPrice() {
        var price_key = "hlw_price";
        var isInitDiscount = false;
        if (window.localStorage.getItem(price_key)) {
            isInitDiscount = true;
            var priceInfo = JSON.parse(window.localStorage.getItem(price_key));
            bindDiscount(priceInfo);
        }
        hlw_price.showPrice(function(json) {
            isInitDiscount = true;
            window.localStorage.setItem(price_key, JSON.stringify(json));
            bindDiscount(json);
        }, function() {
            if (!isInitDiscount) {
                hlw_price.showDefaultPrice(function(json_default) {
                    bindDiscount(json_default);
                });
            }
        });

        function bindDiscount(json_price) {
            var monthPriceStr = json_price.month_price.value;
            var monthPrice = JSON.parse(monthPriceStr);
            var lowestMonthPrice = monthPrice.lowest_month_price;
            $('.js_price_lowest').text(lowestMonthPrice);
        }
    }

}
txv.FilmPage.prototype = new txv.PayPage();

/**
 * @fileOverview 腾讯视频JS库 ios系统在好莱坞播放页的播放类
 * @lastUpdate $Date: 2012-12-12 18:03:26 +0800 (周三, 2012-12-12) $
 * @author QQLive $LastChangedBy: popotang $
 * @version $Rev: 24814 $
 */

/*
 * @include "../../../extend/qzfl.txv.js"
 * @include "../common/live.define.js"
 * @include "./../txv.define.js"
 * @include "./../txv.common.js"
 * @include "./../txv.login.js"
 * @include "./../txv.template.js"
 * @include "./txv.basepage.js"
 * @include "./txv.coverpage.js"
 * @include "./txv.coverutil.js"
 * @include "../film.define.js"
 * @include "../film.common.js"
 * @include "./txv.paypage.js"
 * @include "./txv.filmpage.js"
 */

/**
 * ios系统在好莱坞播放页的播放类
 * 
 * @class txv.IOSFilmPage
 * @extends txv.FilmPage
 */
txv.IOSFilmPage = function() {
	var $me = this;
	var vipClass, viphtml;// ios系统退出登录不刷新页面，需要记录页面初始状态

	/**
	 * 是否永远显示播放器 好莱坞iPad播放页不是像其他播放页一样，无论如何都要保证出播放器 iPad因为不提供试看，所以对未登录、未支付等用户直接显示支付tips而不出播放器的
	 * 
	 * @override
	 * @public
	 */
	this.alwaysShowPlayer = function() {
		return false;
	}

	/**
	 * 重绘播放器
	 * 
	 * @override
	 * @public
	 */
	this.rewritePlayer = function() {
		var $self = this;

		if (this.isOnlyPrevUser) {
			var video = txv.playdata.curVideo; // 检查IP是否受限
//			video.getMP4Url(function() {
//					    window.__tenplay_showPayTips(false,function(){
//					    	$j("[data-type='closetip']").hide();
//					    });
//				    }, function(errcode) {
//					    if (errcode == 80) { // IP受限
//						    $self.showHTML5IPLimit();
//						    return;
//					    }
//					    window.__tenplay_showPayTips(false,function(){
//					    	$j("[data-type='closetip']").hide();
//					    }); // 只要不是IP受限，都显示tips
//				    });
			video.getMP4Url().done(function() {
				    window.__tenplay_showPayTips(false,function(){
				    	$j("[data-type='closetip']").hide();
				    });
			    }).fail(function(errcode) {
				    if (errcode == 80) { // IP受限
					    $self.showHTML5IPLimit();
					    return;
				    }
				    window.__tenplay_showPayTips(false,function(){
				    	$j("[data-type='closetip']").hide();
				    }); // 只要不是IP受限，都显示tips
			    });
			return;
		}

		// 寻找断点续播的时间点, 从历史记录和当前播放器时间找最大值作为续播点
		
		txv.history.getHistoryTimeByKey(txv.playdata.curVideo.getFullVid(), COVER_INFO.id, function(his) {
			var curTime = txv.playdata.player ? (txv.playdata.player.getPlaytime() || 0) : 0;
		    var stime = Math.max(his, curTime);
			txv.playdata.curVideo.setHistoryStart(stime);
	
			$self.showPlayer(true);
	
			// 显示了播放器，但是发现的当前有弹出层，先把播放器隐藏起来吧，否则弹出层会被播放器挡住
			$self.hidePlayerWhenTips();
			Live.dom.setScrollTop(0, document);
		});
	}
	/**
	 * 检查VIP
	 * 
	 * @override
	 */
	this.checkIsVip = function() {

		var checkVipTimer = null, checktimes = 0, $self = txv.playpg;

		function onSetPayStatus(json) {
			if($j.util.getUrlParam('show_mask')==1 || typeof window.abtest != "undefined"){
				location.href = "http://film.qq.com/cover/"+COVER_INFO.id[0]+'/'+COVER_INFO.id+'.html';
			}
			clearTimeout(checkVipTimer);
			checkVipTimer = null;
			checktimes++;

			$self.isOnlyPrevUser = false;
			$self.setPayDomStyle(json);
			$self.rewritePlayer();
		}

		function onSetNotPayStatus() {
			clearTimeout(checkVipTimer);
			checkVipTimer = null;
			checktimes++;

			$self.isOnlyPrevUser = true;
			
			if (!!viphtml) {
				$e("#vip_pay").attr("class", vipClass);
				$e("#vip_pay").html(viphtml);
			}
			$self.setNotPayDomStyle();
			if ($self.isNeedVipPay() && txv.playdata.isVip) { // 如果是会员需要单片购买，可能需要修改文案的
				$self.setVipTicket(function() {
					$self.rewritePlayer();
				});
			}
			else {
				if (txv.login.isLogin() && (PAY_INFO.status == txv.PAY_STATUS.SINGLE || PAY_INFO.status == txv.PAY_STATUS.VIP_AND_SINGLE) && !txv.playdata.isVip) {
					$self.noVIPHasTic(function(num) {
						    $self.rewritePlayer();
						    if (num > 0) {
							    $j("a[data-type='buylink']").html("用观影券观看");
						    }
					    });
				}
				else{
					$self.setUserTicket(0);
					$self.rewritePlayer();
				}
			}
		}

		function checkSinglePay() {
			var defer = $.Deferred().done(function(json){
				// 支付过了
			    txv.playdata.isBuy = true;
			    if (checktimes == 0) {
				    onSetPayStatus(json);
			    }
			}).fail(function(json){
			    txv.playdata.isBuy = false;
			    if (checktimes == 0) {
				    onSetNotPayStatus(json);
			    }
			    if ($self.openUrlType != 0) { // 没支付过，并且之前还设定了登录后回调的打开窗口方案就需要开窗口
				    $self.flashOpenPay();
				    $self.openUrlType = 0;
			    }
			});
			$me.checkIsBuy(defer);
		}

		// 非windows上直接提示受DRM版权保护，因为iPad上是直接播放MP4文件，一键可以下载高清原片的，太危险了
		// drm专辑在ipad上不提供试看，直接提示平台不支持
		if (!!PLAYER_INFO.useDRM && !Live.userAgent.windows) {
			$self.showMobileDeviceCannotPlay();
			if(!PAY_INFO.macdrm){
				return;
			}
		}

		checkVipTimer = setTimeout(onSetNotPayStatus, 1000);
		if (!viphtml) {
			vipClass = $e("#vip_pay").attr("class");
			viphtml = $e("#vip_pay").html();
		}

		var vipDefer = txv.vip.checkIsVip(true);
		vipDefer.always(function(json) {
			    var isvip = (vipDefer instanceof Live.Deferred) ? vipDefer.isResolved() : false;
			    txv.playdata.isVip = isvip;
			    if (!isvip) { // 不是会员
				    checkSinglePay();
			    }
			    else { // 是会员
				    if ($self.isNeedVipPay()) { // 当前影片要求会员也要单独购买
					    checkSinglePay();
				    }
				    else {
					    if (checktimes == 0) {
						    onSetPayStatus(json);
					    }
				    }
			    }
		    });
	}
	/**
	 * 设置登录或者退出登录的回调
	 * 
	 * @override
	 * @public
	 */
	this.setLoginHook = function() {
		txv.login.addLoginCallback(this.checkIsVip);
		txv.login.addLogoutCallback(this.checkIsVip); // 主要是重载这里，退出登录不需要重刷页面，因为不需要重置播放器状态，直接修改为显示支付tips,iPad重刷一次好慢的
	}
}

Live.object.extend(txv.IOSFilmPage.prototype, new txv.FilmPage());
/**
 * @fileOverview 腾讯视频JS库 真实的外界对象实例
 * @lastUpdate $Date: 2012-12-12 18:03:26 +0800 (周三, 2012-12-12) $
 * @author QQLive $LastChangedBy: popotang $
 * @version $Rev: 24814 $
 */

/*
 * @include "../../../extend/qzfl.txv.js"
 * @include "../common/live.define.js"
 * @include "./../txv.define.js"
 * @include "./../txv.common.js"
 * @include "./../txv.login.js"
 * @include "./../txv.template.js"
 * @include "./txv.basepage.js"
 * @include "./txv.coverpage.js"
 * @include "./txv.coverutil.js"
 * @include "../film.define.js"
 * @include "../film.common.js"
 * @include "./txv.paypage.js"
 * @include "./txv.filmpage.js"
 * @include "./txv.iosfilmpage.js"
 * @include "./txv.europage.js"
 * @include "./txv.edupaypage.js"
 */

/*
 * ======================================
 * 
 * 			   真实的外界对象实例 
 * 
 * ======================================
 */
switch (PAGE_INFO.pageType) {
	case txv.PAGE_TYPE.COVER : {
		if (PAGE_INFO.tplType == txv.TPL_TYPE.BLACK) {
			txv.playpg = new txv.BlackCoverPage();
		}
		else {
			if (!!COVER_INFO.isEurope || !!COVER_INFO.useTextVideoList) {
				txv.playpg = new txv.EuropeCoverPage();
			}
			else {
				txv.playpg = new txv.SideCoverPage();
			}
		}
		break;
	}
	case txv.PAGE_TYPE.VIDEO : {
		txv.playpg = new txv.VideoPage();
		break;
	}
	case txv.PAGE_TYPE.BOKE : {
		txv.playpg = new txv.BokePlayPage();
		break;
	}
	case txv.PAGE_TYPE.BOKECOVER : {
		txv.playpg = new txv.BokeCoverPage();
		break;
	}
	case txv.PAGE_TYPE.V_MOVIE_PAY : {
		txv.playpg = new txv.PayPage();
		break;
	}
	case txv.PAGE_TYPE.FILM : {
		if (tvp.common.isUseHtml5()) { // 使用HTML5的播放器有专门的类定义
			txv.playpg = new txv.IOSFilmPage();
		}
		else {
			txv.playpg = new txv.FilmPage();
		}
		break;
	}
	case txv.PAGE_TYPE.EDU_PAY : {
		txv.playpg = new txv.EduPayPage();
		break;
	}
	default :
		txv.playpg = new txv.BasePlayPage();
		break;
}
define("abtest/scheme",function(require,exports,module) {
	var $ = window.$j || window.jQuery || window.$;
	var getSUin = function () {
		var cookieKeys = ['uin_cookie', 'adid', 'uin', 'luin', 'clientuin', 'pt2gguin', 'zzpaneluin', 'o_cookie'],
			suin = Live.login.getUin();
		if (!suin) {
			for (var i = 0, len = cookieKeys.length; i < len; i++) {
				suin = Live.cookie.get(cookieKeys[i]);
				suin = parseInt(suin.replace(/^[^\d]+/, '').replace(/[^\d]+$/, ''), 10) || 0;
				if (suin > 10000) {
					break;
				}
			}
		}
		return suin;
	};
	var vipInfo = {
		uin : getSUin(),
		isVip : false,
		isYearVip : false,
		isQQVip : false,
		isSVip : false
	},userinfo = {
		ip : "",
		province : "",
		city : ""
	},
	retScm = null,
	defer = $.Deferred(),
	getPolicy = function(autoid) {
		if(!autoid){
			defer.reject();
		} else {
			$.ajax({
				"url" : "http://sns.video.qq.com/fcgi-bin/dlib/dataout_pc?auto_id="+autoid+"&otype=json",
				"dataType" : "jsonp",
				"success" : ParsePolicy,
				"error" : ErrHandler
			});
		}
		return defer;
	},
	ParsePolicy = function(data){
		var scheme = data["scheme"],needVipInfo = false,needRegionInfo = false;
		for(var i=0;i<scheme.length;i++){
			var policy = scheme[i]["policy"];
			if(policy["name"].toUpperCase().indexOf("VIP") > -1) {
				needVipInfo = true;
			}
			if(policy["name"].toUpperCase().indexOf("REGION") > -1) {
				needRegionInfo = true;
			}
		}
		var rDefer = $.Deferred(),pDefer = $.Deferred();
		//获取地域信息
		if(needRegionInfo) {
			getRegionInfo().done(function(json){
				if (typeof(json) == "undefined" || json.o == "f") {
				    return;
			    }
			    $.extend(userinfo,json);
			}).always(function(){
				rDefer.resolve();
			});
		} else {
			rDefer.resolve();
		}
		//获取vip会员信息
		if(needVipInfo && Live.login.isLogin()) {
			getVipInfo().done(function(json) {
			    if (json && json.result && json.result.code == 0) {
			    	$.extend(vipInfo,{
			    		isVip : !!json.vip,
			    		isYearVip : !!json.annualvip,
			    		isQQVip : json.qqvip == 1,
			    		isSVip : json.qqvip == 2
			    	});
			    }
		    }).always(function(){
				pDefer.resolve();
			});;
		} else {
			pDefer.resolve();
		}
		//接口返回后在获取具体规则
		$.when(rDefer,pDefer).always(function(){
			getScheme(data);
		});
	},
	getRegionInfo = function() {
		return $.ajax({
			"url" : "http://aid.video.qq.com/fcgi-bin/userip?otype=json",
			"dataType" : "jsonp",
		    "cache" : false
		}).promise();
	}
	getVipInfo = function(){
		return $.ajax({
		    "url" : "http://pay.video.qq.com/fcgi-bin/payvip?otype=json",
		    "data" : {
			    uin : Live.login.getUin(),
			    t : 0,
			    getqqvip : 1,
			    getannual : 1,
			    low_login : 1
		    },
		    "dataType" : "jsonp",
		    "CSRF" : true
	    }).promise();
	},
	getScheme = function(data) {
		var allAct = data["allact"],scheme = data["scheme"];
		for(var i=0;i<scheme.length;i++){
			var scm = scheme[i];policy = scm["policy"];
			switch(policy["name"].toUpperCase()){
				//随机：0-2之间大于1的使用策略
				case "RANDOM" : {
					var c = Math.floor(Math.random()*(allAct.length + 1));
					//返回随机选中的数据，如果超过总长度认为未命中灰度规则，使用原始信息
					if(c != allAct.length){
						retScm = {"policy":policy,"act":allAct[c]};
					}
					break;
				}
				//奇数
				case "ODD" : {
					if(vipInfo.uin>0 && vipInfo.uin % 2 ==1){
						retScm = scm;
					}
					break;
				}
				case "EVEN" : {
					if(vipInfo.uin>0 && vipInfo.uin % 2 ==0){
						retScm = scm;
					}
					break;
				}
				case "SPECIFYQQ" : {
					if(vipInfo.uin>0 && !!policy.target){
						var targetqq = policy.target.split(",");
						for(var j=0;j<targetqq.length;j++){
							if(targetqq[j] == vipInfo.uin%10){
								retScm = scm;
								break;
							}
						}
					}
					break;
				}
				case "UNLOGIN" : {
					vipInfo.uin ==0 && (retScm = scm);
					break;
				}
				case "REGION" : {
					if(!!policy.target){
						var targetregion = policy.target.split(",");
						for(var j=0;j<targetregion.length;j++){
							var province,city;
							var p = targetregion[j].split("省");
							if(p.length>1){
								province=p[0];
								city = p[1].split("市")[0];
							} else {
								city = p[0].split("市")[0];
							}
							if(!!province && !!city){
								if(userinfo.province.indexOf(province) > -1 && userinfo.city.indexOf(city) > -1) {
									retScm = scm;
									break;
								}
							} else if(!!province){
								if(userinfo.province.indexOf(province) > -1) {
									retScm = scm;
									break;
								}
							} else if(!!city){
								if(userinfo.city.indexOf(city) > -1) {
									retScm = scm;
									break;
								}
							}
							
						}
					}
					break;
				}
				case "NOVIP" : {
					if(vipInfo.uin>0 &&!vipInfo.isVip){
						retScm = scm;
					}
					break;
				}
				case "VIP" : {
					if(vipInfo.uin>0 &&vipInfo.isVip){
						retScm = scm;
					}
					break;
				}
				case "YVIP" : {
					if(vipInfo.uin>0 &&vipInfo.isYearVip){
						retScm = scm;
					}
					break;
				}
				case "QQVIP" : {
					if(vipInfo.uin>0 &&vipInfo.isQQVip){
						retScm = scm;
					}
					break;
				}
				case "SVIP" : {
					if(vipInfo.uin>0 &&vipInfo.isSVip){
						retScm = scm;
					}
					break;
				}
				default : {
					break;
				}
			}
			if(!!retScm) {
				break;
			}
		}
		if(!!retScm) {
			defer.resolve(retScm);
		} else {
			defer.reject();
		}
	},
	//执行默认逻辑
	ErrHandler = function() {
		defer.reject();
	}
	module.exports = getPolicy;
});
//好莱坞价格配置读取
var hlw_price = function() {
    var price_url = "http://pay.video.qq.com/fcgi-bin/price-month?otype=json";

    function showPrice(suCb, failCb) {
        var hlw_params = "pf=1&app=browser";
        var url = [price_url, "&hlw_params=", encodeURIComponent(hlw_params)].join('');
        var isCallbckSuc = false;
        if (!isCallbckSuc) {
            setTimeout(function() {
                failCb && failCb();
            }, 1000);
        }
        $.ajax({
            url: url,
            dataType: "jsonp",
            success: function(json) {
                isCallbckSuc = true;
                if (json && json.result && json.result.code == 0) {
                    suCb && suCb(json);
                } else {
                    failCb && failCb();
                }
            },
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                isCallbckSuc = true;
                failCb && failCb();
            }
        });
    }

    function showDefaultPrice(suCb) {
        var hlw_price_default = {
            "month_price": {
                "hlwactid": "",
                "mid": "20",
                "mp": "MP20151130144807314_01",
                "policy_id": "78527",
                "value": "{\"lowest_month_price\":\"14\",\"pay_info\":[{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"14\",\"month\":\"1\",\"month_price\":\"20\",\"original_price\":\"30\",\"price_desc\":\"\",\"price_id\":\"78642\",\"product_desc\":\"一个月好莱坞会员\",\"product_id\":\"\",\"save_desc\":\"\",\"save_price\":\"10\",\"save_style\":\"\",\"total_price\":\"20\"},{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"14\",\"month\":\"3\",\"month_price\":\"15\",\"original_price\":\"90\",\"price_desc\":\"\",\"price_id\":\"78643\",\"product_desc\":\"三个月好莱坞会员\",\"product_id\":\"\",\"save_desc\":\"优惠\",\"save_price\":\"45\",\"save_style\":\"icon_discount\",\"total_price\":\"45\"},{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"14\",\"month\":\"12\",\"month_price\":\"14\",\"original_price\":\"360\",\"price_desc\":\"\",\"price_id\":\"78644\",\"product_desc\":\"十二个月好莱坞会员\",\"product_id\":\"\",\"save_desc\":\"超值\",\"save_price\":\"192\",\"save_style\":\"icon-42\",\"total_price\":\"168\"}],\"type\":2}",
                "wx_offerid": "1450002155"
            },
            "month_price_iap": {
                "hlwactid": "",
                "mid": "20",
                "mp": "MP20151130144807314_01",
                "policy_id": "78527",
                "value": "{\"lowest_month_price\":\"12.3\",\"pay_info\":[{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"12.3\",\"month\":\"1\",\"month_price\":\"25\",\"original_price\":\"30\",\"price_desc\":\"\",\"price_id\":\"78606\",\"product_desc\":\"一个月好莱坞会员\",\"product_id\":\"com.tenvideoios.OneMonthPay1\",\"save_desc\":\"\",\"save_price\":\"5\",\"save_style\":\"\",\"total_price\":\"25\"},{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"12.3\",\"month\":\"3\",\"month_price\":\"13.3\",\"original_price\":\"90\",\"price_desc\":\"\",\"price_id\":\"78607\",\"product_desc\":\"三个月好莱坞会员\",\"product_id\":\"com.tenvideoios.ThreeMonthPay1\",\"save_desc\":\"优惠\",\"save_price\":\"30\",\"save_style\":\"\",\"total_price\":\"60\"},{\"drm_id\":\"\",\"extends\":\"\",\"group_id\":\"\",\"lowest_price\":\"12.3\",\"month\":\"12\",\"month_price\":\"16.5\",\"original_price\":\"360\",\"price_desc\":\"\",\"price_id\":\"78608\",\"product_desc\":\"十二个月好莱坞会员\",\"product_id\":\"com.tenvideoios.OneYearPay1\",\"save_desc\":\"超值\",\"save_price\":\"162\",\"save_style\":\"\",\"total_price\":\"198\"}],\"type\":2}",
                "wx_offerid": "1450002155"
            }
        };
        suCb && suCb(hlw_price_default);
    }

    return {
        showPrice: showPrice,
        showDefaultPrice: showDefaultPrice
    }
}();
